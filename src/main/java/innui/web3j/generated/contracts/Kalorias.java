package innui.web3j.generated.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.8.
 */
@SuppressWarnings("rawtypes")
public class Kalorias extends Contract {
    public static final String BINARY = "60806040526001805460ff1916811790553480156200001c575f80fd5b507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e150091676040516200007d9060208082526018908201527f6d696e696261736573202d3e20636f6e7374727563746f720000000000000000604082015260600190565b60405180910390a160408051608081018252606060208083018281525f84860152828401929092523383528351808501855260048152631c9bdbdd60e21b918101919091529052905169726f6f745f636c61766560b01b8152600290600a01602060405180830381855afa158015620000f8573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906200011d919062000581565b6040828101919091528051600180825281830190925290602080830190803683375050506060820181905280516d7065726d69736f5f6d6178696d6f60901b91905f906200016f576200016f620005ad565b6020908102919091018101919091525f8054600181018255908052825160049091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039093166001600160a01b03199093169290921782559183015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401906200020890826200064d565b506040820151600282015560608201518051620002309160038401916020909101906200051d565b505050507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e15009167604051620002949060208082526017908201527f6b616c6f72696173202d3e20636f6e7374727563746f72000000000000000000604082015260600190565b60405180910390a1620002a66200030a565b6040805180820190915260078152666b616c6f72696160c81b6020820152620002cf9062000372565b6040805180820190915260078152666b616c6f72696160c81b6020820152620002f890620003dc565b62000304600362000442565b6200073b565b6200031533620004b0565b620003665760405162461bcd60e51b815260206004820152602860248201525f8051602062002b6383398151915260448201526703a3930b237b917160c51b60648201526084015b60405180910390fd5b6001805460ff19169055565b6200037d33620004b0565b620003ca5760405162461bcd60e51b815260206004820152602860248201525f8051602062002b6383398151915260448201526703a3930b237b917160c51b60648201526084016200035d565b6004620003d882826200064d565b5050565b620003e733620004b0565b620004345760405162461bcd60e51b815260206004820152602860248201525f8051602062002b6383398151915260448201526703a3930b237b917160c51b60648201526084016200035d565b6005620003d882826200064d565b6200044d33620004b0565b6200049a5760405162461bcd60e51b815260206004820152602860248201525f8051602062002b6383398151915260448201526703a3930b237b917160c51b60648201526084016200035d565b6006805460ff191660ff92909216919091179055565b5f80805b5f5481101562000516575f8181548110620004d357620004d3620005ad565b5f9182526020909120600490910201546001600160a01b039081169085160362000501576001915062000516565b6200050e81600162000715565b9050620004b4565b5092915050565b828054828255905f5260205f2090810192821562000559579160200282015b82811115620005595782518255916020019190600101906200053c565b50620005679291506200056b565b5090565b5b8082111562000567575f81556001016200056c565b5f6020828403121562000592575f80fd5b5051919050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b600181811c90821680620005d657607f821691505b602082108103620005f557634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111562000648575f81815260208120601f850160051c81016020861015620006235750805b601f850160051c820191505b8181101562000644578281556001016200062f565b5050505b505050565b81516001600160401b0381111562000669576200066962000599565b62000681816200067a8454620005c1565b84620005fb565b602080601f831160018114620006b7575f84156200069f5750858301515b5f19600386901b1c1916600185901b17855562000644565b5f85815260208120601f198616915b82811015620006e757888601518255948401946001909101908401620006c6565b50858210156200070557878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200073557634e487b7160e01b5f52601160045260245ffd5b92915050565b61241a80620007495f395ff3fe608060405234801561000f575f80fd5b50600436106101dc575f3560e01c80638e3ee7ba11610109578063d27beddf1161009e578063e3dbc9441161006e578063e3dbc944146103e7578063e817193f146103fa578063f5a571361461040d578063f9d06c4d14610415575f80fd5b8063d27beddf1461039b578063d297f8c7146103ae578063dd62ed3e146103c1578063e1f21c67146103d4575f80fd5b8063b2be353c116100d9578063b2be353c14610370578063b776a7a214610378578063beabacc814610380578063c49c3d0514610393575f80fd5b80638e3ee7ba1461032057806395d89b4114610342578063a9059cbb1461034a578063a9a4079c1461035d575f80fd5b8063313ce5671161017f578063688e34671161014f578063688e3467146102cd57806370a08231146102e75780637b318b6e146102fa57806386056a9c1461030d575f80fd5b8063313ce5671461027a57806338a3574c146102945780634dc46437146102a75780635d238c6f146102ba575f80fd5b806318160ddd116101ba57806318160ddd146102345780631d032d011461024a57806323b872dd1461025d5780632dd47cac14610270575f80fd5b806306fdde03146101e0578063095ea7b3146101fe57806315dacbea14610221575b5f80fd5b6101e8610428565b6040516101f59190611c31565b60405180910390f35b61021161020c366004611c59565b6104f6565b60405190151581526020016101f5565b61021161022f366004611c81565b610540565b61023c61057b565b6040519081526020016101f5565b61023c610258366004611cc9565b6105b8565b61021161026b366004611ce2565b610668565b6102786106b2565b005b6102826106ec565b60405160ff90911681526020016101f5565b6102786102a2366004611db8565b61072c565b6102116102b5366004611cc9565b610761565b6102786102c8366004611db8565b6107c5565b6001546102da9060ff1681565b6040516101f59190611dfe565b61023c6102f5366004611cc9565b6107f6565b610278610308366004611e24565b610847565b61027861031b366004611ea4565b610a18565b61033361032e366004611ec4565b610a53565b6040516101f593929190611edb565b6101e8610b16565b610211610358366004611c59565b610b5a565b61027861036b366004611f0e565b610b9b565b610278610dba565b610278610f09565b61021161038e366004611ce2565b610f3f565b610278610f70565b6102786103a9366004611f7d565b610fa8565b6102786103bc366004611ec4565b611077565b61023c6103cf366004611fad565b61115b565b6102116103e2366004611ce2565b6111bc565b6102786103f5366004611fde565b6111ed565b610278610408366004611f7d565b611313565b61023c6114a2565b610278610423366004611cc9565b6114de565b60605f60015460ff16600281111561044257610442611dea565b146104685760405162461bcd60e51b815260040161045f9061204d565b60405180910390fd5b6004805461047590612084565b80601f01602080910402602001604051908101604052809291908181526020018280546104a190612084565b80156104ec5780601f106104c3576101008083540402835291602001916104ec565b820191905f5260205f20905b8154815290600101906020018083116104cf57829003601f168201915b5050505050905090565b5f8060015460ff16600281111561050f5761050f611dea565b1461052c5760405162461bcd60e51b815260040161045f9061204d565b6105373384846116a5565b90505b92915050565b5f61054a33610761565b6105665760405162461bcd60e51b815260040161045f906120bc565b61057285858585611793565b95945050505050565b5f8060015460ff16600281111561059457610594611dea565b146105b15760405162461bcd60e51b815260040161045f9061204d565b5060035490565b5f8060015460ff1660028111156105d1576105d1611dea565b146105ee5760405162461bcd60e51b815260040161045f9061204d565b5f805b5f5481101561064a575f818154811061060c5761060c612104565b5f9182526020909120600490910201546001600160a01b0390811690851603610638576001915061064a565b61064381600161212c565b90506105f1565b81156106595791506106639050565b505f199392505050565b919050565b5f8060015460ff16600281111561068157610681611dea565b1461069e5760405162461bcd60e51b815260040161045f9061204d565b6106aa33858585611793565b949350505050565b6106bb33610761565b6106d75760405162461bcd60e51b815260040161045f906120bc565b600180545f919060ff191681835b0217905550565b5f8060015460ff16600281111561070557610705611dea565b146107225760405162461bcd60e51b815260040161045f9061204d565b5060065460ff1690565b61073533610761565b6107515760405162461bcd60e51b815260040161045f906120bc565b600561075d828261218d565b5050565b5f80805b5f548110156107be575f818154811061078057610780612104565b5f9182526020909120600490910201546001600160a01b03908116908516036107ac57600191506107be565b6107b781600161212c565b9050610765565b5092915050565b6107ce33610761565b6107ea5760405162461bcd60e51b815260040161045f906120bc565b600461075d828261218d565b5f8060015460ff16600281111561080f5761080f611dea565b1461082c5760405162461bcd60e51b815260040161045f9061204d565b506001600160a01b03165f9081526002602052604090205490565b61085033610761565b61086c5760405162461bcd60e51b815260040161045f906120bc565b5f546002106108e35760405162461bcd60e51b815260206004820152603e60248201527f536f6c6f207365207065726d6974652061637475616c697a617220736920686160448201527f79206d617320646520646f732061646d696e6973747261646f7265732e200000606482015260840161045f565b5f6108ed856105b8565b90505f81121561090f5760405162461bcd60e51b815260040161045f906120bc565b83511561094657835f828154811061092957610929612104565b905f5260205f2090600402016001019081610944919061218d565b505b8251156109c15760028360405161095d9190612249565b602060405180830381855afa158015610978573d5f803e3d5ffd5b5050506040513d601f19601f8201168201806040525081019061099b9190612264565b5f82815481106109ad576109ad612104565b905f5260205f209060040201600201819055505b6001600160a01b03821615610a1157815f82815481106109e3576109e3612104565b5f918252602090912060049091020180546001600160a01b0319166001600160a01b03929092169190911790555b5050505050565b610a2133610761565b610a3d5760405162461bcd60e51b815260040161045f906120bc565b6006805460ff191660ff92909216919091179055565b5f8181548110610a61575f80fd5b5f918252602090912060049091020180546001820180546001600160a01b03909216935090610a8f90612084565b80601f0160208091040260200160405190810160405280929190818152602001828054610abb90612084565b8015610b065780601f10610add57610100808354040283529160200191610b06565b820191905f5260205f20905b815481529060010190602001808311610ae957829003601f168201915b5050505050908060020154905083565b60605f60015460ff166002811115610b3057610b30611dea565b14610b4d5760405162461bcd60e51b815260040161045f9061204d565b6005805461047590612084565b5f8060015460ff166002811115610b7357610b73611dea565b14610b905760405162461bcd60e51b815260040161045f9061204d565b610537338484611973565b610ba433610761565b610bc05760405162461bcd60e51b815260040161045f906120bc565b5f805b5f54811015610c1c575f8181548110610bde57610bde612104565b5f9182526020909120600490910201546001600160a01b0390811690861603610c0a5760019150610c1c565b610c1581600161212c565b9050610bc3565b8115610c865760405162461bcd60e51b815260206004820152603360248201527f45736120646972656363696f6e2064652061646d696e6973747261646f7220796044820152720309032b9ba30903932b3b4b9ba3930b230971606d1b606482015260840161045f565b604080516080810182525f818301526060808201526001600160a01b0387168152602081018690529051600290610cbe908690612249565b602060405180830381855afa158015610cd9573d5f803e3d5ffd5b5050506040513d601f19601f82011682018060405250810190610cfc9190612264565b60408201525f805460018101825590805281517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563600490920291820180546001600160a01b0319166001600160a01b03909216919091178155602083015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5640190610d89908261218d565b506040820151600282015560608201518051610daf916003840191602090910190611afa565b505050505050505050565b610dc333610761565b610ddf5760405162461bcd60e51b815260040161045f906120bc565b5f610de9336105b8565b90505f811215610e0b5760405162461bcd60e51b815260040161045f906120bc565b5f8054610e1a9060019061227b565b81548110610e2a57610e2a612104565b905f5260205f2090600402015f8281548110610e4857610e48612104565b5f9182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180820190610e889084018261228e565b50600282015481600201556003820181600301908054610ea9929190611b43565b509050505f805480610ebd57610ebd61235b565b5f8281526020812060045f199093019283020180546001600160a01b031916815590610eec6001830182611b7f565b600282015f9055600382015f610f029190611bb9565b5050905550565b610f1233610761565b610f2e5760405162461bcd60e51b815260040161045f906120bc565b60018054819060ff191681806106e5565b5f610f4933610761565b610f655760405162461bcd60e51b815260040161045f906120bc565b6106aa848484611973565b610f7933610761565b610f955760405162461bcd60e51b815260040161045f906120bc565b600180546002919060ff191681836106e5565b610fb133610761565b610fcd5760405162461bcd60e51b815260040161045f906120bc565b600354610fde906103bc9084611a67565b6001600160a01b0383165f908152600260205260409020546110009083611a67565b6001600160a01b0384165f8181526002602052604090819020929092559051829184917fcd1074657acf74f5ce32ea668f47363c5e4aa585df2a30d9c2bf1b8ed2ba70799061106a906020808252600790820152662932b3b0b630b960c91b604082015260600190565b60405180910390a4505050565b61108033610761565b61109c5760405162461bcd60e51b815260040161045f906120bc565b6003548110156111145760405162461bcd60e51b815260206004820152603760248201527f4e6f2073652070756564656e20706f6e6572206d656e6f7320746f74616c206160448201527f706f727461646f2064656c20717565207469656e652e20000000000000000000606482015260840161045f565b5f61112a60035483611ab290919063ffffffff16565b305f908152600260205260409020549091506111469082611a67565b305f9081526002602052604090205550600355565b5f8060015460ff16600281111561117457611174611dea565b146111915760405162461bcd60e51b815260040161045f9061204d565b506001600160a01b039182165f90815260076020908152604080832093909416825291909152205490565b5f6111c633610761565b6111e25760405162461bcd60e51b815260040161045f906120bc565b6106aa8484846116a5565b6111f633610761565b6112125760405162461bcd60e51b815260040161045f906120bc565b335f61121d826105b8565b90505f81121561123f5760405162461bcd60e51b815260040161045f906120bc565b84511561127657845f828154811061125957611259612104565b905f5260205f2090600402016001019081611274919061218d565b505b8351156112f15760028460405161128d9190612249565b602060405180830381855afa1580156112a8573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906112cb9190612264565b5f82815481106112dd576112dd612104565b905f5260205f209060040201600201819055505b6001600160a01b03831615610a1157825f82815481106109e3576109e3612104565b61131c33610761565b6113385760405162461bcd60e51b815260040161045f906120bc565b6003548211156113a25760405162461bcd60e51b815260206004820152602f60248201527f4c612063616e746964616420696e6469636164612073757065726120656c207460448201526e037ba30b61030b837b93a30b237971608d1b606482015260840161045f565b8160035410156114035760405162461bcd60e51b815260206004820152602660248201527f4c612063616e74696461642065786365646520656c20746f74616c2061706f7260448201526503a30b23797160d51b606482015260840161045f565b6003546114109083611ab2565b6003556001600160a01b0383165f908152600260205260409020546114359083611ab2565b6001600160a01b0384165f8181526002602052604090819020929092559051829184917fcd1074657acf74f5ce32ea668f47363c5e4aa585df2a30d9c2bf1b8ed2ba70799061106a906020808252600a90820152692232b9b932b3b0b630b960b11b604082015260600190565b5f8060015460ff1660028111156114bb576114bb611dea565b146114d85760405162461bcd60e51b815260040161045f9061204d565b505f5490565b6114e733610761565b6115035760405162461bcd60e51b815260040161045f906120bc565b5f5460021061157a5760405162461bcd60e51b815260206004820152603a60248201527f536f6c6f207365207065726d69746520626f7272617220736920686179206d6160448201527f7320646520646f732061646d696e6973747261646f7265732e20000000000000606482015260840161045f565b5f611584826105b8565b90505f8112156115a65760405162461bcd60e51b815260040161045f906120bc565b5f80546115b59060019061227b565b815481106115c5576115c5612104565b905f5260205f2090600402015f82815481106115e3576115e3612104565b5f9182526020909120825460049092020180546001600160a01b0319166001600160a01b039092169190911781556001808201906116239084018261228e565b50600282015481600201556003820181600301908054611644929190611b43565b509050505f8054806116585761165861235b565b5f8281526020812060045f199093019283020180546001600160a01b0319168155906116876001830182611b7f565b600282015f9055600382015f61169d9190611bb9565b505090555050565b60408051602081019091525f80825290600190836116c2876107f6565b10156116ea575f93505f91506040518060600160405280603981526020016123ac6039913990505b6001600160a01b038087165f818152600760209081526040808320948a16808452949091529081902087905551869291907fbb08d8a8573c2c59d953161900e309121dc16d571f20fdfdb6f343bc132bbca890611748908690611c31565b60405180910390a48115157ff3e21299b73b1e0c00744d0725167942f1d79335cd4237efe04fe66d3973345a826040516117829190611c31565b60405180910390a250949350505050565b60408051602080820183525f8083526001600160a01b0387168152600290915291822054600191908411156117e8575f93505f91506040518060600160405280603981526020016123ac603991399050611836565b6001600160a01b038087165f908152600760209081526040808320938b1683529290522054841115611836575f93505f91506040518060600160405280603c8152602001612370603c913990505b6001600160a01b0386165f908152600260205260409020546118589085611ab2565b6001600160a01b038088165f9081526002602052604080822093909355908716815220546118869085611a67565b6001600160a01b038087165f90815260026020908152604080832094909455898316825260078152838220928b1682529190915220546118c69085611ab2565b6001600160a01b038088165f8181526007602090815260408083208d8616845290915290819020939093559151869291881691907fbb08d8a8573c2c59d953161900e309121dc16d571f20fdfdb6f343bc132bbca890611927908690611c31565b60405180910390a48115157ff3e21299b73b1e0c00744d0725167942f1d79335cd4237efe04fe66d3973345a826040516119619190611c31565b60405180910390a25095945050505050565b60408051602080820183525f8083526001600160a01b0387168152600290915291822054600191908411156119c4575f93505f91506040518060600160405280603981526020016123ac6039913990505b6001600160a01b0386165f908152600260205260409020546119e69085611ab2565b6001600160a01b038088165f908152600260205260408082209390935590871681522054611a149085611a67565b6001600160a01b038087165f81815260026020526040908190209390935591518692918916907fbb08d8a8573c2c59d953161900e309121dc16d571f20fdfdb6f343bc132bbca890611748908690611c31565b5f80611a73838561212c565b9050838110156105375760405162461bcd60e51b815260206004820152600a60248201526921202863203e3d20612960b01b604482015260640161045f565b5f82821115611af05760405162461bcd60e51b815260206004820152600a60248201526921202862203c3d20612960b01b604482015260640161045f565b610537828461227b565b828054828255905f5260205f20908101928215611b33579160200282015b82811115611b33578251825591602001919060010190611b18565b50611b3f929150611bd0565b5090565b828054828255905f5260205f20908101928215611b33575f5260205f209182015b82811115611b33578254825591600101919060010190611b64565b508054611b8b90612084565b5f825580601f10611b9a575050565b601f0160209004905f5260205f2090810190611bb69190611bd0565b50565b5080545f8255905f5260205f2090810190611bb691905b5b80821115611b3f575f8155600101611bd1565b5f5b83811015611bfe578181015183820152602001611be6565b50505f910152565b5f8151808452611c1d816020860160208601611be4565b601f01601f19169290920160200192915050565b602081525f6105376020830184611c06565b80356001600160a01b0381168114610663575f80fd5b5f8060408385031215611c6a575f80fd5b611c7383611c43565b946020939093013593505050565b5f805f8060808587031215611c94575f80fd5b611c9d85611c43565b9350611cab60208601611c43565b9250611cb960408601611c43565b9396929550929360600135925050565b5f60208284031215611cd9575f80fd5b61053782611c43565b5f805f60608486031215611cf4575f80fd5b611cfd84611c43565b9250611d0b60208501611c43565b9150604084013590509250925092565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112611d3e575f80fd5b813567ffffffffffffffff80821115611d5957611d59611d1b565b604051601f8301601f19908116603f01168101908282118183101715611d8157611d81611d1b565b81604052838152866020858801011115611d99575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f60208284031215611dc8575f80fd5b813567ffffffffffffffff811115611dde575f80fd5b6106aa84828501611d2f565b634e487b7160e01b5f52602160045260245ffd5b6020810160038310611e1e57634e487b7160e01b5f52602160045260245ffd5b91905290565b5f805f8060808587031215611e37575f80fd5b611e4085611c43565b9350602085013567ffffffffffffffff80821115611e5c575f80fd5b611e6888838901611d2f565b94506040870135915080821115611e7d575f80fd5b50611e8a87828801611d2f565b925050611e9960608601611c43565b905092959194509250565b5f60208284031215611eb4575f80fd5b813560ff81168114610537575f80fd5b5f60208284031215611ed4575f80fd5b5035919050565b6001600160a01b03841681526060602082018190525f90611efe90830185611c06565b9050826040830152949350505050565b5f805f60608486031215611f20575f80fd5b611f2984611c43565b9250602084013567ffffffffffffffff80821115611f45575f80fd5b611f5187838801611d2f565b93506040860135915080821115611f66575f80fd5b50611f7386828701611d2f565b9150509250925092565b5f805f60608486031215611f8f575f80fd5b611f9884611c43565b95602085013595506040909401359392505050565b5f8060408385031215611fbe575f80fd5b611fc783611c43565b9150611fd560208401611c43565b90509250929050565b5f805f60608486031215611ff0575f80fd5b833567ffffffffffffffff80821115612007575f80fd5b61201387838801611d2f565b94506020860135915080821115612028575f80fd5b5061203586828701611d2f565b92505061204460408501611c43565b90509250925092565b6020808252601b908201527f456c20636f6e747261746f206e6f20657374612061637469766f2e0000000000604082015260600190565b600181811c9082168061209857607f821691505b6020821081036120b657634e487b7160e01b5f52602260045260245ffd5b50919050565b60208082526028908201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360408201526703a3930b237b917160c51b606082015260800190565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8082018082111561053a5761053a612118565b601f821115612188575f81815260208120601f850160051c810160208610156121655750805b601f850160051c820191505b8181101561218457828155600101612171565b5050505b505050565b815167ffffffffffffffff8111156121a7576121a7611d1b565b6121bb816121b58454612084565b8461213f565b602080601f8311600181146121ee575f84156121d75750858301515b5f19600386901b1c1916600185901b178555612184565b5f85815260208120601f198616915b8281101561221c578886015182559484019460019091019084016121fd565b508582101561223957878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f825161225a818460208701611be4565b9190910192915050565b5f60208284031215612274575f80fd5b5051919050565b8181038181111561053a5761053a612118565b818103612299575050565b6122a38254612084565b67ffffffffffffffff8111156122bb576122bb611d1b565b6122c9816121b58454612084565b5f601f8211600181146122fa575f83156122e35750848201545b5f19600385901b1c1916600184901b178455610a11565b5f85815260209020601f198416905f86815260209020845b838110156123325782860154825560019586019590910190602001612312565b5085831015612239579301545f1960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b5f52603160045260245ffdfe4c612063616e746964616420736f6c6963697461646120737570657261206c612063616e7469646164206d6178696d61207065726d69746964612e204e6f207469656e652062616c616e636520737566696369656e74652e204e6f207365207265616c697a61206c61206f7065726163696f6e2e20a2646970667358221220d3e968c07baba6e6b0e661f19ae359a9ccdcf02ad73c89f4898b0e32ca48039e64736f6c634300081400334c6120646972656363696f6e206e6f20657320646520756e2061646d696e6973";

    public static final String FUNC_ACL_ARRAY = "acl_array";

    public static final String FUNC_ACTIVAR = "activar";

    public static final String FUNC_actualizar_administrador_usuario_clave_direccion = "actualizar_administrador_usuario_clave_direccion";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_approve = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_borrar_administrador = "borrar_administrador";

    public static final String FUNC_CREAR_ADMINISTRADOR = "crear_administrador";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DESREGALAR = "desregalar";

    public static final String FUNC_ESTADO = "estado";

    public static final String FUNC_INACTIVAR = "inactivar";

    public static final String FUNC_LEER_ADMINISTRADOR_POS = "leer_administrador_pos";

    public static final String FUNC_LEER_ADMINISTRADORES_NUM = "leer_administradores_num";

    public static final String FUNC_LIMITAR = "limitar";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_PONER_DECIMALES = "poner_decimales";

    public static final String FUNC_PONER_NOMBRE = "poner_nombre";

    public static final String FUNC_PONER_SIMBOLO = "poner_simbolo";

    public static final String FUNC_PONER_TOTAL_APORTADO = "poner_total_aportado";

    public static final String FUNC_REGALAR = "regalar";

    public static final String FUNC_SER_ADMINISTRADOR = "ser_administrador";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_transfer = "transfer";

    public static final String FUNC_transferFrom = "transferFrom";

    public static final Event AD_AD_U_EVENT = new Event("Ad_ad_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event AD_U_U_EVENT = new Event("Ad_u_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event MENSAJE_EVENT = new Event("Mensaje", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event OK_EVENT = new Event("Ok", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ST_U_EVENT = new Event("St_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Kalorias(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Kalorias(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Kalorias(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Kalorias(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<Ad_ad_uEventResponse> getAd_ad_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_AD_U_EVENT, transactionReceipt);
        ArrayList<Ad_ad_uEventResponse> responses = new ArrayList<Ad_ad_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.origen = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.destino = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_ad_uEventResponse getAd_ad_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_AD_U_EVENT, log);
        Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
        typedResponse.log = log;
        typedResponse.origen = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.destino = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_ad_uEventFromLog(log));
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_AD_U_EVENT));
        return ad_ad_uEventFlowable(filter);
    }

    public static List<Ad_u_uEventResponse> getAd_u_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_U_U_EVENT, transactionReceipt);
        ArrayList<Ad_u_uEventResponse> responses = new ArrayList<Ad_u_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_u_uEventResponse typedResponse = new Ad_u_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.direccion = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_u_uEventResponse getAd_u_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_U_U_EVENT, log);
        Ad_u_uEventResponse typedResponse = new Ad_u_uEventResponse();
        typedResponse.log = log;
        typedResponse.direccion = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_u_uEventResponse> ad_u_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_u_uEventFromLog(log));
    }

    public Flowable<Ad_u_uEventResponse> ad_u_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_U_U_EVENT));
        return ad_u_uEventFlowable(filter);
    }

    public static List<MensajeEventResponse> getMensajeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MENSAJE_EVENT, transactionReceipt);
        ArrayList<MensajeEventResponse> responses = new ArrayList<MensajeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MensajeEventResponse typedResponse = new MensajeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MensajeEventResponse getMensajeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MENSAJE_EVENT, log);
        MensajeEventResponse typedResponse = new MensajeEventResponse();
        typedResponse.log = log;
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMensajeEventFromLog(log));
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MENSAJE_EVENT));
        return mensajeEventFlowable(filter);
    }

    public static List<OkEventResponse> getOkEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OK_EVENT, transactionReceipt);
        ArrayList<OkEventResponse> responses = new ArrayList<OkEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OkEventResponse typedResponse = new OkEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OkEventResponse getOkEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OK_EVENT, log);
        OkEventResponse typedResponse = new OkEventResponse();
        typedResponse.log = log;
        typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<OkEventResponse> okEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOkEventFromLog(log));
    }

    public Flowable<OkEventResponse> okEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OK_EVENT));
        return okEventFlowable(filter);
    }

    public static List<St_uEventResponse> getSt_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ST_U_EVENT, transactionReceipt);
        ArrayList<St_uEventResponse> responses = new ArrayList<St_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            St_uEventResponse typedResponse = new St_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.texto = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static St_uEventResponse getSt_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ST_U_EVENT, log);
        St_uEventResponse typedResponse = new St_uEventResponse();
        typedResponse.log = log;
        typedResponse.texto = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<St_uEventResponse> st_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSt_uEventFromLog(log));
    }

    public Flowable<St_uEventResponse> st_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ST_U_EVENT));
        return st_uEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple3<String, String, byte[]>> acl_array(BigInteger param0) {
        final Function function = new Function(FUNC_ACL_ARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteFunctionCall<Tuple3<String, String, byte[]>>(function,
                new Callable<Tuple3<String, String, byte[]>>() {
                    @Override
                    public Tuple3<String, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> activar() {
        final Function function = new Function(
                FUNC_ACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String direccion, String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> allowance(String propietario, String gastador) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, propietario), 
                new org.web3j.abi.datatypes.Address(160, gastador)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String gastador_direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_approve, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, gastador_direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String ordenante, String gastador_direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_approve, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, ordenante), 
                new org.web3j.abi.datatypes.Address(160, gastador_direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String propietario) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, propietario)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador() {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador(String direccion) {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crear_administrador(String direccion, String usuario, byte[] clave) {
        final Function function = new Function(
                FUNC_CREAR_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> desregalar(String direccion, BigInteger cantidad, BigInteger id) {
        final Function function = new Function(
                FUNC_DESREGALAR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad), 
                new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> estado() {
        final Function function = new Function(FUNC_ESTADO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> inactivar() {
        final Function function = new Function(
                FUNC_INACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> leer_administrador_pos(String direccion) {
        final Function function = new Function(FUNC_LEER_ADMINISTRADOR_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_administradores_num() {
        final Function function = new Function(FUNC_LEER_ADMINISTRADORES_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> limitar() {
        final Function function = new Function(
                FUNC_LIMITAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_decimales(BigInteger nuevos_decimales_num) {
        final Function function = new Function(
                FUNC_PONER_DECIMALES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(nuevos_decimales_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_nombre(String nuevo_nombre) {
        final Function function = new Function(
                FUNC_PONER_NOMBRE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(nuevo_nombre)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_simbolo(String nuevo_simbolo) {
        final Function function = new Function(
                FUNC_PONER_SIMBOLO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(nuevo_simbolo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_total_aportado(BigInteger nuevo_total_aportado_num) {
        final Function function = new Function(
                FUNC_PONER_TOTAL_APORTADO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(nuevo_total_aportado_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> regalar(String direccion, BigInteger cantidad, BigInteger id) {
        final Function function = new Function(
                FUNC_REGALAR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad), 
                new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> ser_administrador(String direccion) {
        final Function function = new Function(FUNC_SER_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String destinatario, BigInteger valor) {
        final Function function = new Function(
                FUNC_transfer, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, destinatario), 
                new org.web3j.abi.datatypes.generated.Uint256(valor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String ordenante, String destinatario, BigInteger valor) {
        final Function function = new Function(
                FUNC_transfer, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, ordenante), 
                new org.web3j.abi.datatypes.Address(160, destinatario), 
                new org.web3j.abi.datatypes.generated.Uint256(valor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String ordenante, String origen, String destinatario, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_transferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, ordenante), 
                new org.web3j.abi.datatypes.Address(160, origen), 
                new org.web3j.abi.datatypes.Address(160, destinatario), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String origen, String destinatario, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_transferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, origen), 
                new org.web3j.abi.datatypes.Address(160, destinatario), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Kalorias load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Kalorias load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Kalorias load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Kalorias(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Kalorias load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Kalorias(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Kalorias> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Kalorias.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Kalorias> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Kalorias.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Kalorias> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Kalorias.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Kalorias> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Kalorias.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Ad_ad_uEventResponse extends BaseEventResponse {
        public String origen;

        public String destino;

        public BigInteger cantidad;

        public String mensaje;
    }

    public static class Ad_u_uEventResponse extends BaseEventResponse {
        public String direccion;

        public BigInteger cantidad;

        public BigInteger id;

        public String mensaje;
    }

    public static class MensajeEventResponse extends BaseEventResponse {
        public String mensaje;
    }

    public static class OkEventResponse extends BaseEventResponse {
        public Boolean es;

        public String mensaje;
    }

    public static class St_uEventResponse extends BaseEventResponse {
        public String texto;

        public BigInteger cantidad;
    }
}
