package innui.web3j.generated.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.8.
 */
@SuppressWarnings("rawtypes")
public class Kalorias extends Contract {
    public static final String BINARY = "60806040526001805460ff1916811790553480156200001d57600080fd5b507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e150091676040516200007e9060208082526018908201527f6d696e696261736573202d3e20636f6e7374727563746f720000000000000000604082015260600190565b60405180910390a16040805160808101825260606020808301828152600084860152828401929092523383528351808501855260048152631c9bdbdd60e21b918101919091529052905169726f6f745f636c61766560b01b8152600290600a01602060405180830381855afa158015620000fc573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062000121919062000592565b6040828101919091528051600180825281830190925290602080830190803683375050506060820181905280516d7065726d69736f5f6d6178696d6f60901b9190600090620001745762000174620005c2565b60209081029190910181019190915260008054600181018255908052825160049091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039093166001600160a01b03199093169290921782559183015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401906200020e908262000667565b506040820151600282015560608201518051620002369160038401916020909101906200052b565b505050507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e150091676040516200029a9060208082526017908201527f6b616c6f72696173202d3e20636f6e7374727563746f72000000000000000000604082015260600190565b60405180910390a1620002ac62000310565b6040805180820190915260078152666b616c6f72696160c81b6020820152620002d59062000379565b6040805180820190915260078152666b616c6f72696160c81b6020820152620002fe90620003e4565b6200030a60036200044b565b6200075b565b6200031b33620004ba565b6200036d5760405162461bcd60e51b8152602060048201526028602482015260008051602062002c6083398151915260448201526703a3930b237b917160c51b60648201526084015b60405180910390fd5b6001805460ff19169055565b6200038433620004ba565b620003d25760405162461bcd60e51b8152602060048201526028602482015260008051602062002c6083398151915260448201526703a3930b237b917160c51b606482015260840162000364565b6004620003e0828262000667565b5050565b620003ef33620004ba565b6200043d5760405162461bcd60e51b8152602060048201526028602482015260008051602062002c6083398151915260448201526703a3930b237b917160c51b606482015260840162000364565b6005620003e0828262000667565b6200045633620004ba565b620004a45760405162461bcd60e51b8152602060048201526028602482015260008051602062002c6083398151915260448201526703a3930b237b917160c51b606482015260840162000364565b6006805460ff191660ff92909216919091179055565b600080805b600054811015620005245760008181548110620004e057620004e0620005c2565b60009182526020909120600490910201546001600160a01b03908116908516036200050f576001915062000524565b6200051c81600162000733565b9050620004bf565b5092915050565b82805482825590600052602060002090810192821562000569579160200282015b82811115620005695782518255916020019190600101906200054c565b50620005779291506200057b565b5090565b5b808211156200057757600081556001016200057c565b600060208284031215620005a557600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c90821680620005ed57607f821691505b6020821081036200060e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200066257600081815260208120601f850160051c810160208610156200063d5750805b601f850160051c820191505b818110156200065e5782815560010162000649565b5050505b505050565b81516001600160401b03811115620006835762000683620005ac565b6200069b81620006948454620005d8565b8462000614565b602080601f831160018114620006d35760008415620006ba5750858301515b600019600386901b1c1916600185901b1785556200065e565b600085815260208120601f198616915b828110156200070457888601518255948401946001909101908401620006e3565b5085821015620007235787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200075557634e487b7160e01b600052601160045260246000fd5b92915050565b6124f5806200076b6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638e3ee7ba1161010f578063d27beddf116100a2578063e3dbc94411610071578063e3dbc944146103f1578063e817193f14610404578063f5a5713614610417578063f9d06c4d1461041f57600080fd5b8063d27beddf146103a5578063d297f8c7146103b8578063dd62ed3e146103cb578063e1f21c67146103de57600080fd5b8063b2be353c116100de578063b2be353c1461037a578063b776a7a214610382578063beabacc81461038a578063c49c3d051461039d57600080fd5b80638e3ee7ba1461032a57806395d89b411461034c578063a9059cbb14610354578063a9a4079c1461036757600080fd5b8063313ce56711610187578063688e346711610156578063688e3467146102d757806370a08231146102f15780637b318b6e1461030457806386056a9c1461031757600080fd5b8063313ce5671461028457806338a3574c1461029e5780634dc46437146102b15780635d238c6f146102c457600080fd5b806318160ddd116101c357806318160ddd1461023e5780631d032d011461025457806323b872dd146102675780632dd47cac1461027a57600080fd5b806306fdde03146101ea578063095ea7b31461020857806315dacbea1461022b575b600080fd5b6101f2610432565b6040516101ff9190611cc3565b60405180910390f35b61021b610216366004611ced565b610503565b60405190151581526020016101ff565b61021b610239366004611d17565b61054e565b61024661058a565b6040519081526020016101ff565b610246610262366004611d62565b6105c8565b61021b610275366004611d7d565b61067e565b6102826106c9565b005b61028c610704565b60405160ff90911681526020016101ff565b6102826102ac366004611e5c565b610745565b61021b6102bf366004611d62565b61077a565b6102826102d2366004611e5c565b6107e2565b6001546102e49060ff1681565b6040516101ff9190611ea7565b6102466102ff366004611d62565b610813565b610282610312366004611ecf565b610866565b610282610325366004611f54565b610a44565b61033d610338366004611f77565b610a7f565b6040516101ff93929190611f90565b6101f2610b47565b61021b610362366004611ced565b610b8c565b610282610375366004611fc4565b610bce565b610282610df5565b610282610f50565b61021b610398366004611d7d565b610f86565b610282610fb8565b6102826103b3366004612038565b610ff0565b6102826103c6366004611f77565b6110c1565b6102466103d936600461206b565b6111a8565b61021b6103ec366004611d7d565b61120b565b6102826103ff36600461209e565b61123d565b610282610412366004612038565b61136e565b6102466114ff565b61028261042d366004611d62565b61153d565b6060600060015460ff16600281111561044d5761044d611e91565b146104735760405162461bcd60e51b815260040161046a90612112565b60405180910390fd5b6004805461048090612149565b80601f01602080910402602001604051908101604052809291908181526020018280546104ac90612149565b80156104f95780601f106104ce576101008083540402835291602001916104f9565b820191906000526020600020905b8154815290600101906020018083116104dc57829003601f168201915b5050505050905090565b60008060015460ff16600281111561051d5761051d611e91565b1461053a5760405162461bcd60e51b815260040161046a90612112565b610545338484611711565b90505b92915050565b60006105593361077a565b6105755760405162461bcd60e51b815260040161046a90612183565b61058185858585611803565b95945050505050565b60008060015460ff1660028111156105a4576105a4611e91565b146105c15760405162461bcd60e51b815260040161046a90612112565b5060035490565b60008060015460ff1660028111156105e2576105e2611e91565b146105ff5760405162461bcd60e51b815260040161046a90612112565b6000805b60005481101561065f5760008181548110610620576106206121cb565b60009182526020909120600490910201546001600160a01b039081169085160361064d576001915061065f565b6106588160016121f7565b9050610603565b811561066e5791506106799050565b506000199392505050565b919050565b60008060015460ff16600281111561069857610698611e91565b146106b55760405162461bcd60e51b815260040161046a90612112565b6106c133858585611803565b949350505050565b6106d23361077a565b6106ee5760405162461bcd60e51b815260040161046a90612183565b600180546000919060ff191681835b0217905550565b60008060015460ff16600281111561071e5761071e611e91565b1461073b5760405162461bcd60e51b815260040161046a90612112565b5060065460ff1690565b61074e3361077a565b61076a5760405162461bcd60e51b815260040161046a90612183565b60056107768282612259565b5050565b600080805b6000548110156107db576000818154811061079c5761079c6121cb565b60009182526020909120600490910201546001600160a01b03908116908516036107c957600191506107db565b6107d48160016121f7565b905061077f565b5092915050565b6107eb3361077a565b6108075760405162461bcd60e51b815260040161046a90612183565b60046107768282612259565b60008060015460ff16600281111561082d5761082d611e91565b1461084a5760405162461bcd60e51b815260040161046a90612112565b506001600160a01b031660009081526002602052604090205490565b61086f3361077a565b61088b5760405162461bcd60e51b815260040161046a90612183565b6000546002106109035760405162461bcd60e51b815260206004820152603e60248201527f536f6c6f207365207065726d6974652061637475616c697a617220736920686160448201527f79206d617320646520646f732061646d696e6973747261646f7265732e200000606482015260840161046a565b600061090e856105c8565b905060008112156109315760405162461bcd60e51b815260040161046a90612183565b83511561096b57836000828154811061094c5761094c6121cb565b906000526020600020906004020160010190816109699190612259565b505b8251156109eb576002836040516109829190612319565b602060405180830381855afa15801561099f573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906109c29190612335565b600082815481106109d5576109d56121cb565b9060005260206000209060040201600201819055505b6001600160a01b03821615610a3d578160008281548110610a0e57610a0e6121cb565b6000918252602090912060049091020180546001600160a01b0319166001600160a01b03929092169190911790555b5050505050565b610a4d3361077a565b610a695760405162461bcd60e51b815260040161046a90612183565b6006805460ff191660ff92909216919091179055565b60008181548110610a8f57600080fd5b6000918252602090912060049091020180546001820180546001600160a01b03909216935090610abe90612149565b80601f0160208091040260200160405190810160405280929190818152602001828054610aea90612149565b8015610b375780601f10610b0c57610100808354040283529160200191610b37565b820191906000526020600020905b815481529060010190602001808311610b1a57829003601f168201915b5050505050908060020154905083565b6060600060015460ff166002811115610b6257610b62611e91565b14610b7f5760405162461bcd60e51b815260040161046a90612112565b6005805461048090612149565b60008060015460ff166002811115610ba657610ba6611e91565b14610bc35760405162461bcd60e51b815260040161046a90612112565b6105453384846119ed565b610bd73361077a565b610bf35760405162461bcd60e51b815260040161046a90612183565b6000805b600054811015610c535760008181548110610c1457610c146121cb565b60009182526020909120600490910201546001600160a01b0390811690861603610c415760019150610c53565b610c4c8160016121f7565b9050610bf7565b8115610cbd5760405162461bcd60e51b815260206004820152603360248201527f45736120646972656363696f6e2064652061646d696e6973747261646f7220796044820152720309032b9ba30903932b3b4b9ba3930b230971606d1b606482015260840161046a565b604080516080810182526000818301526060808201526001600160a01b0387168152602081018690529051600290610cf6908690612319565b602060405180830381855afa158015610d13573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610d369190612335565b60408201526000805460018101825590805281517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563600490920291820180546001600160a01b0319166001600160a01b03909216919091178155602083015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5640190610dc49082612259565b506040820151600282015560608201518051610dea916003840191602090910190611b7c565b505050505050505050565b610dfe3361077a565b610e1a5760405162461bcd60e51b815260040161046a90612183565b6000610e25336105c8565b90506000811215610e485760405162461bcd60e51b815260040161046a90612183565b60008054610e589060019061234e565b81548110610e6857610e686121cb565b906000526020600020906004020160008281548110610e8957610e896121cb565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180820190610eca90840182612361565b50600282015481600201556003820181600301908054610eeb929190611bc7565b509050506000805480610f0057610f00612434565b60008281526020812060046000199093019283020180546001600160a01b031916815590610f316001830182611c07565b6002820160009055600382016000610f499190611c44565b5050905550565b610f593361077a565b610f755760405162461bcd60e51b815260040161046a90612183565b60018054819060ff191681806106fd565b6000610f913361077a565b610fad5760405162461bcd60e51b815260040161046a90612183565b6106c18484846119ed565b610fc13361077a565b610fdd5760405162461bcd60e51b815260040161046a90612183565b600180546002919060ff191681836106fd565b610ff93361077a565b6110155760405162461bcd60e51b815260040161046a90612183565b600354611026906103c69084611ae7565b6001600160a01b0383166000908152600260205260409020546110499083611ae7565b6001600160a01b03841660008181526002602052604090819020929092559051829184917fcd1074657acf74f5ce32ea668f47363c5e4aa585df2a30d9c2bf1b8ed2ba7079906110b4906020808252600790820152662932b3b0b630b960c91b604082015260600190565b60405180910390a4505050565b6110ca3361077a565b6110e65760405162461bcd60e51b815260040161046a90612183565b60035481101561115e5760405162461bcd60e51b815260206004820152603760248201527f4e6f2073652070756564656e20706f6e6572206d656e6f7320746f74616c206160448201527f706f727461646f2064656c20717565207469656e652e20000000000000000000606482015260840161046a565b600061117560035483611b3390919063ffffffff16565b306000908152600260205260409020549091506111929082611ae7565b3060009081526002602052604090205550600355565b60008060015460ff1660028111156111c2576111c2611e91565b146111df5760405162461bcd60e51b815260040161046a90612112565b506001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b60006112163361077a565b6112325760405162461bcd60e51b815260040161046a90612183565b6106c1848484611711565b6112463361077a565b6112625760405162461bcd60e51b815260040161046a90612183565b33600061126e826105c8565b905060008112156112915760405162461bcd60e51b815260040161046a90612183565b8451156112cb5784600082815481106112ac576112ac6121cb565b906000526020600020906004020160010190816112c99190612259565b505b83511561134b576002846040516112e29190612319565b602060405180830381855afa1580156112ff573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906113229190612335565b60008281548110611335576113356121cb565b9060005260206000209060040201600201819055505b6001600160a01b03831615610a3d578260008281548110610a0e57610a0e6121cb565b6113773361077a565b6113935760405162461bcd60e51b815260040161046a90612183565b6003548211156113fd5760405162461bcd60e51b815260206004820152602f60248201527f4c612063616e746964616420696e6469636164612073757065726120656c207460448201526e037ba30b61030b837b93a30b237971608d1b606482015260840161046a565b81600354101561145e5760405162461bcd60e51b815260206004820152602660248201527f4c612063616e74696461642065786365646520656c20746f74616c2061706f7260448201526503a30b23797160d51b606482015260840161046a565b60035461146b9083611b33565b6003556001600160a01b0383166000908152600260205260409020546114919083611b33565b6001600160a01b03841660008181526002602052604090819020929092559051829184917fcd1074657acf74f5ce32ea668f47363c5e4aa585df2a30d9c2bf1b8ed2ba7079906110b4906020808252600a90820152692232b9b932b3b0b630b960b11b604082015260600190565b60008060015460ff16600281111561151957611519611e91565b146115365760405162461bcd60e51b815260040161046a90612112565b5060005490565b6115463361077a565b6115625760405162461bcd60e51b815260040161046a90612183565b6000546002106115da5760405162461bcd60e51b815260206004820152603a60248201527f536f6c6f207365207065726d69746520626f7272617220736920686179206d6160448201527f7320646520646f732061646d696e6973747261646f7265732e20000000000000606482015260840161046a565b60006115e5826105c8565b905060008112156116085760405162461bcd60e51b815260040161046a90612183565b600080546116189060019061234e565b81548110611628576116286121cb565b906000526020600020906004020160008281548110611649576116496121cb565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b0390921691909117815560018082019061168a90840182612361565b506002820154816002015560038201816003019080546116ab929190611bc7565b5090505060008054806116c0576116c0612434565b60008281526020812060046000199093019283020180546001600160a01b0319168155906116f16001830182611c07565b60028201600090556003820160006117099190611c44565b505090555050565b60408051602081019091526000808252906001908361172f87610813565b10156117595760009350600091506040518060600160405280603981526020016124876039913990505b6001600160a01b038087166000818152600760209081526040808320948a16808452949091529081902087905551869291907fbb08d8a8573c2c59d953161900e309121dc16d571f20fdfdb6f343bc132bbca8906117b8908690611cc3565b60405180910390a48115157ff3e21299b73b1e0c00744d0725167942f1d79335cd4237efe04fe66d3973345a826040516117f29190611cc3565b60405180910390a250949350505050565b604080516020808201835260008083526001600160a01b03871681526002909152918220546001919084111561185b5760009350600091506040518060600160405280603981526020016124876039913990506118ac565b6001600160a01b038087166000908152600760209081526040808320938b16835292905220548411156118ac5760009350600091506040518060600160405280603c815260200161244b603c913990505b6001600160a01b0386166000908152600260205260409020546118cf9085611b33565b6001600160a01b0380881660009081526002602052604080822093909355908716815220546118fe9085611ae7565b6001600160a01b03808716600090815260026020908152604080832094909455898316825260078152838220928b16825291909152205461193f9085611b33565b6001600160a01b0380881660008181526007602090815260408083208d8616845290915290819020939093559151869291881691907fbb08d8a8573c2c59d953161900e309121dc16d571f20fdfdb6f343bc132bbca8906119a1908690611cc3565b60405180910390a48115157ff3e21299b73b1e0c00744d0725167942f1d79335cd4237efe04fe66d3973345a826040516119db9190611cc3565b60405180910390a25095945050505050565b604080516020808201835260008083526001600160a01b038716815260029091529182205460019190841115611a415760009350600091506040518060600160405280603981526020016124876039913990505b6001600160a01b038616600090815260026020526040902054611a649085611b33565b6001600160a01b038088166000908152600260205260408082209390935590871681522054611a939085611ae7565b6001600160a01b03808716600081815260026020526040908190209390935591518692918916907fbb08d8a8573c2c59d953161900e309121dc16d571f20fdfdb6f343bc132bbca8906117b8908690611cc3565b600080611af483856121f7565b9050838110156105455760405162461bcd60e51b815260206004820152600a60248201526921202863203e3d20612960b01b604482015260640161046a565b600082821115611b725760405162461bcd60e51b815260206004820152600a60248201526921202862203c3d20612960b01b604482015260640161046a565b610545828461234e565b828054828255906000526020600020908101928215611bb7579160200282015b82811115611bb7578251825591602001919060010190611b9c565b50611bc3929150611c5e565b5090565b828054828255906000526020600020908101928215611bb75760005260206000209182015b82811115611bb7578254825591600101919060010190611bec565b508054611c1390612149565b6000825580601f10611c23575050565b601f016020900490600052602060002090810190611c419190611c5e565b50565b5080546000825590600052602060002090810190611c4191905b5b80821115611bc35760008155600101611c5f565b60005b83811015611c8e578181015183820152602001611c76565b50506000910152565b60008151808452611caf816020860160208601611c73565b601f01601f19169290920160200192915050565b6020815260006105456020830184611c97565b80356001600160a01b038116811461067957600080fd5b60008060408385031215611d0057600080fd5b611d0983611cd6565b946020939093013593505050565b60008060008060808587031215611d2d57600080fd5b611d3685611cd6565b9350611d4460208601611cd6565b9250611d5260408601611cd6565b9396929550929360600135925050565b600060208284031215611d7457600080fd5b61054582611cd6565b600080600060608486031215611d9257600080fd5b611d9b84611cd6565b9250611da960208501611cd6565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611de057600080fd5b813567ffffffffffffffff80821115611dfb57611dfb611db9565b604051601f8301601f19908116603f01168101908282118183101715611e2357611e23611db9565b81604052838152866020858801011115611e3c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215611e6e57600080fd5b813567ffffffffffffffff811115611e8557600080fd5b6106c184828501611dcf565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611ec957634e487b7160e01b600052602160045260246000fd5b91905290565b60008060008060808587031215611ee557600080fd5b611eee85611cd6565b9350602085013567ffffffffffffffff80821115611f0b57600080fd5b611f1788838901611dcf565b94506040870135915080821115611f2d57600080fd5b50611f3a87828801611dcf565b925050611f4960608601611cd6565b905092959194509250565b600060208284031215611f6657600080fd5b813560ff8116811461054557600080fd5b600060208284031215611f8957600080fd5b5035919050565b6001600160a01b0384168152606060208201819052600090611fb490830185611c97565b9050826040830152949350505050565b600080600060608486031215611fd957600080fd5b611fe284611cd6565b9250602084013567ffffffffffffffff80821115611fff57600080fd5b61200b87838801611dcf565b9350604086013591508082111561202157600080fd5b5061202e86828701611dcf565b9150509250925092565b60008060006060848603121561204d57600080fd5b61205684611cd6565b95602085013595506040909401359392505050565b6000806040838503121561207e57600080fd5b61208783611cd6565b915061209560208401611cd6565b90509250929050565b6000806000606084860312156120b357600080fd5b833567ffffffffffffffff808211156120cb57600080fd5b6120d787838801611dcf565b945060208601359150808211156120ed57600080fd5b506120fa86828701611dcf565b92505061210960408501611cd6565b90509250925092565b6020808252601b908201527f456c20636f6e747261746f206e6f20657374612061637469766f2e0000000000604082015260600190565b600181811c9082168061215d57607f821691505b60208210810361217d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526028908201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360408201526703a3930b237b917160c51b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610548576105486121e1565b601f82111561225457600081815260208120601f850160051c810160208610156122315750805b601f850160051c820191505b818110156122505782815560010161223d565b5050505b505050565b815167ffffffffffffffff81111561227357612273611db9565b612287816122818454612149565b8461220a565b602080601f8311600181146122bc57600084156122a45750858301515b600019600386901b1c1916600185901b178555612250565b600085815260208120601f198616915b828110156122eb578886015182559484019460019091019084016122cc565b50858210156123095787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000825161232b818460208701611c73565b9190910192915050565b60006020828403121561234757600080fd5b5051919050565b81810381811115610548576105486121e1565b81810361236c575050565b6123768254612149565b67ffffffffffffffff81111561238e5761238e611db9565b61239c816122818454612149565b6000601f8211600181146123d057600083156123b85750848201545b600019600385901b1c1916600184901b178455610a3d565b600085815260209020601f19841690600086815260209020845b8381101561240a57828601548255600195860195909101906020016123ea565b50858310156123095793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603160045260246000fdfe4c612063616e746964616420736f6c6963697461646120737570657261206c612063616e7469646164206d6178696d61207065726d69746964612e204e6f207469656e652062616c616e636520737566696369656e74652e204e6f207365207265616c697a61206c61206f7065726163696f6e2e20a2646970667358221220022663ec448575efcaa7b0b3fe6656a6ff21fb27bf5c9c6fd8c97d7381f2fedc64736f6c634300081100334c6120646972656363696f6e206e6f20657320646520756e2061646d696e6973";

    public static final String FUNC_ACL_ARRAY = "acl_array";

    public static final String FUNC_ACTIVAR = "activar";

    public static final String FUNC_actualizar_administrador_usuario_clave_direccion = "actualizar_administrador_usuario_clave_direccion";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_approve = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_borrar_administrador = "borrar_administrador";

    public static final String FUNC_CREAR_ADMINISTRADOR = "crear_administrador";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DESREGALAR = "desregalar";

    public static final String FUNC_ESTADO = "estado";

    public static final String FUNC_INACTIVAR = "inactivar";

    public static final String FUNC_LEER_ADMINISTRADOR_POS = "leer_administrador_pos";

    public static final String FUNC_LEER_ADMINISTRADORES_NUM = "leer_administradores_num";

    public static final String FUNC_LIMITAR = "limitar";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_PONER_DECIMALES = "poner_decimales";

    public static final String FUNC_PONER_NOMBRE = "poner_nombre";

    public static final String FUNC_PONER_SIMBOLO = "poner_simbolo";

    public static final String FUNC_PONER_TOTAL_APORTADO = "poner_total_aportado";

    public static final String FUNC_REGALAR = "regalar";

    public static final String FUNC_SER_ADMINISTRADOR = "ser_administrador";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_transfer = "transfer";

    public static final String FUNC_transferFrom = "transferFrom";

    public static final Event AD_AD_U_EVENT = new Event("Ad_ad_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event AD_U_U_EVENT = new Event("Ad_u_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event MENSAJE_EVENT = new Event("Mensaje", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event OK_EVENT = new Event("Ok", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ST_U_EVENT = new Event("St_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Kalorias(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Kalorias(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Kalorias(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Kalorias(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<Ad_ad_uEventResponse> getAd_ad_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_AD_U_EVENT, transactionReceipt);
        ArrayList<Ad_ad_uEventResponse> responses = new ArrayList<Ad_ad_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.origen = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.destino = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_ad_uEventResponse getAd_ad_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_AD_U_EVENT, log);
        Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
        typedResponse.log = log;
        typedResponse.origen = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.destino = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_ad_uEventFromLog(log));
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_AD_U_EVENT));
        return ad_ad_uEventFlowable(filter);
    }

    public static List<Ad_u_uEventResponse> getAd_u_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_U_U_EVENT, transactionReceipt);
        ArrayList<Ad_u_uEventResponse> responses = new ArrayList<Ad_u_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_u_uEventResponse typedResponse = new Ad_u_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.direccion = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_u_uEventResponse getAd_u_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_U_U_EVENT, log);
        Ad_u_uEventResponse typedResponse = new Ad_u_uEventResponse();
        typedResponse.log = log;
        typedResponse.direccion = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_u_uEventResponse> ad_u_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_u_uEventFromLog(log));
    }

    public Flowable<Ad_u_uEventResponse> ad_u_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_U_U_EVENT));
        return ad_u_uEventFlowable(filter);
    }

    public static List<MensajeEventResponse> getMensajeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MENSAJE_EVENT, transactionReceipt);
        ArrayList<MensajeEventResponse> responses = new ArrayList<MensajeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MensajeEventResponse typedResponse = new MensajeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MensajeEventResponse getMensajeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MENSAJE_EVENT, log);
        MensajeEventResponse typedResponse = new MensajeEventResponse();
        typedResponse.log = log;
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMensajeEventFromLog(log));
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MENSAJE_EVENT));
        return mensajeEventFlowable(filter);
    }

    public static List<OkEventResponse> getOkEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OK_EVENT, transactionReceipt);
        ArrayList<OkEventResponse> responses = new ArrayList<OkEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OkEventResponse typedResponse = new OkEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OkEventResponse getOkEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OK_EVENT, log);
        OkEventResponse typedResponse = new OkEventResponse();
        typedResponse.log = log;
        typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<OkEventResponse> okEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOkEventFromLog(log));
    }

    public Flowable<OkEventResponse> okEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OK_EVENT));
        return okEventFlowable(filter);
    }

    public static List<St_uEventResponse> getSt_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ST_U_EVENT, transactionReceipt);
        ArrayList<St_uEventResponse> responses = new ArrayList<St_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            St_uEventResponse typedResponse = new St_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.texto = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static St_uEventResponse getSt_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ST_U_EVENT, log);
        St_uEventResponse typedResponse = new St_uEventResponse();
        typedResponse.log = log;
        typedResponse.texto = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<St_uEventResponse> st_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSt_uEventFromLog(log));
    }

    public Flowable<St_uEventResponse> st_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ST_U_EVENT));
        return st_uEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple3<String, String, byte[]>> acl_array(BigInteger param0) {
        final Function function = new Function(FUNC_ACL_ARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteFunctionCall<Tuple3<String, String, byte[]>>(function,
                new Callable<Tuple3<String, String, byte[]>>() {
                    @Override
                    public Tuple3<String, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> activar() {
        final Function function = new Function(
                FUNC_ACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String direccion, String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> allowance(String propietario, String gastador) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, propietario), 
                new org.web3j.abi.datatypes.Address(160, gastador)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String gastador_direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_approve, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, gastador_direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String ordenante, String gastador_direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_approve, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, ordenante), 
                new org.web3j.abi.datatypes.Address(160, gastador_direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String propietario) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, propietario)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador() {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador(String direccion) {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crear_administrador(String direccion, String usuario, byte[] clave) {
        final Function function = new Function(
                FUNC_CREAR_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> desregalar(String direccion, BigInteger cantidad, BigInteger id) {
        final Function function = new Function(
                FUNC_DESREGALAR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad), 
                new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> estado() {
        final Function function = new Function(FUNC_ESTADO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> inactivar() {
        final Function function = new Function(
                FUNC_INACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> leer_administrador_pos(String direccion) {
        final Function function = new Function(FUNC_LEER_ADMINISTRADOR_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_administradores_num() {
        final Function function = new Function(FUNC_LEER_ADMINISTRADORES_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> limitar() {
        final Function function = new Function(
                FUNC_LIMITAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_decimales(BigInteger nuevos_decimales_num) {
        final Function function = new Function(
                FUNC_PONER_DECIMALES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(nuevos_decimales_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_nombre(String nuevo_nombre) {
        final Function function = new Function(
                FUNC_PONER_NOMBRE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(nuevo_nombre)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_simbolo(String nuevo_simbolo) {
        final Function function = new Function(
                FUNC_PONER_SIMBOLO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(nuevo_simbolo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_total_aportado(BigInteger nuevo_total_aportado_num) {
        final Function function = new Function(
                FUNC_PONER_TOTAL_APORTADO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(nuevo_total_aportado_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> regalar(String direccion, BigInteger cantidad, BigInteger id) {
        final Function function = new Function(
                FUNC_REGALAR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad), 
                new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> ser_administrador(String direccion) {
        final Function function = new Function(FUNC_SER_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String destinatario, BigInteger valor) {
        final Function function = new Function(
                FUNC_transfer, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, destinatario), 
                new org.web3j.abi.datatypes.generated.Uint256(valor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String ordenante, String destinatario, BigInteger valor) {
        final Function function = new Function(
                FUNC_transfer, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, ordenante), 
                new org.web3j.abi.datatypes.Address(160, destinatario), 
                new org.web3j.abi.datatypes.generated.Uint256(valor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String ordenante, String origen, String destinatario, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_transferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, ordenante), 
                new org.web3j.abi.datatypes.Address(160, origen), 
                new org.web3j.abi.datatypes.Address(160, destinatario), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String origen, String destinatario, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_transferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, origen), 
                new org.web3j.abi.datatypes.Address(160, destinatario), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Kalorias load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Kalorias load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Kalorias load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Kalorias(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Kalorias load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Kalorias(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Kalorias> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Kalorias.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Kalorias> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Kalorias.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Kalorias> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Kalorias.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Kalorias> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Kalorias.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Ad_ad_uEventResponse extends BaseEventResponse {
        public String origen;

        public String destino;

        public BigInteger cantidad;

        public String mensaje;
    }

    public static class Ad_u_uEventResponse extends BaseEventResponse {
        public String direccion;

        public BigInteger cantidad;

        public BigInteger id;

        public String mensaje;
    }

    public static class MensajeEventResponse extends BaseEventResponse {
        public String mensaje;
    }

    public static class OkEventResponse extends BaseEventResponse {
        public Boolean es;

        public String mensaje;
    }

    public static class St_uEventResponse extends BaseEventResponse {
        public String texto;

        public BigInteger cantidad;
    }
}
