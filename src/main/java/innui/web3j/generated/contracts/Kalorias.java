package innui.web3j.generated.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.8.
 */
@SuppressWarnings("rawtypes")
public class Kalorias extends Contract {
    public static final String BINARY = "60806040526001805460ff1916811790553480156200001d57600080fd5b507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e150091676040516200007e9060208082526018908201527f6d696e696261736573202d3e20636f6e7374727563746f720000000000000000604082015260600190565b60405180910390a16040805160808101825260606020808301828152600084860152828401929092523383528351808501855260048152631c9bdbdd60e21b918101919091529052905169726f6f745f636c61766560b01b8152600290600a01602060405180830381855afa158015620000fc573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620001219190620007ab565b6040828101919091528051600180825281830190925290602080830190803683375050506060820181905280516d7065726d69736f5f6d6178696d6f60901b9190600090620001745762000174620007db565b60209081029190910181019190915260008054600181018255908052825160049091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039093166001600160a01b03199093169290921782559183015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401906200020e908262000880565b5060408201516002820155606082015180516200023691600384019160209091019062000744565b505050507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e150091676040516200029a9060208082526017908201527f6b616c6f72696173202d3e20636f6e7374727563746f72000000000000000000604082015260600190565b60405180910390a1620002ac62000327565b6040805180820190915260078152666b616c6f72696160c81b6020820152620002d59062000390565b6040805180820190915260078152666b616c6f72696160c81b6020820152620002fe90620003fb565b6200030a600362000462565b682792c8fc4b53280000620003203082620004d1565b506200096e565b6200033233620005a2565b620003845760405162461bcd60e51b815260206004820152602860248201526000805160206200298783398151915260448201526703a3930b237b917160c51b60648201526084015b60405180910390fd5b6001805460ff19169055565b6200039b33620005a2565b620003e95760405162461bcd60e51b815260206004820152602860248201526000805160206200298783398151915260448201526703a3930b237b917160c51b60648201526084016200037b565b6004620003f7828262000880565b5050565b6200040633620005a2565b620004545760405162461bcd60e51b815260206004820152602860248201526000805160206200298783398151915260448201526703a3930b237b917160c51b60648201526084016200037b565b6005620003f7828262000880565b6200046d33620005a2565b620004bb5760405162461bcd60e51b815260206004820152602860248201526000805160206200298783398151915260448201526703a3930b237b917160c51b60648201526084016200037b565b6006805460ff191660ff92909216919091179055565b620004dc33620005a2565b6200052a5760405162461bcd60e51b815260206004820152602860248201526000805160206200298783398151915260448201526703a3930b237b917160c51b60648201526084016200037b565b620005506200054a826003546200061360201b620016df1790919060201c565b6200066c565b6001600160a01b03821660009081526002602090815260409091205462000582918390620016df62000613821b17901c565b6001600160a01b0390921660009081526002602052604090209190915550565b600080805b6000548110156200060c5760008181548110620005c857620005c8620007db565b60009182526020909120600490910201546001600160a01b0390811690851603620005f757600191506200060c565b620006048160016200094c565b9050620005a7565b5092915050565b6000806200062283856200094c565b905083811015620006635760405162461bcd60e51b815260206004820152600a60248201526921202863203e3d20612960b01b60448201526064016200037b565b90505b92915050565b6200067733620005a2565b620006c55760405162461bcd60e51b815260206004820152602860248201526000805160206200298783398151915260448201526703a3930b237b917160c51b60648201526084016200037b565b6003548110156200073f5760405162461bcd60e51b815260206004820152603760248201527f4e6f2073652070756564656e20706f6e6572206d656e6f7320746f74616c206160448201527f706f727461646f2064656c20717565207469656e652e2000000000000000000060648201526084016200037b565b600355565b82805482825590600052602060002090810192821562000782579160200282015b828111156200078257825182559160200191906001019062000765565b506200079092915062000794565b5090565b5b8082111562000790576000815560010162000795565b600060208284031215620007be57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c908216806200080657607f821691505b6020821081036200082757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200087b57600081815260208120601f850160051c81016020861015620008565750805b601f850160051c820191505b81811015620008775782815560010162000862565b5050505b505050565b81516001600160401b038111156200089c576200089c620007c5565b620008b481620008ad8454620007f1565b846200082d565b602080601f831160018114620008ec5760008415620008d35750858301515b600019600386901b1c1916600185901b17855562000877565b600085815260208120601f198616915b828110156200091d57888601518255948401946001909101908401620008fc565b50858210156200093c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200066657634e487b7160e01b600052601160045260246000fd5b612009806200097e6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806386056a9c116100f9578063b776a7a211610097578063dd62ed3e11610071578063dd62ed3e14610369578063e3dbc9441461037c578063f5a571361461038f578063f9d06c4d1461039757600080fd5b8063b776a7a214610346578063c49c3d051461034e578063d297f8c71461035657600080fd5b806395d89b41116100d357806395d89b4114610310578063a9059cbb14610318578063a9a4079c1461032b578063b2be353c1461033e57600080fd5b806386056a9c146102c85780638b62ed36146102db5780638e3ee7ba146102ee57600080fd5b8063313ce567116101665780635d238c6f116101405780635d238c6f14610275578063688e34671461028857806370a08231146102a25780637b318b6e146102b557600080fd5b8063313ce5671461023557806338a3574c1461024f5780634dc464371461026257600080fd5b806306fdde03146101ae578063095ea7b3146101cc57806318160ddd146101ef5780631d032d011461020557806323b872dd146102185780632dd47cac1461022b575b600080fd5b6101b66103aa565b6040516101c391906118c2565b60405180910390f35b6101df6101da3660046118ec565b61047b565b60405190151581526020016101c3565b6101f7610518565b6040519081526020016101c3565b6101f7610213366004611916565b610556565b6101df610226366004611931565b61060c565b61023361083c565b005b61023d610877565b60405160ff90911681526020016101c3565b61023361025d366004611a10565b6108b8565b6101df610270366004611916565b6108ed565b610233610283366004611a10565b610955565b6001546102959060ff1681565b6040516101c39190611a63565b6101f76102b0366004611916565b610986565b6102336102c3366004611a8b565b6109d9565b6102336102d6366004611b10565b610bb7565b6102336102e93660046118ec565b610bf2565b6103016102fc366004611b33565b610c6b565b6040516101c393929190611b4c565b6101b6610d33565b6101df6103263660046118ec565b610d78565b610233610339366004611b80565b610ea5565b6102336110ce565b610233611229565b61023361125f565b610233610364366004611b33565b611297565b6101f7610377366004611bf4565b611339565b61023361038a366004611c27565b61139c565b6101f76114cd565b6102336103a5366004611916565b61150b565b6060600060015460ff1660028111156103c5576103c5611a4d565b146103eb5760405162461bcd60e51b81526004016103e290611c9b565b60405180910390fd5b600480546103f890611cd2565b80601f016020809104026020016040519081016040528092919081815260200182805461042490611cd2565b80156104715780601f1061044657610100808354040283529160200191610471565b820191906000526020600020905b81548152906001019060200180831161045457829003601f168201915b5050505050905090565b60008060015460ff16600281111561049557610495611a4d565b146104b25760405162461bcd60e51b81526004016103e290611c9b565b3360008181526007602090815260408083206001600160a01b03881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a35060015b92915050565b60008060015460ff16600281111561053257610532611a4d565b1461054f5760405162461bcd60e51b81526004016103e290611c9b565b5060035490565b60008060015460ff16600281111561057057610570611a4d565b1461058d5760405162461bcd60e51b81526004016103e290611c9b565b6000805b6000548110156105ed57600081815481106105ae576105ae611d0c565b60009182526020909120600490910201546001600160a01b03908116908516036105db57600191506105ed565b6105e6816001611d38565b9050610591565b81156105fc5791506106079050565b506000199392505050565b919050565b60008060015460ff16600281111561062657610626611a4d565b146106435760405162461bcd60e51b81526004016103e290611c9b565b6001600160a01b0384166000908152600260205260409020548211156106ab5760405162461bcd60e51b815260206004820152601d60248201527f4e6f207469656e652062616c616e636520737566696369656e74652e2000000060448201526064016103e2565b6001600160a01b03841660009081526007602090815260408083203384529091529020548211156107445760405162461bcd60e51b815260206004820152603d60248201527f4c612063616e746964616420736f6c6963697461646120737570657261206c6160448201527f2063616e7469646164206dc3a178696d61207065726d69746964612e2000000060648201526084016103e2565b6001600160a01b0384166000908152600260205260409020546107679083611732565b6001600160a01b0380861660009081526002602052604080822093909355908516815220546107969083611732565b6001600160a01b0380851660009081526002602090815260408083209490945591871681526007825282812033825290915220546107d49083611732565b6001600160a01b03858116600081815260076020908152604080832033845282529182902094909455518581529186169290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35060019392505050565b610845336108ed565b6108615760405162461bcd60e51b81526004016103e290611d4b565b600180546000919060ff191681835b0217905550565b60008060015460ff16600281111561089157610891611a4d565b146108ae5760405162461bcd60e51b81526004016103e290611c9b565b5060065460ff1690565b6108c1336108ed565b6108dd5760405162461bcd60e51b81526004016103e290611d4b565b60056108e98282611de2565b5050565b600080805b60005481101561094e576000818154811061090f5761090f611d0c565b60009182526020909120600490910201546001600160a01b039081169085160361093c576001915061094e565b610947816001611d38565b90506108f2565b5092915050565b61095e336108ed565b61097a5760405162461bcd60e51b81526004016103e290611d4b565b60046108e98282611de2565b60008060015460ff1660028111156109a0576109a0611a4d565b146109bd5760405162461bcd60e51b81526004016103e290611c9b565b506001600160a01b031660009081526002602052604090205490565b6109e2336108ed565b6109fe5760405162461bcd60e51b81526004016103e290611d4b565b600054600210610a765760405162461bcd60e51b815260206004820152603e60248201527f536f6c6f207365207065726d6974652061637475616c697a617220736920686160448201527f79206d617320646520646f732061646d696e6973747261646f7265732e20000060648201526084016103e2565b6000610a8185610556565b90506000811215610aa45760405162461bcd60e51b81526004016103e290611d4b565b835115610ade578360008281548110610abf57610abf611d0c565b90600052602060002090600402016001019081610adc9190611de2565b505b825115610b5e57600283604051610af59190611ea2565b602060405180830381855afa158015610b12573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610b359190611ebe565b60008281548110610b4857610b48611d0c565b9060005260206000209060040201600201819055505b6001600160a01b03821615610bb0578160008281548110610b8157610b81611d0c565b6000918252602090912060049091020180546001600160a01b0319166001600160a01b03929092169190911790555b5050505050565b610bc0336108ed565b610bdc5760405162461bcd60e51b81526004016103e290611d4b565b6006805460ff191660ff92909216919091179055565b610bfb336108ed565b610c175760405162461bcd60e51b81526004016103e290611d4b565b600354610c289061036490836116df565b6001600160a01b038216600090815260026020526040902054610c4b90826116df565b6001600160a01b0390921660009081526002602052604090209190915550565b60008181548110610c7b57600080fd5b6000918252602090912060049091020180546001820180546001600160a01b03909216935090610caa90611cd2565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd690611cd2565b8015610d235780601f10610cf857610100808354040283529160200191610d23565b820191906000526020600020905b815481529060010190602001808311610d0657829003601f168201915b5050505050908060020154905083565b6060600060015460ff166002811115610d4e57610d4e611a4d565b14610d6b5760405162461bcd60e51b81526004016103e290611c9b565b600580546103f890611cd2565b60008060015460ff166002811115610d9257610d92611a4d565b14610daf5760405162461bcd60e51b81526004016103e290611c9b565b33600090815260026020526040902054821115610e0e5760405162461bcd60e51b815260206004820152601d60248201527f4e6f207469656e652062616c616e636520737566696369656e74652e2000000060448201526064016103e2565b33600090815260026020526040902054610e289083611732565b33600090815260026020526040808220929092556001600160a01b03851681522054610e5490836116df565b6001600160a01b0384166000818152600260205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105069086815260200190565b610eae336108ed565b610eca5760405162461bcd60e51b81526004016103e290611d4b565b6000805b600054811015610f2a5760008181548110610eeb57610eeb611d0c565b60009182526020909120600490910201546001600160a01b0390811690861603610f185760019150610f2a565b610f23816001611d38565b9050610ece565b8115610f965760405162461bcd60e51b815260206004820152603560248201527f4573612064697265636369c3b36e2064652061646d696e6973747261646f722060448201527403cb09032b9ba61d0903932b3b4b9ba3930b230971605d1b60648201526084016103e2565b604080516080810182526000818301526060808201526001600160a01b0387168152602081018690529051600290610fcf908690611ea2565b602060405180830381855afa158015610fec573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061100f9190611ebe565b60408201526000805460018101825590805281517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563600490920291820180546001600160a01b0319166001600160a01b03909216919091178155602083015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564019061109d9082611de2565b5060408201516002820155606082015180516110c391600384019160209091019061177b565b505050505050505050565b6110d7336108ed565b6110f35760405162461bcd60e51b81526004016103e290611d4b565b60006110fe33610556565b905060008112156111215760405162461bcd60e51b81526004016103e290611d4b565b6000805461113190600190611ed7565b8154811061114157611141611d0c565b90600052602060002090600402016000828154811061116257611162611d0c565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b039092169190911781556001808201906111a390840182611eea565b506002820154816002015560038201816003019080546111c49291906117c6565b5090505060008054806111d9576111d9611fbd565b60008281526020812060046000199093019283020180546001600160a01b03191681559061120a6001830182611806565b60028201600090556003820160006112229190611843565b5050905550565b611232336108ed565b61124e5760405162461bcd60e51b81526004016103e290611d4b565b60018054819060ff19168180610870565b611268336108ed565b6112845760405162461bcd60e51b81526004016103e290611d4b565b600180546002919060ff19168183610870565b6112a0336108ed565b6112bc5760405162461bcd60e51b81526004016103e290611d4b565b6003548110156113345760405162461bcd60e51b815260206004820152603760248201527f4e6f2073652070756564656e20706f6e6572206d656e6f7320746f74616c206160448201527f706f727461646f2064656c20717565207469656e652e2000000000000000000060648201526084016103e2565b600355565b60008060015460ff16600281111561135357611353611a4d565b146113705760405162461bcd60e51b81526004016103e290611c9b565b506001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b6113a5336108ed565b6113c15760405162461bcd60e51b81526004016103e290611d4b565b3360006113cd82610556565b905060008112156113f05760405162461bcd60e51b81526004016103e290611d4b565b84511561142a57846000828154811061140b5761140b611d0c565b906000526020600020906004020160010190816114289190611de2565b505b8351156114aa576002846040516114419190611ea2565b602060405180830381855afa15801561145e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906114819190611ebe565b6000828154811061149457611494611d0c565b9060005260206000209060040201600201819055505b6001600160a01b03831615610bb0578260008281548110610b8157610b81611d0c565b60008060015460ff1660028111156114e7576114e7611a4d565b146115045760405162461bcd60e51b81526004016103e290611c9b565b5060005490565b611514336108ed565b6115305760405162461bcd60e51b81526004016103e290611d4b565b6000546002106115a85760405162461bcd60e51b815260206004820152603a60248201527f536f6c6f207365207065726d69746520626f7272617220736920686179206d6160448201527f7320646520646f732061646d696e6973747261646f7265732e2000000000000060648201526084016103e2565b60006115b382610556565b905060008112156115d65760405162461bcd60e51b81526004016103e290611d4b565b600080546115e690600190611ed7565b815481106115f6576115f6611d0c565b90600052602060002090600402016000828154811061161757611617611d0c565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b0390921691909117815560018082019061165890840182611eea565b506002820154816002015560038201816003019080546116799291906117c6565b50905050600080548061168e5761168e611fbd565b60008281526020812060046000199093019283020180546001600160a01b0319168155906116bf6001830182611806565b60028201600090556003820160006116d79190611843565b505090555050565b6000806116ec8385611d38565b90508381101561172b5760405162461bcd60e51b815260206004820152600a60248201526921202863203e3d20612960b01b60448201526064016103e2565b9392505050565b6000828211156117715760405162461bcd60e51b815260206004820152600a60248201526921202862203c3d20612960b01b60448201526064016103e2565b61172b8284611ed7565b8280548282559060005260206000209081019282156117b6579160200282015b828111156117b657825182559160200191906001019061179b565b506117c292915061185d565b5090565b8280548282559060005260206000209081019282156117b65760005260206000209182015b828111156117b65782548255916001019190600101906117eb565b50805461181290611cd2565b6000825580601f10611822575050565b601f016020900490600052602060002090810190611840919061185d565b50565b508054600082559060005260206000209081019061184091905b5b808211156117c2576000815560010161185e565b60005b8381101561188d578181015183820152602001611875565b50506000910152565b600081518084526118ae816020860160208601611872565b601f01601f19169290920160200192915050565b60208152600061172b6020830184611896565b80356001600160a01b038116811461060757600080fd5b600080604083850312156118ff57600080fd5b611908836118d5565b946020939093013593505050565b60006020828403121561192857600080fd5b61172b826118d5565b60008060006060848603121561194657600080fd5b61194f846118d5565b925061195d602085016118d5565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261199457600080fd5b813567ffffffffffffffff808211156119af576119af61196d565b604051601f8301601f19908116603f011681019082821181831017156119d7576119d761196d565b816040528381528660208588010111156119f057600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215611a2257600080fd5b813567ffffffffffffffff811115611a3957600080fd5b611a4584828501611983565b949350505050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611a8557634e487b7160e01b600052602160045260246000fd5b91905290565b60008060008060808587031215611aa157600080fd5b611aaa856118d5565b9350602085013567ffffffffffffffff80821115611ac757600080fd5b611ad388838901611983565b94506040870135915080821115611ae957600080fd5b50611af687828801611983565b925050611b05606086016118d5565b905092959194509250565b600060208284031215611b2257600080fd5b813560ff8116811461172b57600080fd5b600060208284031215611b4557600080fd5b5035919050565b6001600160a01b0384168152606060208201819052600090611b7090830185611896565b9050826040830152949350505050565b600080600060608486031215611b9557600080fd5b611b9e846118d5565b9250602084013567ffffffffffffffff80821115611bbb57600080fd5b611bc787838801611983565b93506040860135915080821115611bdd57600080fd5b50611bea86828701611983565b9150509250925092565b60008060408385031215611c0757600080fd5b611c10836118d5565b9150611c1e602084016118d5565b90509250929050565b600080600060608486031215611c3c57600080fd5b833567ffffffffffffffff80821115611c5457600080fd5b611c6087838801611983565b94506020860135915080821115611c7657600080fd5b50611c8386828701611983565b925050611c92604085016118d5565b90509250925092565b6020808252601c908201527f456c20636f6e747261746f206e6f20657374c3a12061637469766f2e00000000604082015260600190565b600181811c90821680611ce657607f821691505b602082108103611d0657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561051257610512611d22565b60208082526028908201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360408201526703a3930b237b917160c51b606082015260800190565b601f821115611ddd57600081815260208120601f850160051c81016020861015611dba5750805b601f850160051c820191505b81811015611dd957828155600101611dc6565b5050505b505050565b815167ffffffffffffffff811115611dfc57611dfc61196d565b611e1081611e0a8454611cd2565b84611d93565b602080601f831160018114611e455760008415611e2d5750858301515b600019600386901b1c1916600185901b178555611dd9565b600085815260208120601f198616915b82811015611e7457888601518255948401946001909101908401611e55565b5085821015611e925787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251611eb4818460208701611872565b9190910192915050565b600060208284031215611ed057600080fd5b5051919050565b8181038181111561051257610512611d22565b818103611ef5575050565b611eff8254611cd2565b67ffffffffffffffff811115611f1757611f1761196d565b611f2581611e0a8454611cd2565b6000601f821160018114611f595760008315611f415750848201545b600019600385901b1c1916600184901b178455610bb0565b600085815260209020601f19841690600086815260209020845b83811015611f935782860154825560019586019590910190602001611f73565b5085831015611e925793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220da95f4454ed3ce06f7487eab766f0ebf12d73ae6ba3ae6abdea6fc7a5caa319f64736f6c634300081100334c6120646972656363696f6e206e6f20657320646520756e2061646d696e6973";

    public static final String FUNC_ACL_ARRAY = "acl_array";

    public static final String FUNC_ACTIVAR = "activar";

    public static final String FUNC_actualizar_administrador_usuario_clave_direccion = "actualizar_administrador_usuario_clave_direccion";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_borrar_administrador = "borrar_administrador";

    public static final String FUNC_CREAR_ADMINISTRADOR = "crear_administrador";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_ESTADO = "estado";

    public static final String FUNC_INACTIVAR = "inactivar";

    public static final String FUNC_LEER_ADMINISTRADOR_POS = "leer_administrador_pos";

    public static final String FUNC_LEER_ADMINISTRADORES_NUM = "leer_administradores_num";

    public static final String FUNC_LIMITAR = "limitar";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_PONER_DECIMALES = "poner_decimales";

    public static final String FUNC_PONER_NOMBRE = "poner_nombre";

    public static final String FUNC_PONER_SIMBOLO = "poner_simbolo";

    public static final String FUNC_PONER_TOTAL_APORTADO = "poner_total_aportado";

    public static final String FUNC_REGALAR = "regalar";

    public static final String FUNC_SER_ADMINISTRADOR = "ser_administrador";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEBUG_ST_AD_EVENT = new Event("Debug_st_ad", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event MENSAJE_EVENT = new Event("Mensaje", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Kalorias(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Kalorias(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Kalorias(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Kalorias(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<Debug_st_adEventResponse> getDebug_st_adEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEBUG_ST_AD_EVENT, transactionReceipt);
        ArrayList<Debug_st_adEventResponse> responses = new ArrayList<Debug_st_adEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Debug_st_adEventResponse typedResponse = new Debug_st_adEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.direccion = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Debug_st_adEventResponse getDebug_st_adEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEBUG_ST_AD_EVENT, log);
        Debug_st_adEventResponse typedResponse = new Debug_st_adEventResponse();
        typedResponse.log = log;
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.direccion = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<Debug_st_adEventResponse> debug_st_adEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDebug_st_adEventFromLog(log));
    }

    public Flowable<Debug_st_adEventResponse> debug_st_adEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBUG_ST_AD_EVENT));
        return debug_st_adEventFlowable(filter);
    }

    public static List<MensajeEventResponse> getMensajeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MENSAJE_EVENT, transactionReceipt);
        ArrayList<MensajeEventResponse> responses = new ArrayList<MensajeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MensajeEventResponse typedResponse = new MensajeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MensajeEventResponse getMensajeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MENSAJE_EVENT, log);
        MensajeEventResponse typedResponse = new MensajeEventResponse();
        typedResponse.log = log;
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMensajeEventFromLog(log));
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MENSAJE_EVENT));
        return mensajeEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple3<String, String, byte[]>> acl_array(BigInteger param0) {
        final Function function = new Function(FUNC_ACL_ARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteFunctionCall<Tuple3<String, String, byte[]>>(function,
                new Callable<Tuple3<String, String, byte[]>>() {
                    @Override
                    public Tuple3<String, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> activar() {
        final Function function = new Function(
                FUNC_ACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String direccion, String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> allowance(String propietario, String gastador) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, propietario), 
                new org.web3j.abi.datatypes.Address(160, gastador)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String gastador_direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, gastador_direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String propietario) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, propietario)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador() {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador(String direccion) {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crear_administrador(String direccion, String usuario, byte[] clave) {
        final Function function = new Function(
                FUNC_CREAR_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> estado() {
        final Function function = new Function(FUNC_ESTADO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> inactivar() {
        final Function function = new Function(
                FUNC_INACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> leer_administrador_pos(String direccion) {
        final Function function = new Function(FUNC_LEER_ADMINISTRADOR_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_administradores_num() {
        final Function function = new Function(FUNC_LEER_ADMINISTRADORES_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> limitar() {
        final Function function = new Function(
                FUNC_LIMITAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_decimales(BigInteger nuevos_decimales_num) {
        final Function function = new Function(
                FUNC_PONER_DECIMALES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(nuevos_decimales_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_nombre(String nuevo_nombre) {
        final Function function = new Function(
                FUNC_PONER_NOMBRE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(nuevo_nombre)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_simbolo(String nuevo_simbolo) {
        final Function function = new Function(
                FUNC_PONER_SIMBOLO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(nuevo_simbolo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_total_aportado(BigInteger nuevo_total_aportado_num) {
        final Function function = new Function(
                FUNC_PONER_TOTAL_APORTADO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(nuevo_total_aportado_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> regalar(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_REGALAR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> ser_administrador(String direccion) {
        final Function function = new Function(FUNC_SER_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String destinatario, BigInteger valor) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, destinatario), 
                new org.web3j.abi.datatypes.generated.Uint256(valor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String origen, String destinatario, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, origen), 
                new org.web3j.abi.datatypes.Address(160, destinatario), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Kalorias load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Kalorias load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Kalorias load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Kalorias(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Kalorias load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Kalorias(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Kalorias> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Kalorias.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Kalorias> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Kalorias.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Kalorias> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Kalorias.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Kalorias> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Kalorias.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class Debug_st_adEventResponse extends BaseEventResponse {
        public String mensaje;

        public String direccion;
    }

    public static class MensajeEventResponse extends BaseEventResponse {
        public String mensaje;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;
    }
}
