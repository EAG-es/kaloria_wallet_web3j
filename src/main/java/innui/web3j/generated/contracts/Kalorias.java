package innui.web3j.generated.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.8.
 */
@SuppressWarnings("rawtypes")
public class Kalorias extends Contract {
    public static final String BINARY = "60806040526001805460ff1916811790553480156200001d57600080fd5b507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e150091676040516200007e9060208082526018908201527f6d696e696261736573202d3e20636f6e7374727563746f720000000000000000604082015260600190565b60405180910390a16040805160808101825260606020808301828152600084860152828401929092523383528351808501855260048152631c9bdbdd60e21b918101919091529052905169726f6f745f636c61766560b01b8152600290600a01602060405180830381855afa158015620000fc573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062000121919062000592565b6040828101919091528051600180825281830190925290602080830190803683375050506060820181905280516d7065726d69736f5f6d6178696d6f60901b9190600090620001745762000174620005c2565b60209081029190910181019190915260008054600181018255908052825160049091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039093166001600160a01b03199093169290921782559183015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401906200020e908262000667565b506040820151600282015560608201518051620002369160038401916020909101906200052b565b505050507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e150091676040516200029a9060208082526017908201527f6b616c6f72696173202d3e20636f6e7374727563746f72000000000000000000604082015260600190565b60405180910390a1620002ac62000310565b6040805180820190915260078152666b616c6f72696160c81b6020820152620002d59062000379565b6040805180820190915260078152666b616c6f72696160c81b6020820152620002fe90620003e4565b6200030a60036200044b565b6200075b565b6200031b33620004ba565b6200036d5760405162461bcd60e51b815260206004820152602860248201526000805160206200287883398151915260448201526703a3930b237b917160c51b60648201526084015b60405180910390fd5b6001805460ff19169055565b6200038433620004ba565b620003d25760405162461bcd60e51b815260206004820152602860248201526000805160206200287883398151915260448201526703a3930b237b917160c51b606482015260840162000364565b6004620003e0828262000667565b5050565b620003ef33620004ba565b6200043d5760405162461bcd60e51b815260206004820152602860248201526000805160206200287883398151915260448201526703a3930b237b917160c51b606482015260840162000364565b6005620003e0828262000667565b6200045633620004ba565b620004a45760405162461bcd60e51b815260206004820152602860248201526000805160206200287883398151915260448201526703a3930b237b917160c51b606482015260840162000364565b6006805460ff191660ff92909216919091179055565b600080805b600054811015620005245760008181548110620004e057620004e0620005c2565b60009182526020909120600490910201546001600160a01b03908116908516036200050f576001915062000524565b6200051c81600162000733565b9050620004bf565b5092915050565b82805482825590600052602060002090810192821562000569579160200282015b82811115620005695782518255916020019190600101906200054c565b50620005779291506200057b565b5090565b5b808211156200057757600081556001016200057c565b600060208284031215620005a557600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c90821680620005ed57607f821691505b6020821081036200060e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200066257600081815260208120601f850160051c810160208610156200063d5750805b601f850160051c820191505b818110156200065e5782815560010162000649565b5050505b505050565b81516001600160401b03811115620006835762000683620005ac565b6200069b81620006948454620005d8565b8462000614565b602080601f831160018114620006d35760008415620006ba5750858301515b600019600386901b1c1916600185901b1785556200065e565b600085815260208120601f198616915b828110156200070457888601518255948401946001909101908401620006e3565b5085821015620007235787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200075557634e487b7160e01b600052601160045260246000fd5b92915050565b61210d806200076b6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806386056a9c116100f9578063b776a7a211610097578063dd62ed3e11610071578063dd62ed3e14610369578063e3dbc9441461037c578063f5a571361461038f578063f9d06c4d1461039757600080fd5b8063b776a7a214610346578063c49c3d051461034e578063d297f8c71461035657600080fd5b806395d89b41116100d357806395d89b4114610310578063a9059cbb14610318578063a9a4079c1461032b578063b2be353c1461033e57600080fd5b806386056a9c146102c85780638b62ed36146102db5780638e3ee7ba146102ee57600080fd5b8063313ce567116101665780635d238c6f116101405780635d238c6f14610275578063688e34671461028857806370a08231146102a25780637b318b6e146102b557600080fd5b8063313ce5671461023557806338a3574c1461024f5780634dc464371461026257600080fd5b806306fdde03146101ae578063095ea7b3146101cc57806318160ddd146101ef5780631d032d011461020557806323b872dd146102185780632dd47cac1461022b575b600080fd5b6101b66103aa565b6040516101c39190611950565b60405180910390f35b6101df6101da36600461197a565b61047b565b60405190151581526020016101c3565b6101f76105b7565b6040519081526020016101c3565b6101f76102133660046119a4565b6105f5565b6101df6102263660046119bf565b6106ab565b6102336108de565b005b61023d610919565b60405160ff90911681526020016101c3565b61023361025d366004611a9e565b61095a565b6101df6102703660046119a4565b61098f565b610233610283366004611a9e565b6109f7565b6001546102959060ff1681565b6040516101c39190611af1565b6101f76102b03660046119a4565b610a28565b6102336102c3366004611b19565b610a7b565b6102336102d6366004611b9e565b610c59565b6102336102e936600461197a565b610c94565b6103016102fc366004611bc1565b610d0d565b6040516101c393929190611bda565b6101b6610dd5565b6101df61032636600461197a565b610e1a565b610233610339366004611c0e565b610f35565b61023361115c565b6102336112b7565b6102336112ed565b610233610364366004611bc1565b611325565b6101f7610377366004611c82565b6113c7565b61023361038a366004611cb5565b61142a565b6101f761155b565b6102336103a53660046119a4565b611599565b6060600060015460ff1660028111156103c5576103c5611adb565b146103eb5760405162461bcd60e51b81526004016103e290611d29565b60405180910390fd5b600480546103f890611d60565b80601f016020809104026020016040519081016040528092919081815260200182805461042490611d60565b80156104715780601f1061044657610100808354040283529160200191610471565b820191906000526020600020905b81548152906001019060200180831161045457829003601f168201915b5050505050905090565b60008060015460ff16600281111561049557610495611adb565b146104b25760405162461bcd60e51b81526004016103e290611d29565b604080516020810190915260008152600190836104ce33610a28565b101561051157505060408051808201909152601e81527f4e6f207469656e652062616c616e636520737566696369656e7465732e20000060208201526000925082905b3360008181526007602090815260408083206001600160a01b038a1680855292529182902087905590518692907fbb08d8a8573c2c59d953161900e309121dc16d571f20fdfdb6f343bc132bbca89061056b908690611950565b60405180910390a48115157ff3e21299b73b1e0c00744d0725167942f1d79335cd4237efe04fe66d3973345a826040516105a59190611950565b60405180910390a25090505b92915050565b60008060015460ff1660028111156105d1576105d1611adb565b146105ee5760405162461bcd60e51b81526004016103e290611d29565b5060035490565b60008060015460ff16600281111561060f5761060f611adb565b1461062c5760405162461bcd60e51b81526004016103e290611d29565b6000805b60005481101561068c576000818154811061064d5761064d611d9a565b60009182526020909120600490910201546001600160a01b039081169085160361067a576001915061068c565b610685816001611dc6565b9050610630565b811561069b5791506106a69050565b506000199392505050565b919050565b60008060015460ff1660028111156106c5576106c5611adb565b146106e25760405162461bcd60e51b81526004016103e290611d29565b604080516020808201835260008083526001600160a01b0388168152600290915291909120546001919084111561075457505060408051808201909152601d81527f4e6f207469656e652062616c616e636520737566696369656e74652e2000000060208201526000925082906107a3565b6001600160a01b03861660009081526007602090815260408083203384529091529020548411156107a35760009350600091506040518060600160405280603c815260200161209c603c913990505b6001600160a01b0386166000908152600260205260409020546107c6908561176d565b6001600160a01b0380881660009081526002602052604080822093909355908716815220546107f590856117bd565b6001600160a01b038087166000908152600260209081526040808320949094559189168152600782528281203382529091522054610833908561176d565b6001600160a01b03808816600081815260076020908152604080832033845290915290819020939093559151869291881691907fbb08d8a8573c2c59d953161900e309121dc16d571f20fdfdb6f343bc132bbca890610893908690611950565b60405180910390a48115157ff3e21299b73b1e0c00744d0725167942f1d79335cd4237efe04fe66d3973345a826040516108cd9190611950565b60405180910390a250949350505050565b6108e73361098f565b6109035760405162461bcd60e51b81526004016103e290611dd9565b600180546000919060ff191681835b0217905550565b60008060015460ff16600281111561093357610933611adb565b146109505760405162461bcd60e51b81526004016103e290611d29565b5060065460ff1690565b6109633361098f565b61097f5760405162461bcd60e51b81526004016103e290611dd9565b600561098b8282611e70565b5050565b600080805b6000548110156109f057600081815481106109b1576109b1611d9a565b60009182526020909120600490910201546001600160a01b03908116908516036109de57600191506109f0565b6109e9816001611dc6565b9050610994565b5092915050565b610a003361098f565b610a1c5760405162461bcd60e51b81526004016103e290611dd9565b600461098b8282611e70565b60008060015460ff166002811115610a4257610a42611adb565b14610a5f5760405162461bcd60e51b81526004016103e290611d29565b506001600160a01b031660009081526002602052604090205490565b610a843361098f565b610aa05760405162461bcd60e51b81526004016103e290611dd9565b600054600210610b185760405162461bcd60e51b815260206004820152603e60248201527f536f6c6f207365207065726d6974652061637475616c697a617220736920686160448201527f79206d617320646520646f732061646d696e6973747261646f7265732e20000060648201526084016103e2565b6000610b23856105f5565b90506000811215610b465760405162461bcd60e51b81526004016103e290611dd9565b835115610b80578360008281548110610b6157610b61611d9a565b90600052602060002090600402016001019081610b7e9190611e70565b505b825115610c0057600283604051610b979190611f30565b602060405180830381855afa158015610bb4573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610bd79190611f4c565b60008281548110610bea57610bea611d9a565b9060005260206000209060040201600201819055505b6001600160a01b03821615610c52578160008281548110610c2357610c23611d9a565b6000918252602090912060049091020180546001600160a01b0319166001600160a01b03929092169190911790555b5050505050565b610c623361098f565b610c7e5760405162461bcd60e51b81526004016103e290611dd9565b6006805460ff191660ff92909216919091179055565b610c9d3361098f565b610cb95760405162461bcd60e51b81526004016103e290611dd9565b600354610cca9061036490836117bd565b6001600160a01b038216600090815260026020526040902054610ced90826117bd565b6001600160a01b0390921660009081526002602052604090209190915550565b60008181548110610d1d57600080fd5b6000918252602090912060049091020180546001820180546001600160a01b03909216935090610d4c90611d60565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7890611d60565b8015610dc55780601f10610d9a57610100808354040283529160200191610dc5565b820191906000526020600020905b815481529060010190602001808311610da857829003601f168201915b5050505050908060020154905083565b6060600060015460ff166002811115610df057610df0611adb565b14610e0d5760405162461bcd60e51b81526004016103e290611d29565b600580546103f890611d60565b60008060015460ff166002811115610e3457610e34611adb565b14610e515760405162461bcd60e51b81526004016103e290611d29565b604080516020808201835260008083523381526002909152919091205460019190841115610e9d5760009350600091506040518060600160405280603a8152602001612062603a913990505b33600090815260026020526040902054610eb7908561176d565b33600090815260026020526040808220929092556001600160a01b03871681522054610ee390856117bd565b6001600160a01b0386166000818152600260205260409081902092909255905185919033907fbb08d8a8573c2c59d953161900e309121dc16d571f20fdfdb6f343bc132bbca89061056b908690611950565b610f3e3361098f565b610f5a5760405162461bcd60e51b81526004016103e290611dd9565b6000805b600054811015610fba5760008181548110610f7b57610f7b611d9a565b60009182526020909120600490910201546001600160a01b0390811690861603610fa85760019150610fba565b610fb3816001611dc6565b9050610f5e565b81156110245760405162461bcd60e51b815260206004820152603360248201527f45736120646972656363696f6e2064652061646d696e6973747261646f7220796044820152720309032b9ba30903932b3b4b9ba3930b230971606d1b60648201526084016103e2565b604080516080810182526000818301526060808201526001600160a01b038716815260208101869052905160029061105d908690611f30565b602060405180830381855afa15801561107a573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061109d9190611f4c565b60408201526000805460018101825590805281517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563600490920291820180546001600160a01b0319166001600160a01b03909216919091178155602083015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564019061112b9082611e70565b506040820151600282015560608201518051611151916003840191602090910190611809565b505050505050505050565b6111653361098f565b6111815760405162461bcd60e51b81526004016103e290611dd9565b600061118c336105f5565b905060008112156111af5760405162461bcd60e51b81526004016103e290611dd9565b600080546111bf90600190611f65565b815481106111cf576111cf611d9a565b9060005260206000209060040201600082815481106111f0576111f0611d9a565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b0390921691909117815560018082019061123190840182611f78565b50600282015481600201556003820181600301908054611252929190611854565b5090505060008054806112675761126761204b565b60008281526020812060046000199093019283020180546001600160a01b0319168155906112986001830182611894565b60028201600090556003820160006112b091906118d1565b5050905550565b6112c03361098f565b6112dc5760405162461bcd60e51b81526004016103e290611dd9565b60018054819060ff19168180610912565b6112f63361098f565b6113125760405162461bcd60e51b81526004016103e290611dd9565b600180546002919060ff19168183610912565b61132e3361098f565b61134a5760405162461bcd60e51b81526004016103e290611dd9565b6003548110156113c25760405162461bcd60e51b815260206004820152603760248201527f4e6f2073652070756564656e20706f6e6572206d656e6f7320746f74616c206160448201527f706f727461646f2064656c20717565207469656e652e2000000000000000000060648201526084016103e2565b600355565b60008060015460ff1660028111156113e1576113e1611adb565b146113fe5760405162461bcd60e51b81526004016103e290611d29565b506001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b6114333361098f565b61144f5760405162461bcd60e51b81526004016103e290611dd9565b33600061145b826105f5565b9050600081121561147e5760405162461bcd60e51b81526004016103e290611dd9565b8451156114b857846000828154811061149957611499611d9a565b906000526020600020906004020160010190816114b69190611e70565b505b835115611538576002846040516114cf9190611f30565b602060405180830381855afa1580156114ec573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061150f9190611f4c565b6000828154811061152257611522611d9a565b9060005260206000209060040201600201819055505b6001600160a01b03831615610c52578260008281548110610c2357610c23611d9a565b60008060015460ff16600281111561157557611575611adb565b146115925760405162461bcd60e51b81526004016103e290611d29565b5060005490565b6115a23361098f565b6115be5760405162461bcd60e51b81526004016103e290611dd9565b6000546002106116365760405162461bcd60e51b815260206004820152603a60248201527f536f6c6f207365207065726d69746520626f7272617220736920686179206d6160448201527f7320646520646f732061646d696e6973747261646f7265732e2000000000000060648201526084016103e2565b6000611641826105f5565b905060008112156116645760405162461bcd60e51b81526004016103e290611dd9565b6000805461167490600190611f65565b8154811061168457611684611d9a565b9060005260206000209060040201600082815481106116a5576116a5611d9a565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b039092169190911781556001808201906116e690840182611f78565b50600282015481600201556003820181600301908054611707929190611854565b50905050600080548061171c5761171c61204b565b60008281526020812060046000199093019283020180546001600160a01b03191681559061174d6001830182611894565b600282016000905560038201600061176591906118d1565b505090555050565b6000828211156117ac5760405162461bcd60e51b815260206004820152600a60248201526921202862203c3d20612960b01b60448201526064016103e2565b6117b68284611f65565b9392505050565b6000806117ca8385611dc6565b9050838110156117b65760405162461bcd60e51b815260206004820152600a60248201526921202863203e3d20612960b01b60448201526064016103e2565b828054828255906000526020600020908101928215611844579160200282015b82811115611844578251825591602001919060010190611829565b506118509291506118eb565b5090565b8280548282559060005260206000209081019282156118445760005260206000209182015b82811115611844578254825591600101919060010190611879565b5080546118a090611d60565b6000825580601f106118b0575050565b601f0160209004906000526020600020908101906118ce91906118eb565b50565b50805460008255906000526020600020908101906118ce91905b5b8082111561185057600081556001016118ec565b60005b8381101561191b578181015183820152602001611903565b50506000910152565b6000815180845261193c816020860160208601611900565b601f01601f19169290920160200192915050565b6020815260006117b66020830184611924565b80356001600160a01b03811681146106a657600080fd5b6000806040838503121561198d57600080fd5b61199683611963565b946020939093013593505050565b6000602082840312156119b657600080fd5b6117b682611963565b6000806000606084860312156119d457600080fd5b6119dd84611963565b92506119eb60208501611963565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611a2257600080fd5b813567ffffffffffffffff80821115611a3d57611a3d6119fb565b604051601f8301601f19908116603f01168101908282118183101715611a6557611a656119fb565b81604052838152866020858801011115611a7e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215611ab057600080fd5b813567ffffffffffffffff811115611ac757600080fd5b611ad384828501611a11565b949350505050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611b1357634e487b7160e01b600052602160045260246000fd5b91905290565b60008060008060808587031215611b2f57600080fd5b611b3885611963565b9350602085013567ffffffffffffffff80821115611b5557600080fd5b611b6188838901611a11565b94506040870135915080821115611b7757600080fd5b50611b8487828801611a11565b925050611b9360608601611963565b905092959194509250565b600060208284031215611bb057600080fd5b813560ff811681146117b657600080fd5b600060208284031215611bd357600080fd5b5035919050565b6001600160a01b0384168152606060208201819052600090611bfe90830185611924565b9050826040830152949350505050565b600080600060608486031215611c2357600080fd5b611c2c84611963565b9250602084013567ffffffffffffffff80821115611c4957600080fd5b611c5587838801611a11565b93506040860135915080821115611c6b57600080fd5b50611c7886828701611a11565b9150509250925092565b60008060408385031215611c9557600080fd5b611c9e83611963565b9150611cac60208401611963565b90509250929050565b600080600060608486031215611cca57600080fd5b833567ffffffffffffffff80821115611ce257600080fd5b611cee87838801611a11565b94506020860135915080821115611d0457600080fd5b50611d1186828701611a11565b925050611d2060408501611963565b90509250925092565b6020808252601b908201527f456c20636f6e747261746f206e6f20657374612061637469766f2e0000000000604082015260600190565b600181811c90821680611d7457607f821691505b602082108103611d9457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156105b1576105b1611db0565b60208082526028908201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360408201526703a3930b237b917160c51b606082015260800190565b601f821115611e6b57600081815260208120601f850160051c81016020861015611e485750805b601f850160051c820191505b81811015611e6757828155600101611e54565b5050505b505050565b815167ffffffffffffffff811115611e8a57611e8a6119fb565b611e9e81611e988454611d60565b84611e21565b602080601f831160018114611ed35760008415611ebb5750858301515b600019600386901b1c1916600185901b178555611e67565b600085815260208120601f198616915b82811015611f0257888601518255948401946001909101908401611ee3565b5085821015611f205787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251611f42818460208701611900565b9190910192915050565b600060208284031215611f5e57600080fd5b5051919050565b818103818111156105b1576105b1611db0565b818103611f83575050565b611f8d8254611d60565b67ffffffffffffffff811115611fa557611fa56119fb565b611fb381611e988454611d60565b6000601f821160018114611fe75760008315611fcf5750848201545b600019600385901b1c1916600184901b178455610c52565b600085815260209020601f19841690600086815260209020845b838110156120215782860154825560019586019590910190602001612001565b5085831015611f205793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603160045260246000fdfe4e6f207469656e652062616c616e636520737566696369656e74652e204e6f20736572207265616c697a61206c61206f7065726163696f6e2e204c612063616e746964616420736f6c6963697461646120737570657261206c612063616e7469646164206d6178696d61207065726d69746964612e20a2646970667358221220769ac15ab8cd38480b5dfe183d26863f64c6bbb91815d23da34eb55ca3d3bff064736f6c634300081100334c6120646972656363696f6e206e6f20657320646520756e2061646d696e6973";

    public static final String FUNC_ACL_ARRAY = "acl_array";

    public static final String FUNC_ACTIVAR = "activar";

    public static final String FUNC_actualizar_administrador_usuario_clave_direccion = "actualizar_administrador_usuario_clave_direccion";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_borrar_administrador = "borrar_administrador";

    public static final String FUNC_CREAR_ADMINISTRADOR = "crear_administrador";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_ESTADO = "estado";

    public static final String FUNC_INACTIVAR = "inactivar";

    public static final String FUNC_LEER_ADMINISTRADOR_POS = "leer_administrador_pos";

    public static final String FUNC_LEER_ADMINISTRADORES_NUM = "leer_administradores_num";

    public static final String FUNC_LIMITAR = "limitar";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_PONER_DECIMALES = "poner_decimales";

    public static final String FUNC_PONER_NOMBRE = "poner_nombre";

    public static final String FUNC_PONER_SIMBOLO = "poner_simbolo";

    public static final String FUNC_PONER_TOTAL_APORTADO = "poner_total_aportado";

    public static final String FUNC_REGALAR = "regalar";

    public static final String FUNC_SER_ADMINISTRADOR = "ser_administrador";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final Event AD_AD_U_EVENT = new Event("Ad_ad_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event MENSAJE_EVENT = new Event("Mensaje", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event OK_EVENT = new Event("Ok", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected Kalorias(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Kalorias(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Kalorias(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Kalorias(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<Ad_ad_uEventResponse> getAd_ad_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_AD_U_EVENT, transactionReceipt);
        ArrayList<Ad_ad_uEventResponse> responses = new ArrayList<Ad_ad_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_ad_uEventResponse getAd_ad_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_AD_U_EVENT, log);
        Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_ad_uEventFromLog(log));
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_AD_U_EVENT));
        return ad_ad_uEventFlowable(filter);
    }

    public static List<MensajeEventResponse> getMensajeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MENSAJE_EVENT, transactionReceipt);
        ArrayList<MensajeEventResponse> responses = new ArrayList<MensajeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MensajeEventResponse typedResponse = new MensajeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MensajeEventResponse getMensajeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MENSAJE_EVENT, log);
        MensajeEventResponse typedResponse = new MensajeEventResponse();
        typedResponse.log = log;
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMensajeEventFromLog(log));
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MENSAJE_EVENT));
        return mensajeEventFlowable(filter);
    }

    public static List<OkEventResponse> getOkEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OK_EVENT, transactionReceipt);
        ArrayList<OkEventResponse> responses = new ArrayList<OkEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OkEventResponse typedResponse = new OkEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OkEventResponse getOkEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OK_EVENT, log);
        OkEventResponse typedResponse = new OkEventResponse();
        typedResponse.log = log;
        typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<OkEventResponse> okEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOkEventFromLog(log));
    }

    public Flowable<OkEventResponse> okEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OK_EVENT));
        return okEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple3<String, String, byte[]>> acl_array(BigInteger param0) {
        final Function function = new Function(FUNC_ACL_ARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteFunctionCall<Tuple3<String, String, byte[]>>(function,
                new Callable<Tuple3<String, String, byte[]>>() {
                    @Override
                    public Tuple3<String, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> activar() {
        final Function function = new Function(
                FUNC_ACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String direccion, String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> allowance(String propietario, String gastador) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, propietario), 
                new org.web3j.abi.datatypes.Address(160, gastador)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String gastador_direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, gastador_direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String propietario) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, propietario)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador() {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador(String direccion) {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crear_administrador(String direccion, String usuario, byte[] clave) {
        final Function function = new Function(
                FUNC_CREAR_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> estado() {
        final Function function = new Function(FUNC_ESTADO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> inactivar() {
        final Function function = new Function(
                FUNC_INACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> leer_administrador_pos(String direccion) {
        final Function function = new Function(FUNC_LEER_ADMINISTRADOR_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_administradores_num() {
        final Function function = new Function(FUNC_LEER_ADMINISTRADORES_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> limitar() {
        final Function function = new Function(
                FUNC_LIMITAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_decimales(BigInteger nuevos_decimales_num) {
        final Function function = new Function(
                FUNC_PONER_DECIMALES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(nuevos_decimales_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_nombre(String nuevo_nombre) {
        final Function function = new Function(
                FUNC_PONER_NOMBRE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(nuevo_nombre)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_simbolo(String nuevo_simbolo) {
        final Function function = new Function(
                FUNC_PONER_SIMBOLO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(nuevo_simbolo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_total_aportado(BigInteger nuevo_total_aportado_num) {
        final Function function = new Function(
                FUNC_PONER_TOTAL_APORTADO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(nuevo_total_aportado_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> regalar(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_REGALAR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> ser_administrador(String direccion) {
        final Function function = new Function(FUNC_SER_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String destinatario, BigInteger valor) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, destinatario), 
                new org.web3j.abi.datatypes.generated.Uint256(valor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String origen, String destinatario, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, origen), 
                new org.web3j.abi.datatypes.Address(160, destinatario), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Kalorias load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Kalorias load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Kalorias load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Kalorias(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Kalorias load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Kalorias(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Kalorias> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Kalorias.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Kalorias> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Kalorias.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Kalorias> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Kalorias.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Kalorias> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Kalorias.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Ad_ad_uEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;

        public String mensaje;
    }

    public static class MensajeEventResponse extends BaseEventResponse {
        public String mensaje;
    }

    public static class OkEventResponse extends BaseEventResponse {
        public Boolean es;

        public String mensaje;
    }
}
