package innui.web3j.generated.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.8.
 */
@SuppressWarnings("rawtypes")
public class Kalorias_faucets extends Contract {
    public static final String BINARY = "60806040526001805460ff1916811790553480156200001c575f80fd5b506040516200465b3803806200465b8339810160408190526200003f91620005c4565b5f805160206200463b8339815191526040516200008d9060208082526018908201527f6d696e696261736573202d3e20636f6e7374727563746f720000000000000000604082015260600190565b60405180910390a160408051608081018252606060208083018281525f84860152828401929092523383528351808501855260048152631c9bdbdd60e21b918101919091529052905169726f6f745f636c61766560b01b8152600290600a01602060405180830381855afa15801562000108573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906200012d919062000601565b6040828101919091528051600180825281830190925290602080830190803683375050506060820181905280516d7065726d69736f5f6d6178696d6f60901b91905f906200017f576200017f6200062d565b6020908102919091018101919091525f8054600181018255908052825160049091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039093166001600160a01b03199093169290921782559183015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5640190620002189082620006cd565b506040820151600282015560608201518051620002409160038401916020909101906200053a565b505050505f805160206200463b8339815191526040516200029f9060208082526024908201527f6572633230735f6578747261735f66617563657473202d3e20636f6e7374727560408201526331ba37b960e11b606082015260800190565b60405180910390a1604051620002b59062000588565b604051809103905ff080158015620002cf573d5f803e3d5ffd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055604051620002fe9062000588565b604051809103905ff08015801562000318573d5f803e3d5ffd5b50600780546001600160a01b03929092166001600160a01b0319909216919091179055426009556103e86006556040515f805160206200463b8339815191529062000394906020808252601f908201527f6b616c6f726961735f66617563657473202d3e20636f6e7374727563746f7200604082015260600190565b60405180910390a1620003a66200040e565b60018054610100600160a81b0319166101006001600160a01b038581169190910291909117909155600880546001600160a01b0319169183169190911790556103e8600655633663a52060028190556200040290600562000487565b600555506200080d9050565b6200041933620004cd565b6200047b5760405162461bcd60e51b815260206004820152602860248201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360448201526703a3930b237b917160c51b606482015260840160405180910390fd5b6001805460ff19169055565b5f825f036200049857505f620004c7565b5f620004a58385620007a9565b905082620004b48583620007c3565b14620004c457620004c4620007e3565b90505b92915050565b5f80805b5f5481101562000533575f8181548110620004f057620004f06200062d565b5f9182526020909120600490910201546001600160a01b03908116908516036200051e576001915062000533565b6200052b816001620007f7565b9050620004d1565b5092915050565b828054828255905f5260205f2090810192821562000576579160200282015b828111156200057657825182559160200191906001019062000559565b506200058492915062000596565b5090565b6108e88062003d5383390190565b5b8082111562000584575f815560010162000597565b6001600160a01b0381168114620005c1575f80fd5b50565b5f8060408385031215620005d6575f80fd5b8251620005e381620005ac565b6020840151909250620005f681620005ac565b809150509250929050565b5f6020828403121562000612575f80fd5b5051919050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b600181811c908216806200065657607f821691505b6020821081036200067557634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115620006c8575f81815260208120601f850160051c81016020861015620006a35750805b601f850160051c820191505b81811015620006c457828155600101620006af565b5050505b505050565b81516001600160401b03811115620006e957620006e962000619565b6200070181620006fa845462000641565b846200067b565b602080601f83116001811462000737575f84156200071f5750858301515b5f19600386901b1c1916600185901b178555620006c4565b5f85815260208120601f198616915b82811015620007675788860151825594840194600190910190840162000746565b50858210156200078557878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417620004c757620004c762000795565b5f82620007de57634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52600160045260245ffd5b80820180821115620004c757620004c762000795565b613538806200081b5f395ff3fe608060405234801561000f575f80fd5b506004361061026b575f3560e01c806364915f801161014b578063a9a4079c116100bf578063e2ea116f11610084578063e2ea116f14610504578063e3dbc94414610517578063e6828e1b1461052a578063ed7bddc31461053d578063f5a5713614610545578063f9d06c4d1461054d575f80fd5b8063a9a4079c146104d1578063b2be353c146104e4578063b776a7a2146104ec578063b9a456e1146104f4578063c49c3d05146104fc575f80fd5b80637f04dcc9116101105780637f04dcc9146104505780637ffcbe50146104635780638e3ee7ba1461047657806391c6a5811461049857806397aefa5b146104ab57806397e865c4146104be575f80fd5b806364915f8014610400578063688e3467146104085780636a0fdd491461042257806378a2252b146104355780637b318b6e1461043d575f80fd5b80633470e932116101e25780634cb64acf116101a75780634cb64acf1461039d5780634dc46437146103b0578063531a3352146103d357806353a913b0146103dc5780635e979800146103e55780636354a8ef146103f8575f80fd5b80633470e93214610343578063367b943c1461035b57806337cd86f81461036e57806342134c49146103815780634c3539c614610394575f80fd5b806318cf46111161023357806318cf4611146102e657806319e012b0146102f95780631d032d011461030257806324b5b093146103155780632dd47cac1461032857806333aadfcd14610330575f80fd5b80630de62ad61461026f5780631320ec511461028457806313893106146102b457806314314188146102bc578063171d602f146102cf575b5f80fd5b61028261027d366004612d9f565b610560565b005b600854610297906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6102826105ab565b6102826102ca366004612dca565b6105d6565b6102d860095481565b6040519081526020016102ab565b6102976102f4366004612d9f565b610660565b6102d860035481565b6102d8610310366004612dca565b6106f8565b610282610323366004612d9f565b6107a3565b6102826107e2565b61028261033e366004612de5565b61081c565b6001546102979061010090046001600160a01b031681565b610282610369366004612d9f565b61084f565b61028261037c366004612dca565b61088e565b6102d861038f366004612dca565b6108d5565b6102d860055481565b6102826103ab366004612d9f565b61096a565b6103c36103be366004612dca565b610a05565b60405190151581526020016102ab565b6102d860065481565b6102d860025481565b6102826103f3366004612de5565b610a69565b6102d8610a98565b6102d8610ad5565b6001546104159060ff1681565b6040516102ab9190612e23565b610282610430366004612d9f565b610b7b565b6102d8610bba565b61028261044b366004612ee6565b610c21565b61029761045e366004612d9f565b610df1565b610282610471366004612dca565b610e48565b610489610484366004612d9f565b610e95565b6040516102ab93929190612f8c565b6102826104a6366004612d9f565b610f58565b6102d86104b9366004612dca565b610f82565b6102826104cc366004612de5565b610fda565b6102826104df366004612fd5565b611009565b610282611228565b610282611377565b6102d86113ad565b610282611418565b610282610512366004612d9f565b611450565b610282610525366004613046565b61147a565b610282610538366004612de5565b6115a0565b6102d86115cf565b6102d8611645565b61028261055b366004612dca565b611681565b5f60015460ff16600281111561057857610578612e0f565b1461059e5760405162461bcd60e51b8152600401610595906130b9565b60405180910390fd5b6105a83382611848565b50565b6105b433610a05565b6105d05760405162461bcd60e51b8152600401610595906130f0565b42600955565b6105df33610a05565b6105fb5760405162461bcd60e51b8152600401610595906130f0565b6004805460405163406a58fd60e11b81526001600160a01b03848116938201939093525f60248201529116906380d4b1fa906044015f604051808303815f87803b158015610647575f80fd5b505af1158015610659573d5f803e3d5ffd5b5050505050565b5f61066a33610a05565b6106865760405162461bcd60e51b8152600401610595906130f0565b60048054604051633e62601d60e01b81529182018490526001600160a01b031690633e62601d906024015b602060405180830381865afa1580156106cc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106f09190613138565b90505b919050565b5f8060015460ff16600281111561071157610711612e0f565b1461072e5760405162461bcd60e51b8152600401610595906130b9565b5f805b5f5481101561078a575f818154811061074c5761074c613153565b5f9182526020909120600490910201546001600160a01b0390811690851603610778576001915061078a565b61078381600161317b565b9050610731565b81156107995791506106f39050565b505f199392505050565b5f60015460ff1660028111156107bb576107bb612e0f565b146107d85760405162461bcd60e51b8152600401610595906130b9565b6105a83382611d28565b6107eb33610a05565b6108075760405162461bcd60e51b8152600401610595906130f0565b600180545f919060ff191681835b0217905550565b61082533610a05565b6108415760405162461bcd60e51b8152600401610595906130f0565b61084b828261229a565b5050565b5f60015460ff16600281111561086757610867612e0f565b146108845760405162461bcd60e51b8152600401610595906130b9565b6105a833826127d6565b61089733610a05565b6108b35760405162461bcd60e51b8152600401610595906130f0565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b5f6108df33610a05565b6108fb5760405162461bcd60e51b8152600401610595906130f0565b60048054604051632c2b369760e21b81526001600160a01b038581169382019390935291169063b0acda5c906024015b602060405180830381865afa158015610946573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106f0919061318e565b61097333610a05565b61098f5760405162461bcd60e51b8152600401610595906130f0565b612710811115610a005760405162461bcd60e51b815260206004820152603660248201527f4c6f732050756e746f7320706f7263656e7475616c657320646562656e2073656044820152750391034b73332b934b7b932b9903090189818181817160551b6064820152608401610595565b600655565b5f80805b5f54811015610a62575f8181548110610a2457610a24613153565b5f9182526020909120600490910201546001600160a01b0390811690851603610a505760019150610a62565b610a5b81600161317b565b9050610a09565b5092915050565b610a7233610a05565b610a8e5760405162461bcd60e51b8152600401610595906130f0565b61084b8282611d28565b5f8060015460ff166002811115610ab157610ab1612e0f565b14610ace5760405162461bcd60e51b8152600401610595906130b9565b5060065490565b5f8060015460ff166002811115610aee57610aee612e0f565b14610b0b5760405162461bcd60e51b8152600401610595906130b9565b600754604051632c2b369760e21b81523360048201526001600160a01b039091169063b0acda5c906024015b602060405180830381865afa158015610b52573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b76919061318e565b905090565b5f60015460ff166002811115610b9357610b93612e0f565b14610bb05760405162461bcd60e51b8152600401610595906130b9565b6105a8338261229a565b5f8060015460ff166002811115610bd357610bd3612e0f565b14610bf05760405162461bcd60e51b8152600401610595906130b9565b60048054604051632c2b369760e21b815233928101929092526001600160a01b03169063b0acda5c90602401610b37565b610c2a33610a05565b610c465760405162461bcd60e51b8152600401610595906130f0565b5f54600210610cbd5760405162461bcd60e51b815260206004820152603e60248201527f536f6c6f207365207065726d6974652061637475616c697a617220736920686160448201527f79206d617320646520646f732061646d696e6973747261646f7265732e2000006064820152608401610595565b5f610cc7856106f8565b90505f811215610ce95760405162461bcd60e51b8152600401610595906130f0565b835115610d2057835f8281548110610d0357610d03613153565b905f5260205f2090600402016001019081610d1e9190613227565b505b825115610d9b57600283604051610d3791906132e3565b602060405180830381855afa158015610d52573d5f803e3d5ffd5b5050506040513d601f19601f82011682018060405250810190610d75919061318e565b5f8281548110610d8757610d87613153565b905f5260205f209060040201600201819055505b6001600160a01b0382161561065957815f8281548110610dbd57610dbd613153565b5f918252602090912060049091020180546001600160a01b0319166001600160a01b03929092169190911790555050505050565b5f610dfb33610a05565b610e175760405162461bcd60e51b8152600401610595906130f0565b600754604051633e62601d60e01b8152600481018490526001600160a01b0390911690633e62601d906024016106b1565b610e5133610a05565b610e6d5760405162461bcd60e51b8152600401610595906130f0565b600180546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b5f8181548110610ea3575f80fd5b5f918252602090912060049091020180546001820180546001600160a01b03909216935090610ed1906131a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610efd906131a5565b8015610f485780601f10610f1f57610100808354040283529160200191610f48565b820191905f5260205f20905b815481529060010190602001808311610f2b57829003601f168201915b5050505050908060020154905083565b610f6133610a05565b610f7d5760405162461bcd60e51b8152600401610595906130f0565b600255565b5f610f8c33610a05565b610fa85760405162461bcd60e51b8152600401610595906130f0565b600754604051632c2b369760e21b81526001600160a01b0384811660048301529091169063b0acda5c9060240161092b565b610fe333610a05565b610fff5760405162461bcd60e51b8152600401610595906130f0565b61084b82826127d6565b61101233610a05565b61102e5760405162461bcd60e51b8152600401610595906130f0565b5f805b5f5481101561108a575f818154811061104c5761104c613153565b5f9182526020909120600490910201546001600160a01b0390811690861603611078576001915061108a565b61108381600161317b565b9050611031565b81156110f45760405162461bcd60e51b815260206004820152603360248201527f45736120646972656363696f6e2064652061646d696e6973747261646f7220796044820152720309032b9ba30903932b3b4b9ba3930b230971606d1b6064820152608401610595565b604080516080810182525f818301526060808201526001600160a01b038716815260208101869052905160029061112c9086906132e3565b602060405180830381855afa158015611147573d5f803e3d5ffd5b5050506040513d601f19601f8201168201806040525081019061116a919061318e565b60408201525f805460018101825590805281517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563600490920291820180546001600160a01b0319166001600160a01b03909216919091178155602083015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401906111f79082613227565b50604082015160028201556060820151805161121d916003840191602090910190612cb8565b505050505050505050565b61123133610a05565b61124d5760405162461bcd60e51b8152600401610595906130f0565b5f611257336106f8565b90505f8112156112795760405162461bcd60e51b8152600401610595906130f0565b5f8054611288906001906132fe565b8154811061129857611298613153565b905f5260205f2090600402015f82815481106112b6576112b6613153565b5f9182526020909120825460049092020180546001600160a01b0319166001600160a01b039092169190911781556001808201906112f690840182613311565b50600282015481600201556003820181600301908054611317929190612d01565b509050505f80548061132b5761132b6133de565b5f8281526020812060045f199093019283020180546001600160a01b03191681559061135a6001830182612d3d565b600282015f9055600382015f6113709190612d74565b5050905550565b61138033610a05565b61139c5760405162461bcd60e51b8152600401610595906130f0565b60018054819060ff19168180610815565b5f6113b733610a05565b6113d35760405162461bcd60e51b8152600401610595906130f0565b6004805460408051630c963c7d60e31b815290516001600160a01b03909216926364b1e3e89282820192602092908290030181865afa158015610b52573d5f803e3d5ffd5b61142133610a05565b61143d5760405162461bcd60e51b8152600401610595906130f0565b600180546002919060ff19168183610815565b61145933610a05565b6114755760405162461bcd60e51b8152600401610595906130f0565b600555565b61148333610a05565b61149f5760405162461bcd60e51b8152600401610595906130f0565b335f6114aa826106f8565b90505f8112156114cc5760405162461bcd60e51b8152600401610595906130f0565b84511561150357845f82815481106114e6576114e6613153565b905f5260205f20906004020160010190816115019190613227565b505b83511561157e5760028460405161151a91906132e3565b602060405180830381855afa158015611535573d5f803e3d5ffd5b5050506040513d601f19601f82011682018060405250810190611558919061318e565b5f828154811061156a5761156a613153565b905f5260205f209060040201600201819055505b6001600160a01b0383161561065957825f8281548110610dbd57610dbd613153565b6115a933610a05565b6115c55760405162461bcd60e51b8152600401610595906130f0565b61084b8282611848565b5f6115d933610a05565b6115f55760405162461bcd60e51b8152600401610595906130f0565b60075f9054906101000a90046001600160a01b03166001600160a01b03166364b1e3e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b52573d5f803e3d5ffd5b5f8060015460ff16600281111561165e5761165e612e0f565b1461167b5760405162461bcd60e51b8152600401610595906130b9565b505f5490565b61168a33610a05565b6116a65760405162461bcd60e51b8152600401610595906130f0565b5f5460021061171d5760405162461bcd60e51b815260206004820152603a60248201527f536f6c6f207365207065726d69746520626f7272617220736920686179206d6160448201527f7320646520646f732061646d696e6973747261646f7265732e200000000000006064820152608401610595565b5f611727826106f8565b90505f8112156117495760405162461bcd60e51b8152600401610595906130f0565b5f8054611758906001906132fe565b8154811061176857611768613153565b905f5260205f2090600402015f828154811061178657611786613153565b5f9182526020909120825460049092020180546001600160a01b0319166001600160a01b039092169190911781556001808201906117c690840182613311565b506002820154816002015560038201816003019080546117e7929190612d01565b509050505f8054806117fb576117fb6133de565b5f8281526020812060045f199093019283020180546001600160a01b03191681559061182a6001830182612d3d565b600282015f9055600382015f6118409190612d74565b505090555050565b6009545f9061185b906301e13380612966565b90508042111561186d5761186d6129ba565b60048054604051632c2b369760e21b81526001600160a01b03868116938201939093525f929091169063b0acda5c90602401602060405180830381865afa1580156118ba573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118de919061318e565b905060025481106119575760405162461bcd60e51b815260206004820152603860248201527f5961206120616c63616e7a61646f20656c206d6178696d6f20706f7369626c6560448201527f2064652063616e746964616420646520726567616c6f2e2000000000000000006064820152608401610595565b60085460405163ec72a5db60e01b81526001600160a01b0386811660048301529091169063ec72a5db90602401602060405180830381865afa15801561199f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119c391906133f2565b6119df5760405162461bcd60e51b815260040161059590613411565b60025483905f906119f08484612966565b1115611a0657600254611a039084612b8e565b91505b60035415611c0c576001546040516370a0823160e01b81523060048201525f9161010090046001600160a01b0316906370a0823190602401602060405180830381865afa158015611a59573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a7d919061318e565b90508015611c0657600354811115611a9457506003545b82811015611aac57611aa68382612b8e565b91508092505b60015460405163a9059cbb60e01b81526001600160a01b038981166004830152602482018690526101009092049091169063a9059cbb906044016020604051808303815f875af1158015611b02573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b2691906133f2565b5060048054604051632c2b369760e21b81526001600160a01b038a8116938201939093529116906388c116e9908990611bac908790859063b0acda5c906024015b602060405180830381865afa158015611b82573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ba6919061318e565b90612966565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044015f604051808303815f87803b158015611bef575f80fd5b505af1158015611c01573d5f803e3d5ffd5b505050505b50611c0f565b50805b8015611d205760015460405163d27beddf60e01b81526001600160a01b038881166004830152602482018490525f60448301526101009092049091169063d27beddf906064015f604051808303815f87803b158015611c6c575f80fd5b505af1158015611c7e573d5f803e3d5ffd5b505060048054604051632c2b369760e21b81526001600160a01b038b811693820193909352911692506388c116e991508890611cc6908590859063b0acda5c90602401611b67565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044015f604051808303815f87803b158015611d09575f80fd5b505af1158015611d1b573d5f803e3d5ffd5b505050505b505050505050565b600154604051636eb1769f60e11b81526001600160a01b0384811660048301523060248301525f926101009004169063dd62ed3e90604401602060405180830381865afa158015611d7b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d9f919061318e565b90505f8111611e245760405162461bcd60e51b8152602060048201526044602482018190527f4e6f20686179207065726d69736f206461646f2061206e696e67756e61206361908201527f6e74696461642070617261206465766f6c7563696f6e20646520707265737461606482015263036b797160e51b608482015260a401610595565b81811015611e30578091505b600754604051632c2b369760e21b81526001600160a01b0385811660048301528492169063b0acda5c90602401602060405180830381865afa158015611e78573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e9c919061318e565b1015611f1157600754604051632c2b369760e21b81526001600160a01b0385811660048301529091169063b0acda5c90602401602060405180830381865afa158015611eea573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f0e919061318e565b91505b600754604051632c2b369760e21b81526001600160a01b0385811660048301527f8148c2cfd4793ea5d7bd19d3943e0b39250248b0816399ead7f74f5eb46906c492169063b0acda5c90602401602060405180830381865afa158015611f79573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f9d919061318e565b604051611fe491906040808252601b908201527f43616e746964616420656e6465756461646120696e696369616c2000000000006060820152602081019190915260800190565b60405180910390a1604080518181526021818301527f43616e74696461642066696e616c207175652076612061206465766f6c7665726060820152600160fd1b60808201526020810184905290517f8148c2cfd4793ea5d7bd19d3943e0b39250248b0816399ead7f74f5eb46906c49181900360a00190a16001546040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201859052610100909204909116906323b872dd906064016020604051808303815f875af11580156120b8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120dc91906133f2565b50600754604051632c2b369760e21b81526001600160a01b038581166004830152909116906380d4b1fa90859061215f908690859063b0acda5c90602401602060405180830381865afa158015612135573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612159919061318e565b90612b8e565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044015f604051808303815f87803b1580156121a2575f80fd5b505af11580156121b4573d5f803e3d5ffd5b5050600754604051632c2b369760e21b81526001600160a01b0387811660048301527f8148c2cfd4793ea5d7bd19d3943e0b39250248b0816399ead7f74f5eb46906c49450909116915063b0acda5c90602401602060405180830381865afa158015612222573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612246919061318e565b60405161228d919060408082526019908201527f43616e746964616420656e646575646164612066696e616c20000000000000006060820152602081019190915260800190565b60405180910390a1505050565b5f60015460ff1660028111156122b2576122b2612e0f565b146122cf5760405162461bcd60e51b8152600401610595906130b9565b6009545f906122e2906301e13380612966565b9050804211156122f4576122f46129ba565b600754604051632c2b369760e21b81526001600160a01b0385811660048301525f92169063b0acda5c90602401602060405180830381865afa15801561233c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612360919061318e565b905060055481106123d95760405162461bcd60e51b815260206004820152603a60248201527f5961206120616c63616e7a61646f20656c206d6178696d6f20706f7369626c6560448201527f2064652063616e746964616420656e207072657374616d6f2e200000000000006064820152608401610595565b60085460405163ec72a5db60e01b81526001600160a01b0386811660048301529091169063ec72a5db90602401602060405180830381865afa158015612421573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061244591906133f2565b6124615760405162461bcd60e51b815260040161059590613411565b60055483906124708383612966565b1115612486576005546124839083612b8e565b90505b6001546040516370a0823160e01b81523060048201525f9161010090046001600160a01b0316906370a0823190602401602060405180830381865afa1580156124d1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124f5919061318e565b90505f805f8061251060065487612bd690919063ffffffff16565b915061251e82612710612c0a565b915061252a8683612b8e565b9050841561266a578085101561255d576125448686612b8e565b93506125508186612b8e565b925084955084905061257d565b85851015612579575f93506125728686612b8e565b915061257d565b5f91505b60015460405163a9059cbb60e01b81526001600160a01b038c81166004830152602482018490526101009092049091169063a9059cbb906044016020604051808303815f875af11580156125d3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125f791906133f2565b506126028787612966565b6007546040516388c116e960e01b81526001600160a01b038d81166004830152602482018490529299509116906388c116e9906044015f604051808303815f87803b15801561264f575f80fd5b505af1158015612661573d5f803e3d5ffd5b50505050612671565b8593508092505b81156126e15760015460405163d27beddf60e01b8152306004820152602481018490525f60448201526101009091046001600160a01b03169063d27beddf906064015f604051808303815f87803b1580156126ca575f80fd5b505af11580156126dc573d5f803e3d5ffd5b505050505b8315611d1b5760015460405163d27beddf60e01b81526001600160a01b038c81166004830152602482018690525f60448301526101009092049091169063d27beddf906064015f604051808303815f87803b15801561273e575f80fd5b505af1158015612750573d5f803e3d5ffd5b50505050612767848861296690919063ffffffff16565b6007546040516388c116e960e01b81526001600160a01b038d81166004830152602482018490529299509116906388c116e9906044015f604051808303815f87803b1580156127b4575f80fd5b505af11580156127c6573d5f803e3d5ffd5b5050505050505050505050505050565b600154604051636eb1769f60e11b81526001600160a01b0384811660048301523060248301525f926101009004169063dd62ed3e90604401602060405180830381865afa158015612829573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061284d919061318e565b90505f81116128c45760405162461bcd60e51b815260206004820152603f60248201527f4e6f20686179207065726d69736f206461646f2061206e696e67756e6120636160448201527f6e7469646164207061726120706f6e6572207061726120726567616c6f2e20006064820152608401610595565b818110156128d0578091505b6001546040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201859052610100909204909116906323b872dd906064016020604051808303815f875af115801561292c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061295091906133f2565b5060035461295e9083612966565b600355505050565b5f80612972838561317b565b9050838110156129b15760405162461bcd60e51b815260206004820152600a60248201526921202863203e3d20612960b01b6044820152606401610595565b90505b92915050565b5f60045f9054906101000a90046001600160a01b03166001600160a01b03166364b1e3e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a0b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a2f919061318e565b90505f5b612a3e60018361347e565b91505f821261084b5760048054604051633e62601d60e01b81529182018490526001600160a01b031690633e62601d90602401602060405180830381865afa158015612a8c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612ab09190613138565b600754604051632c2b369760e21b81526001600160a01b0380841660048301529293505f929091169063b0acda5c90602401602060405180830381865afa158015612afd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b21919061318e565b11612b89576004805460405163406a58fd60e11b81526001600160a01b03848116938201939093525f60248201529116906380d4b1fa906044015f604051808303815f87803b158015612b72575f80fd5b505af1158015612b84573d5f803e3d5ffd5b505050505b612a33565b5f82821115612bcc5760405162461bcd60e51b815260206004820152600a60248201526921202862203c3d20612960b01b6044820152606401610595565b6129b182846132fe565b5f825f03612be557505f6129b4565b5f612bf0838561349d565b905082612bfd85836134c8565b146129b1576129b16134db565b5f808211612c465760405162461bcd60e51b815260206004820152600960248201526821202862203e20302960b81b6044820152606401610595565b5f612c5183856134c8565b9050612c5d83856134ef565b612c67828561349d565b612c71919061317b565b84146129b15760405162461bcd60e51b815260206004820152601660248201527521202861203d3d2062202a2063202b2061202520622960501b6044820152606401610595565b828054828255905f5260205f20908101928215612cf1579160200282015b82811115612cf1578251825591602001919060010190612cd6565b50612cfd929150612d8b565b5090565b828054828255905f5260205f20908101928215612cf1575f5260205f209182015b82811115612cf1578254825591600101919060010190612d22565b508054612d49906131a5565b5f825580601f10612d58575050565b601f0160209004905f5260205f20908101906105a89190612d8b565b5080545f8255905f5260205f20908101906105a891905b5b80821115612cfd575f8155600101612d8c565b5f60208284031215612daf575f80fd5b5035919050565b6001600160a01b03811681146105a8575f80fd5b5f60208284031215612dda575f80fd5b81356129b181612db6565b5f8060408385031215612df6575f80fd5b8235612e0181612db6565b946020939093013593505050565b634e487b7160e01b5f52602160045260245ffd5b6020810160038310612e4357634e487b7160e01b5f52602160045260245ffd5b91905290565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112612e6c575f80fd5b813567ffffffffffffffff80821115612e8757612e87612e49565b604051601f8301601f19908116603f01168101908282118183101715612eaf57612eaf612e49565b81604052838152866020858801011115612ec7575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f805f8060808587031215612ef9575f80fd5b8435612f0481612db6565b9350602085013567ffffffffffffffff80821115612f20575f80fd5b612f2c88838901612e5d565b94506040870135915080821115612f41575f80fd5b50612f4e87828801612e5d565b9250506060850135612f5f81612db6565b939692955090935050565b5f5b83811015612f84578181015183820152602001612f6c565b50505f910152565b60018060a01b0384168152606060208201525f8351806060840152612fb8816080850160208801612f6a565b604083019390935250601f91909101601f19160160800192915050565b5f805f60608486031215612fe7575f80fd5b8335612ff281612db6565b9250602084013567ffffffffffffffff8082111561300e575f80fd5b61301a87838801612e5d565b9350604086013591508082111561302f575f80fd5b5061303c86828701612e5d565b9150509250925092565b5f805f60608486031215613058575f80fd5b833567ffffffffffffffff8082111561306f575f80fd5b61307b87838801612e5d565b94506020860135915080821115613090575f80fd5b5061309d86828701612e5d565b92505060408401356130ae81612db6565b809150509250925092565b6020808252601b908201527f456c20636f6e747261746f206e6f20657374612061637469766f2e0000000000604082015260600190565b60208082526028908201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360408201526703a3930b237b917160c51b606082015260800190565b5f60208284031215613148575f80fd5b81516129b181612db6565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b808201808211156129b4576129b4613167565b5f6020828403121561319e575f80fd5b5051919050565b600181811c908216806131b957607f821691505b6020821081036131d757634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115613222575f81815260208120601f850160051c810160208610156132035750805b601f850160051c820191505b81811015611d205782815560010161320f565b505050565b815167ffffffffffffffff81111561324157613241612e49565b6132558161324f84546131a5565b846131dd565b602080601f831160018114613288575f84156132715750858301515b5f19600386901b1c1916600185901b178555611d20565b5f85815260208120601f198616915b828110156132b657888601518255948401946001909101908401613297565b50858210156132d357878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f82516132f4818460208701612f6a565b9190910192915050565b818103818111156129b4576129b4613167565b81810361331c575050565b61332682546131a5565b67ffffffffffffffff81111561333e5761333e612e49565b61334c8161324f84546131a5565b5f601f82116001811461337d575f83156133665750848201545b5f19600385901b1c1916600184901b178455610659565b5f85815260209020601f198416905f86815260209020845b838110156133b55782860154825560019586019590910190602001613395565b50858310156132d3579301545f1960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b5f52603160045260245ffd5b5f60208284031215613402575f80fd5b815180151581146129b1575f80fd5b60208082526047908201527f4e6f206861207265676973747261646f20656c20656d61696c20656e20656c2060408201527f736572766963696f2044454d2028446972656363696f6e657320456d61696c20606082015266026b0b8309497160cd1b608082015260a00190565b8181035f831280158383131683831282161715610a6257610a62613167565b80820281158282048414176129b4576129b4613167565b634e487b7160e01b5f52601260045260245ffd5b5f826134d6576134d66134b4565b500490565b634e487b7160e01b5f52600160045260245ffd5b5f826134fd576134fd6134b4565b50069056fea264697066735822122034eedb8bcd89886659dcaa891062b23c1e2f0123736b4382ffdd8e13ad3183bc64736f6c63430008140033608060405234801561000f575f80fd5b507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e1500916760405161006f906020808252601e908201527f6172696d617061735f61645f756973202d3e20636f6e7374727563746f720000604082015260600190565b60405180910390a1610864806100845f395ff3fe608060405234801561000f575f80fd5b5060043610610106575f3560e01c806374afc8d71161009e5780638cee87781161006e5780638cee8778146101fa578063b0acda5c1461020d578063b38f9adf14610235578063c118796914610249578063feb4377f14610268575f80fd5b806374afc8d7146101ae57806380d4b1fa146101c157806387e4c821146101d457806388c116e9146101e7575f80fd5b806347b68a5d116100d957806347b68a5d1461016a5780635b895d7b1461018257806364b1e3e814610195578063715a0ae9146101a6575f80fd5b80632b59d1fc1461010a57806330a113711461011457806338d94193146101275780633e62601d14610157575b5f80fd5b61011261027b565b005b610112610122366004610747565b610286565b61013a61013536600461076f565b610337565b6040516001600160a01b0390911681526020015b60405180910390f35b61013a61016536600461076f565b61035e565b6101726103db565b604051901515815260200161014e565b61011261019036600461076f565b6103ea565b5f545b60405190815260200161014e565b6101126103f7565b6101726101bc366004610786565b610482565b6101126101cf366004610747565b6104ea565b6101126101e2366004610786565b610541565b6101126101f5366004610747565b61064a565b61011261020836600461076f565b61066a565b61019861021b366004610786565b6001600160a01b03165f9081526001602052604090205490565b335f90815260016020526040902054610198565b610198610257366004610786565b60016020525f908152604090205481565b61011261027636600461076f565b610674565b61028433610541565b565b61028f82610482565b156102d95760405162461bcd60e51b815260206004820152601560248201527402cb09032bc34b9ba329032b9b2903b30b637b9171605d1b60448201526064015b60405180910390fd5b6001600160a01b039091165f8181526001602081905260408220939093558054928301815580527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b0319169091179055565b5f8181548110610345575f80fd5b5f918252602090912001546001600160a01b0316905081565b5f805482106103af5760405162461bcd60e51b815260206004820152601960248201527f506f736963696f6e2066756572612064652072616e676f2e200000000000000060448201526064016102d0565b5f82815481106103c1576103c16107a6565b5f918252602090912001546001600160a01b031692915050565b5f6103e533610482565b905090565b6103f433826104ea565b50565b5f54805b6104066001826107ce565b90505f811261047e5760015f808381548110610424576104246107a6565b5f9182526020808320909101546001600160a01b031683528201929092526040018120819055805480610459576104596107f4565b5f8281526020902081015f1990810180546001600160a01b03191690550190556103fb565b5050565b5f805481905b808210156104e157836001600160a01b03165f83815481106104ac576104ac6107a6565b5f918252602090912001546001600160a01b0316036104cf575060019392505050565b6104da826001610808565b9150610488565b505f9392505050565b5f6104f5838361067e565b90508061053c5760405162461bcd60e51b8152602060048201526015602482015274027379032bc34b9ba329032b9b2903b30b637b9171605d1b60448201526064016102d0565b505050565b6001600160a01b0381165f90815260016020526040812081905580545b8082101561053c57826001600160a01b03165f8381548110610582576105826107a6565b5f918252602090912001546001600160a01b031603610638575f6105a760018361081b565b815481106105b7576105b76107a6565b5f91825260208220015481546001600160a01b039091169190849081106105e0576105e06107a6565b5f918252602082200180546001600160a01b0319166001600160a01b039390931692909217909155805480610617576106176107f4565b5f8281526020902081015f1990810180546001600160a01b03191690550190555b610643826001610808565b915061055e565b5f610655838361067e565b90508015155f0361053c5761053c8383610286565b6103f43382610286565b6103f4338261064a565b5f805481905b8082101561072357846001600160a01b03165f83815481106106a8576106a86107a6565b5f918252602090912001546001600160a01b0316036107115760019250845f83815481106106d8576106d86107a6565b5f91825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591871681526001909152604090208490555b61071c826001610808565b9150610684565b50505b92915050565b80356001600160a01b0381168114610742575f80fd5b919050565b5f8060408385031215610758575f80fd5b6107618361072c565b946020939093013593505050565b5f6020828403121561077f575f80fd5b5035919050565b5f60208284031215610796575f80fd5b61079f8261072c565b9392505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8181035f8312801583831316838312821617156107ed576107ed6107ba565b5092915050565b634e487b7160e01b5f52603160045260245ffd5b80820180821115610726576107266107ba565b81810381811115610726576107266107ba56fea2646970667358221220fdbdb3f5ffe2f5e8b263d9eaa1ff7ec9924278766d3d8e5aa5983658733b4f3d64736f6c63430008140033a3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e15009167";

    public static final String FUNC_ACL_ARRAY = "acl_array";

    public static final String FUNC_ACTIVAR = "activar";

    public static final String FUNC_actualizar_administrador_usuario_clave_direccion = "actualizar_administrador_usuario_clave_direccion";

    public static final String FUNC_borrar_administrador = "borrar_administrador";

    public static final String FUNC_CREAR_ADMINISTRADOR = "crear_administrador";

    public static final String FUNC_devolver_prestamo = "devolver_prestamo";

    public static final String FUNC_DIRECCIONES_EMAILS_MAPA = "direcciones_emails_mapa";

    public static final String FUNC_ESTADO = "estado";

    public static final String FUNC_I_ERC20_EXTRA = "i_erc20_extra";

    public static final String FUNC_INACTIVAR = "inactivar";

    public static final String FUNC_LEER_ADMINISTRADOR_POS = "leer_administrador_pos";

    public static final String FUNC_LEER_ADMINISTRADORES_NUM = "leer_administradores_num";

    public static final String FUNC_leer_cantidad_prestamo = "leer_cantidad_prestamo";

    public static final String FUNC_leer_cantidad_regalo = "leer_cantidad_regalo";

    public static final String FUNC_LEER_DIRECCIONES_PRESTAMO_NUM = "leer_direcciones_prestamo_num";

    public static final String FUNC_LEER_DIRECCIONES_PRESTAMO_POS = "leer_direcciones_prestamo_pos";

    public static final String FUNC_LEER_DIRECCIONES_REGALO_NUM = "leer_direcciones_regalo_num";

    public static final String FUNC_LEER_DIRECCIONES_REGALO_POS = "leer_direcciones_regalo_pos";

    public static final String FUNC_LEER_PRESTAMO_PUNTOS_INTERES_A_RETENER = "leer_prestamo_puntos_interes_a_retener";

    public static final String FUNC_LIBERAR_REGALO = "liberar_regalo";

    public static final String FUNC_LIMITAR = "limitar";

    public static final String FUNC_pedir_prestamo = "pedir_prestamo";

    public static final String FUNC_pedir_regalo = "pedir_regalo";

    public static final String FUNC_PONER_DIRECCIONES_EMAILS_MAPA = "poner_direcciones_emails_mapa";

    public static final String FUNC_PONER_ERC20_PRINCIPAL = "poner_erc20_principal";

    public static final String FUNC_poner_para_regalo = "poner_para_regalo";

    public static final String FUNC_PONER_PRESTAMO_PUNTOS_INTERES_A_RETENER = "poner_prestamo_puntos_interes_a_retener";

    public static final String FUNC_PONER_REGALO_MAXIMO_POR_DIRECCION = "poner_regalo_maximo_por_direccion";

    public static final String FUNC_PONER_REGALO_MAXIMO_POR_PRESTAMO = "poner_regalo_maximo_por_prestamo";

    public static final String FUNC_PONER_TIEMPO_INICIO_REGALOS = "poner_tiempo_inicio_regalos";

    public static final String FUNC_PRESTAMO_MAXIMO_POR_DIRECCION_NUM = "prestamo_maximo_por_direccion_num";

    public static final String FUNC_PRESTAMO_PUNTOS_INTERES_A_RETENER = "prestamo_puntos_interes_a_retener";

    public static final String FUNC_REGALO_CON_PARTE_EN_EL_BALANCE_NUM = "regalo_con_parte_en_el_balance_num";

    public static final String FUNC_REGALO_MAXIMO_POR_DIRECCION_NUM = "regalo_maximo_por_direccion_num";

    public static final String FUNC_SER_ADMINISTRADOR = "ser_administrador";

    public static final String FUNC_TIEMPO_INICIO_REGALOS = "tiempo_inicio_regalos";

    public static final Event AD_AD_U_EVENT = new Event("Ad_ad_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event AD_U_U_EVENT = new Event("Ad_u_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event MENSAJE_EVENT = new Event("Mensaje", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event OK_EVENT = new Event("Ok", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ST_U_EVENT = new Event("St_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Kalorias_faucets(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Kalorias_faucets(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Kalorias_faucets(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Kalorias_faucets(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<Ad_ad_uEventResponse> getAd_ad_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_AD_U_EVENT, transactionReceipt);
        ArrayList<Ad_ad_uEventResponse> responses = new ArrayList<Ad_ad_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.origen = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.destino = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_ad_uEventResponse getAd_ad_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_AD_U_EVENT, log);
        Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
        typedResponse.log = log;
        typedResponse.origen = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.destino = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_ad_uEventFromLog(log));
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_AD_U_EVENT));
        return ad_ad_uEventFlowable(filter);
    }

    public static List<Ad_u_uEventResponse> getAd_u_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_U_U_EVENT, transactionReceipt);
        ArrayList<Ad_u_uEventResponse> responses = new ArrayList<Ad_u_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_u_uEventResponse typedResponse = new Ad_u_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.direccion = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_u_uEventResponse getAd_u_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_U_U_EVENT, log);
        Ad_u_uEventResponse typedResponse = new Ad_u_uEventResponse();
        typedResponse.log = log;
        typedResponse.direccion = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_u_uEventResponse> ad_u_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_u_uEventFromLog(log));
    }

    public Flowable<Ad_u_uEventResponse> ad_u_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_U_U_EVENT));
        return ad_u_uEventFlowable(filter);
    }

    public static List<MensajeEventResponse> getMensajeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MENSAJE_EVENT, transactionReceipt);
        ArrayList<MensajeEventResponse> responses = new ArrayList<MensajeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MensajeEventResponse typedResponse = new MensajeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MensajeEventResponse getMensajeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MENSAJE_EVENT, log);
        MensajeEventResponse typedResponse = new MensajeEventResponse();
        typedResponse.log = log;
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMensajeEventFromLog(log));
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MENSAJE_EVENT));
        return mensajeEventFlowable(filter);
    }

    public static List<OkEventResponse> getOkEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OK_EVENT, transactionReceipt);
        ArrayList<OkEventResponse> responses = new ArrayList<OkEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OkEventResponse typedResponse = new OkEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OkEventResponse getOkEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OK_EVENT, log);
        OkEventResponse typedResponse = new OkEventResponse();
        typedResponse.log = log;
        typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<OkEventResponse> okEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOkEventFromLog(log));
    }

    public Flowable<OkEventResponse> okEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OK_EVENT));
        return okEventFlowable(filter);
    }

    public static List<St_uEventResponse> getSt_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ST_U_EVENT, transactionReceipt);
        ArrayList<St_uEventResponse> responses = new ArrayList<St_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            St_uEventResponse typedResponse = new St_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.texto = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static St_uEventResponse getSt_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ST_U_EVENT, log);
        St_uEventResponse typedResponse = new St_uEventResponse();
        typedResponse.log = log;
        typedResponse.texto = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<St_uEventResponse> st_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSt_uEventFromLog(log));
    }

    public Flowable<St_uEventResponse> st_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ST_U_EVENT));
        return st_uEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple3<String, String, byte[]>> acl_array(BigInteger param0) {
        final Function function = new Function(FUNC_ACL_ARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteFunctionCall<Tuple3<String, String, byte[]>>(function,
                new Callable<Tuple3<String, String, byte[]>>() {
                    @Override
                    public Tuple3<String, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> activar() {
        final Function function = new Function(
                FUNC_ACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String direccion, String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador() {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador(String direccion) {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crear_administrador(String direccion, String usuario, byte[] clave) {
        final Function function = new Function(
                FUNC_CREAR_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> devolver_prestamo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_devolver_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> devolver_prestamo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_devolver_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> direcciones_emails_mapa() {
        final Function function = new Function(FUNC_DIRECCIONES_EMAILS_MAPA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> estado() {
        final Function function = new Function(FUNC_ESTADO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> i_erc20_extra() {
        final Function function = new Function(FUNC_I_ERC20_EXTRA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> inactivar() {
        final Function function = new Function(
                FUNC_INACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> leer_administrador_pos(String direccion) {
        final Function function = new Function(FUNC_LEER_ADMINISTRADOR_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_administradores_num() {
        final Function function = new Function(FUNC_LEER_ADMINISTRADORES_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_prestamo() {
        final Function function = new Function(FUNC_leer_cantidad_prestamo, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_prestamo(String direccion) {
        final Function function = new Function(FUNC_leer_cantidad_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_regalo(String direccion) {
        final Function function = new Function(FUNC_leer_cantidad_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_regalo() {
        final Function function = new Function(FUNC_leer_cantidad_regalo, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_direcciones_prestamo_num() {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_PRESTAMO_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> leer_direcciones_prestamo_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_PRESTAMO_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> leer_direcciones_regalo_num() {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_REGALO_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> leer_direcciones_regalo_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_REGALO_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> leer_prestamo_puntos_interes_a_retener() {
        final Function function = new Function(FUNC_LEER_PRESTAMO_PUNTOS_INTERES_A_RETENER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> liberar_regalo(String direccion) {
        final Function function = new Function(
                FUNC_LIBERAR_REGALO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> limitar() {
        final Function function = new Function(
                FUNC_LIMITAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_prestamo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_prestamo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_regalo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_regalo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_direcciones_emails_mapa(String _direcciones_emails_mapa) {
        final Function function = new Function(
                FUNC_PONER_DIRECCIONES_EMAILS_MAPA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_erc20_principal(String nuevo_erc20) {
        final Function function = new Function(
                FUNC_PONER_ERC20_PRINCIPAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nuevo_erc20)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_para_regalo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_poner_para_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_para_regalo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_poner_para_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_prestamo_puntos_interes_a_retener(BigInteger puntos_porcentuales) {
        final Function function = new Function(
                FUNC_PONER_PRESTAMO_PUNTOS_INTERES_A_RETENER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(puntos_porcentuales)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_regalo_maximo_por_direccion(BigInteger _regalo_maximo_por_direccion_num) {
        final Function function = new Function(
                FUNC_PONER_REGALO_MAXIMO_POR_DIRECCION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_regalo_maximo_por_direccion_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_regalo_maximo_por_prestamo(BigInteger _prestamo_maximo_por_direccion_num) {
        final Function function = new Function(
                FUNC_PONER_REGALO_MAXIMO_POR_PRESTAMO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_prestamo_maximo_por_direccion_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_tiempo_inicio_regalos() {
        final Function function = new Function(
                FUNC_PONER_TIEMPO_INICIO_REGALOS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> prestamo_maximo_por_direccion_num() {
        final Function function = new Function(FUNC_PRESTAMO_MAXIMO_POR_DIRECCION_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> prestamo_puntos_interes_a_retener() {
        final Function function = new Function(FUNC_PRESTAMO_PUNTOS_INTERES_A_RETENER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> regalo_con_parte_en_el_balance_num() {
        final Function function = new Function(FUNC_REGALO_CON_PARTE_EN_EL_BALANCE_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> regalo_maximo_por_direccion_num() {
        final Function function = new Function(FUNC_REGALO_MAXIMO_POR_DIRECCION_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> ser_administrador(String direccion) {
        final Function function = new Function(FUNC_SER_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> tiempo_inicio_regalos() {
        final Function function = new Function(FUNC_TIEMPO_INICIO_REGALOS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static Kalorias_faucets load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias_faucets(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Kalorias_faucets load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias_faucets(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Kalorias_faucets load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Kalorias_faucets(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Kalorias_faucets load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Kalorias_faucets(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class Ad_ad_uEventResponse extends BaseEventResponse {
        public String origen;

        public String destino;

        public BigInteger cantidad;

        public String mensaje;
    }

    public static class Ad_u_uEventResponse extends BaseEventResponse {
        public String direccion;

        public BigInteger cantidad;

        public BigInteger id;

        public String mensaje;
    }

    public static class MensajeEventResponse extends BaseEventResponse {
        public String mensaje;
    }

    public static class OkEventResponse extends BaseEventResponse {
        public Boolean es;

        public String mensaje;
    }

    public static class St_uEventResponse extends BaseEventResponse {
        public String texto;

        public BigInteger cantidad;
    }
}
