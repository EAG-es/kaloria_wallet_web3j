package innui.web3j.generated.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.8.
 */
@SuppressWarnings("rawtypes")
public class Kalorias_faucets extends Contract {
    public static final String BINARY = "60806040526001805460ff1916811790553480156200001d57600080fd5b5060405162004548380380620045488339810160408190526200004091620005eb565b600080516020620045288339815191526040516200008f9060208082526018908201527f6d696e696261736573202d3e20636f6e7374727563746f720000000000000000604082015260600190565b60405180910390a16040805160808101825260606020808301828152600084860152828401929092523383528351808501855260048152631c9bdbdd60e21b918101919091529052905169726f6f745f636c61766560b01b8152600290600a01602060405180830381855afa1580156200010d573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906200013291906200062a565b6040828101919091528051600180825281830190925290602080830190803683375050506060820181905280516d7065726d69736f5f6d6178696d6f60901b91906000906200018557620001856200065a565b60209081029190910181019190915260008054600181018255908052825160049091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039093166001600160a01b03199093169290921782559183015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401906200021f9082620006ff565b506040820151600282015560608201518051620002479160038401916020909101906200055d565b5050505060008051602062004528833981519152604051620002a79060208082526024908201527f6572633230735f6578747261735f66617563657473202d3e20636f6e7374727560408201526331ba37b960e11b606082015260800190565b60405180910390a1604051620002bd90620005ad565b604051809103906000f080158015620002da573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b03929092169190911790556040516200030990620005ad565b604051809103906000f08015801562000326573d6000803e3d6000fd5b50600780546001600160a01b03929092166001600160a01b0319909216919091179055426009556103e86006556040516000805160206200452883398151915290620003a3906020808252601f908201527f6b616c6f726961735f66617563657473202d3e20636f6e7374727563746f7200604082015260600190565b60405180910390a1620003b562000429565b60018054610100600160a81b0319166101006001600160a01b038581169190910291909117909155600880546001600160a01b0319169183169190911790556103e8600655633663a52060028190556200041d906005620004a2602090811b620018b717901c565b600555506200084a9050565b6200043433620004ec565b620004965760405162461bcd60e51b815260206004820152602860248201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360448201526703a3930b237b917160c51b606482015260840160405180910390fd5b6001805460ff19169055565b600082600003620004b657506000620004e6565b6000620004c48385620007e1565b905082620004d38583620007fb565b14620004e357620004e36200081e565b90505b92915050565b600080805b6000548110156200055657600081815481106200051257620005126200065a565b60009182526020909120600490910201546001600160a01b039081169085160362000541576001915062000556565b6200054e81600162000834565b9050620004f1565b5092915050565b8280548282559060005260206000209081019282156200059b579160200282015b828111156200059b5782518255916020019190600101906200057e565b50620005a9929150620005bb565b5090565b6106a48062003e8483390190565b5b80821115620005a95760008155600101620005bc565b6001600160a01b0381168114620005e857600080fd5b50565b60008060408385031215620005ff57600080fd5b82516200060c81620005d2565b60208401519092506200061f81620005d2565b809150509250929050565b6000602082840312156200063d57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c908216806200068557607f821691505b602082108103620006a657634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620006fa57600081815260208120601f850160051c81016020861015620006d55750805b601f850160051c820191505b81811015620006f657828155600101620006e1565b5050505b505050565b81516001600160401b038111156200071b576200071b62000644565b62000733816200072c845462000670565b84620006ac565b602080601f8311600181146200076b5760008415620007525750858301515b600019600386901b1c1916600185901b178555620006f6565b600085815260208120601f198616915b828110156200079c578886015182559484019460019091019084016200077b565b5085821015620007bb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620004e657620004e6620007cb565b6000826200081957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052600160045260246000fd5b80820180821115620004e657620004e6620007cb565b61362a806200085a6000396000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c806364915f8011610151578063a9a4079c116100c3578063e2ea116f11610087578063e2ea116f1461050e578063e3dbc94414610521578063e6828e1b14610534578063ed7bddc314610547578063f5a571361461054f578063f9d06c4d1461055757600080fd5b8063a9a4079c146104db578063b2be353c146104ee578063b776a7a2146104f6578063b9a456e1146104fe578063c49c3d051461050657600080fd5b80637f04dcc9116101155780637f04dcc91461045a5780637ffcbe501461046d5780638e3ee7ba1461048057806391c6a581146104a257806397aefa5b146104b557806397e865c4146104c857600080fd5b806364915f801461040a578063688e3467146104125780636a0fdd491461042c57806378a2252b1461043f5780637b318b6e1461044757600080fd5b80633470e932116101ea5780634cb64acf116101ae5780634cb64acf146103a75780634dc46437146103ba578063531a3352146103dd57806353a913b0146103e65780635e979800146103ef5780636354a8ef1461040257600080fd5b80633470e9321461034d578063367b943c1461036557806337cd86f81461037857806342134c491461038b5780634c3539c61461039e57600080fd5b806318cf46111161023c57806318cf4611146102f057806319e012b0146103035780631d032d011461030c57806324b5b0931461031f5780632dd47cac1461033257806333aadfcd1461033a57600080fd5b80630de62ad6146102795780631320ec511461028e57806313893106146102be57806314314188146102c6578063171d602f146102d9575b600080fd5b61028c610287366004612e33565b61056a565b005b6008546102a1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61028c6105b6565b61028c6102d4366004612e61565b6105e1565b6102e260095481565b6040519081526020016102b5565b6102a16102fe366004612e33565b61066d565b6102e260035481565b6102e261031a366004612e61565b610708565b61028c61032d366004612e33565b6107b9565b61028c6107f9565b61028c610348366004612e7e565b610834565b6001546102a19061010090046001600160a01b031681565b61028c610373366004612e33565b610867565b61028c610386366004612e61565b6108a7565b6102e2610399366004612e61565b6108ee565b6102e260055481565b61028c6103b5366004612e33565b610986565b6103cd6103c8366004612e61565b610a21565b60405190151581526020016102b5565b6102e260065481565b6102e260025481565b61028c6103fd366004612e7e565b610a89565b6102e2610ab8565b6102e2610af6565b60015461041f9060ff1681565b6040516102b59190612ec0565b61028c61043a366004612e33565b610b9f565b6102e2610bdf565b61028c610455366004612f8b565b610c47565b6102a1610468366004612e33565b610e24565b61028c61047b366004612e61565b610e7c565b61049361048e366004612e33565b610ec9565b6040516102b593929190613038565b61028c6104b0366004612e33565b610f91565b6102e26104c3366004612e61565b610fbb565b61028c6104d6366004612e7e565b611014565b61028c6104e9366004613082565b611043565b61028c61126a565b61028c6113c5565b6102e26113fb565b61028c611469565b61028c61051c366004612e33565b6114a1565b61028c61052f3660046130f8565b6114cb565b61028c610542366004612e7e565b6115fc565b6102e261162b565b6102e26116a5565b61028c610565366004612e61565b6116e3565b600060015460ff16600281111561058357610583612eaa565b146105a95760405162461bcd60e51b81526004016105a090613170565b60405180910390fd5b6105b333826118f8565b50565b6105bf33610a21565b6105db5760405162461bcd60e51b81526004016105a0906131a7565b42600955565b6105ea33610a21565b6106065760405162461bcd60e51b81526004016105a0906131a7565b6004805460405163406a58fd60e11b81526001600160a01b03909116916380d4b1fa91610638918591600091016131ef565b600060405180830381600087803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b5050505050565b600061067833610a21565b6106945760405162461bcd60e51b81526004016105a0906131a7565b60048054604051633e62601d60e01b81529182018490526001600160a01b031690633e62601d906024015b602060405180830381865afa1580156106dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107009190613208565b90505b919050565b60008060015460ff16600281111561072257610722612eaa565b1461073f5760405162461bcd60e51b81526004016105a090613170565b6000805b60005481101561079f576000818154811061076057610760613225565b60009182526020909120600490910201546001600160a01b039081169085160361078d576001915061079f565b610798816001613251565b9050610743565b81156107ae5791506107039050565b506000199392505050565b600060015460ff1660028111156107d2576107d2612eaa565b146107ef5760405162461bcd60e51b81526004016105a090613170565b6105b33382611dca565b61080233610a21565b61081e5760405162461bcd60e51b81526004016105a0906131a7565b600180546000919060ff191681835b0217905550565b61083d33610a21565b6108595760405162461bcd60e51b81526004016105a0906131a7565b6108638282612343565b5050565b600060015460ff16600281111561088057610880612eaa565b1461089d5760405162461bcd60e51b81526004016105a090613170565b6105b33382612882565b6108b033610a21565b6108cc5760405162461bcd60e51b81526004016105a0906131a7565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b60006108f933610a21565b6109155760405162461bcd60e51b81526004016105a0906131a7565b60048054604051632c2b369760e21b81526001600160a01b038581169382019390935291169063b0acda5c906024015b602060405180830381865afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107009190613264565b61098f33610a21565b6109ab5760405162461bcd60e51b81526004016105a0906131a7565b612710811115610a1c5760405162461bcd60e51b815260206004820152603660248201527f4c6f732050756e746f7320706f7263656e7475616c657320646562656e2073656044820152750391034b73332b934b7b932b9903090189818181817160551b60648201526084016105a0565b600655565b600080805b600054811015610a825760008181548110610a4357610a43613225565b60009182526020909120600490910201546001600160a01b0390811690851603610a705760019150610a82565b610a7b816001613251565b9050610a26565b5092915050565b610a9233610a21565b610aae5760405162461bcd60e51b81526004016105a0906131a7565b6108638282611dca565b60008060015460ff166002811115610ad257610ad2612eaa565b14610aef5760405162461bcd60e51b81526004016105a090613170565b5060065490565b60008060015460ff166002811115610b1057610b10612eaa565b14610b2d5760405162461bcd60e51b81526004016105a090613170565b600754604051632c2b369760e21b81523360048201526001600160a01b039091169063b0acda5c906024015b602060405180830381865afa158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a9190613264565b905090565b600060015460ff166002811115610bb857610bb8612eaa565b14610bd55760405162461bcd60e51b81526004016105a090613170565b6105b33382612343565b60008060015460ff166002811115610bf957610bf9612eaa565b14610c165760405162461bcd60e51b81526004016105a090613170565b60048054604051632c2b369760e21b815233928101929092526001600160a01b03169063b0acda5c90602401610b59565b610c5033610a21565b610c6c5760405162461bcd60e51b81526004016105a0906131a7565b600054600210610ce45760405162461bcd60e51b815260206004820152603e60248201527f536f6c6f207365207065726d6974652061637475616c697a617220736920686160448201527f79206d617320646520646f732061646d696e6973747261646f7265732e20000060648201526084016105a0565b6000610cef85610708565b90506000811215610d125760405162461bcd60e51b81526004016105a0906131a7565b835115610d4c578360008281548110610d2d57610d2d613225565b90600052602060002090600402016001019081610d4a9190613302565b505b825115610dcc57600283604051610d6391906133c2565b602060405180830381855afa158015610d80573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610da39190613264565b60008281548110610db657610db6613225565b9060005260206000209060040201600201819055505b6001600160a01b03821615610666578160008281548110610def57610def613225565b6000918252602090912060049091020180546001600160a01b0319166001600160a01b03929092169190911790555050505050565b6000610e2f33610a21565b610e4b5760405162461bcd60e51b81526004016105a0906131a7565b600754604051633e62601d60e01b8152600481018490526001600160a01b0390911690633e62601d906024016106bf565b610e8533610a21565b610ea15760405162461bcd60e51b81526004016105a0906131a7565b600180546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60008181548110610ed957600080fd5b6000918252602090912060049091020180546001820180546001600160a01b03909216935090610f089061327d565b80601f0160208091040260200160405190810160405280929190818152602001828054610f349061327d565b8015610f815780601f10610f5657610100808354040283529160200191610f81565b820191906000526020600020905b815481529060010190602001808311610f6457829003601f168201915b5050505050908060020154905083565b610f9a33610a21565b610fb65760405162461bcd60e51b81526004016105a0906131a7565b600255565b6000610fc633610a21565b610fe25760405162461bcd60e51b81526004016105a0906131a7565b600754604051632c2b369760e21b81526001600160a01b0384811660048301529091169063b0acda5c90602401610945565b61101d33610a21565b6110395760405162461bcd60e51b81526004016105a0906131a7565b6108638282612882565b61104c33610a21565b6110685760405162461bcd60e51b81526004016105a0906131a7565b6000805b6000548110156110c8576000818154811061108957611089613225565b60009182526020909120600490910201546001600160a01b03908116908616036110b657600191506110c8565b6110c1816001613251565b905061106c565b81156111325760405162461bcd60e51b815260206004820152603360248201527f45736120646972656363696f6e2064652061646d696e6973747261646f7220796044820152720309032b9ba30903932b3b4b9ba3930b230971606d1b60648201526084016105a0565b604080516080810182526000818301526060808201526001600160a01b038716815260208101869052905160029061116b9086906133c2565b602060405180830381855afa158015611188573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906111ab9190613264565b60408201526000805460018101825590805281517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563600490920291820180546001600160a01b0319166001600160a01b03909216919091178155602083015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401906112399082613302565b50604082015160028201556060820151805161125f916003840191602090910190612d3f565b505050505050505050565b61127333610a21565b61128f5760405162461bcd60e51b81526004016105a0906131a7565b600061129a33610708565b905060008112156112bd5760405162461bcd60e51b81526004016105a0906131a7565b600080546112cd906001906133de565b815481106112dd576112dd613225565b9060005260206000209060040201600082815481106112fe576112fe613225565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b0390921691909117815560018082019061133f908401826133f1565b50600282015481600201556003820181600301908054611360929190612d8a565b509050506000805480611375576113756134c4565b60008281526020812060046000199093019283020180546001600160a01b0319168155906113a66001830182612dca565b60028201600090556003820160006113be9190612e04565b5050905550565b6113ce33610a21565b6113ea5760405162461bcd60e51b81526004016105a0906131a7565b60018054819060ff1916818061082d565b600061140633610a21565b6114225760405162461bcd60e51b81526004016105a0906131a7565b6004805460408051630c963c7d60e31b815290516001600160a01b03909216926364b1e3e89282820192602092908290030181865afa158015610b76573d6000803e3d6000fd5b61147233610a21565b61148e5760405162461bcd60e51b81526004016105a0906131a7565b600180546002919060ff1916818361082d565b6114aa33610a21565b6114c65760405162461bcd60e51b81526004016105a0906131a7565b600555565b6114d433610a21565b6114f05760405162461bcd60e51b81526004016105a0906131a7565b3360006114fc82610708565b9050600081121561151f5760405162461bcd60e51b81526004016105a0906131a7565b84511561155957846000828154811061153a5761153a613225565b906000526020600020906004020160010190816115579190613302565b505b8351156115d95760028460405161157091906133c2565b602060405180830381855afa15801561158d573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906115b09190613264565b600082815481106115c3576115c3613225565b9060005260206000209060040201600201819055505b6001600160a01b03831615610666578260008281548110610def57610def613225565b61160533610a21565b6116215760405162461bcd60e51b81526004016105a0906131a7565b61086382826118f8565b600061163633610a21565b6116525760405162461bcd60e51b81526004016105a0906131a7565b600760009054906101000a90046001600160a01b03166001600160a01b03166364b1e3e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b76573d6000803e3d6000fd5b60008060015460ff1660028111156116bf576116bf612eaa565b146116dc5760405162461bcd60e51b81526004016105a090613170565b5060005490565b6116ec33610a21565b6117085760405162461bcd60e51b81526004016105a0906131a7565b6000546002106117805760405162461bcd60e51b815260206004820152603a60248201527f536f6c6f207365207065726d69746520626f7272617220736920686179206d6160448201527f7320646520646f732061646d696e6973747261646f7265732e2000000000000060648201526084016105a0565b600061178b82610708565b905060008112156117ae5760405162461bcd60e51b81526004016105a0906131a7565b600080546117be906001906133de565b815481106117ce576117ce613225565b9060005260206000209060040201600082815481106117ef576117ef613225565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180820190611830908401826133f1565b50600282015481600201556003820181600301908054611851929190612d8a565b509050506000805480611866576118666134c4565b60008281526020812060046000199093019283020180546001600160a01b0319168155906118976001830182612dca565b60028201600090556003820160006118af9190612e04565b505090555050565b6000826000036118c9575060006118f2565b60006118d583856134da565b9050826118e28583613507565b146118ef576118ef61351b565b90505b92915050565b60095460009061190c906301e13380612a19565b90508042111561191e5761191e612a65565b60048054604051632c2b369760e21b81526001600160a01b03868116938201939093526000929091169063b0acda5c90602401602060405180830381865afa15801561196e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119929190613264565b90506002548110611a0b5760405162461bcd60e51b815260206004820152603860248201527f5961206120616c63616e7a61646f20656c206d6178696d6f20706f7369626c6560448201527f2064652063616e746964616420646520726567616c6f2e20000000000000000060648201526084016105a0565b60085460405163ec72a5db60e01b81526001600160a01b0386811660048301529091169063ec72a5db90602401602060405180830381865afa158015611a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a799190613531565b611a955760405162461bcd60e51b81526004016105a090613553565b6002548390600090611aa78484612a19565b1115611abd57600254611aba9084612c46565b91505b60035415611cbd576001546040516370a0823160e01b815230600482015260009161010090046001600160a01b0316906370a0823190602401602060405180830381865afa158015611b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b379190613264565b90508015611cb757600354811115611b4e57506003545b82811015611b6657611b608382612c46565b91508092505b60015460405163a9059cbb60e01b81526101009091046001600160a01b03169063a9059cbb90611b9c908a9087906004016131ef565b6020604051808303816000875af1158015611bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdf9190613531565b5060048054604051632c2b369760e21b81526001600160a01b038a8116938201939093529116906380d4b1fa908990611c67908790859063b0acda5c906024015b602060405180830381865afa158015611c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c619190613264565b90612a19565b6040518363ffffffff1660e01b8152600401611c849291906131ef565b600060405180830381600087803b158015611c9e57600080fd5b505af1158015611cb2573d6000803e3d6000fd5b505050505b50611cc0565b50805b8015611dc2576001546040516345b1769b60e11b81526101009091046001600160a01b031690638b62ed3690611cfc90899085906004016131ef565b600060405180830381600087803b158015611d1657600080fd5b505af1158015611d2a573d6000803e3d6000fd5b505060048054604051632c2b369760e21b81526001600160a01b038b811693820193909352911692506380d4b1fa91508890611d72908590859063b0acda5c90602401611c20565b6040518363ffffffff1660e01b8152600401611d8f9291906131ef565b600060405180830381600087803b158015611da957600080fd5b505af1158015611dbd573d6000803e3d6000fd5b505050505b505050505050565b600154604051636eb1769f60e11b81526001600160a01b0384811660048301523060248301526000926101009004169063dd62ed3e90604401602060405180830381865afa158015611e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e449190613264565b905060008111611eca5760405162461bcd60e51b8152602060048201526044602482018190527f4e6f20686179207065726d69736f206461646f2061206e696e67756e61206361908201527f6e74696461642070617261206465766f6c7563696f6e20646520707265737461606482015263036b797160e51b608482015260a4016105a0565b81811015611ed6578091505b600754604051632c2b369760e21b81526001600160a01b0385811660048301528492169063b0acda5c90602401602060405180830381865afa158015611f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f449190613264565b1015611fbb57600754604051632c2b369760e21b81526001600160a01b0385811660048301529091169063b0acda5c90602401602060405180830381865afa158015611f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb89190613264565b91505b600754604051632c2b369760e21b81526001600160a01b0385811660048301527fd1743226f5b18807ef1b11321ccb0a6965ff78caa57c03eddef734c3c258c75992169063b0acda5c90602401602060405180830381865afa158015612025573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120499190613264565b60405161209091906040808252601b908201527f43616e746964616420656e6465756461646120696e696369616c2000000000006060820152602081019190915260800190565b60405180910390a1604080518181526021818301527f43616e74696461642066696e616c207175652076612061206465766f6c7665726060820152600160fd1b60808201526020810184905290517fd1743226f5b18807ef1b11321ccb0a6965ff78caa57c03eddef734c3c258c7599181900360a00190a16001546040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201859052610100909204909116906323b872dd906064016020604051808303816000875af1158015612167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218b9190613531565b50600754604051632c2b369760e21b81526001600160a01b038581166004830152909116906380d4b1fa908590612210908690859063b0acda5c90602401602060405180830381865afa1580156121e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220a9190613264565b90612c46565b6040518363ffffffff1660e01b815260040161222d9291906131ef565b600060405180830381600087803b15801561224757600080fd5b505af115801561225b573d6000803e3d6000fd5b5050600754604051632c2b369760e21b81526001600160a01b0387811660048301527fd1743226f5b18807ef1b11321ccb0a6965ff78caa57c03eddef734c3c258c7599450909116915063b0acda5c90602401602060405180830381865afa1580156122cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ef9190613264565b604051612336919060408082526019908201527f43616e746964616420656e646575646164612066696e616c20000000000000006060820152602081019190915260800190565b60405180910390a1505050565b600060015460ff16600281111561235c5761235c612eaa565b146123795760405162461bcd60e51b81526004016105a090613170565b60095460009061238d906301e13380612a19565b90508042111561239f5761239f612a65565b600754604051632c2b369760e21b81526001600160a01b038581166004830152600092169063b0acda5c90602401602060405180830381865afa1580156123ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240e9190613264565b905060055481106124875760405162461bcd60e51b815260206004820152603a60248201527f5961206120616c63616e7a61646f20656c206d6178696d6f20706f7369626c6560448201527f2064652063616e746964616420656e207072657374616d6f2e2000000000000060648201526084016105a0565b60085460405163ec72a5db60e01b81526001600160a01b0386811660048301529091169063ec72a5db90602401602060405180830381865afa1580156124d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f59190613531565b6125115760405162461bcd60e51b81526004016105a090613553565b60055483906125208383612a19565b1115612536576005546125339083612c46565b90505b6001546040516370a0823160e01b815230600482015260009161010090046001600160a01b0316906370a0823190602401602060405180830381865afa158015612584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a89190613264565b90506000806125c2600654856118b790919063ffffffff16565b90506125d081612710612c8f565b90506125dc8482612c46565b9350821561270c57838310156125fc576125f68484612c46565b91508293505b60015460405163a9059cbb60e01b81526101009091046001600160a01b03169063a9059cbb90612632908b9088906004016131ef565b6020604051808303816000875af1158015612651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126759190613531565b50600754604051632c2b369760e21b81526001600160a01b038a81166004830152909116906380d4b1fa908a906126b8908890859063b0acda5c90602401611c20565b6040518363ffffffff1660e01b81526004016126d59291906131ef565b600060405180830381600087803b1580156126ef57600080fd5b505af1158015612703573d6000803e3d6000fd5b50505050612710565b8391505b8115612878576001546040516345b1769b60e11b81526101009091046001600160a01b031690638b62ed369061274c90309085906004016131ef565b600060405180830381600087803b15801561276657600080fd5b505af115801561277a573d6000803e3d6000fd5b50506001546040516345b1769b60e11b81526101009091046001600160a01b03169250638b62ed3691506127b4908b9086906004016131ef565b600060405180830381600087803b1580156127ce57600080fd5b505af11580156127e2573d6000803e3d6000fd5b5050600754604051632c2b369760e21b81526001600160a01b038c8116600483015290911692506380d4b1fa91508a90612828908690859063b0acda5c90602401611c20565b6040518363ffffffff1660e01b81526004016128459291906131ef565b600060405180830381600087803b15801561285f57600080fd5b505af1158015612873573d6000803e3d6000fd5b505050505b5050505050505050565b600154604051636eb1769f60e11b81526001600160a01b0384811660048301523060248301526000926101009004169063dd62ed3e90604401602060405180830381865afa1580156128d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fc9190613264565b9050600081116129745760405162461bcd60e51b815260206004820152603f60248201527f4e6f20686179207065726d69736f206461646f2061206e696e67756e6120636160448201527f6e7469646164207061726120706f6e6572207061726120726567616c6f2e200060648201526084016105a0565b81811015612980578091505b6001546040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201859052610100909204909116906323b872dd906064016020604051808303816000875af11580156129df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a039190613531565b50600354612a119083612a19565b600355505050565b600080612a268385613251565b9050838110156118ef5760405162461bcd60e51b815260206004820152600a60248201526921202863203e3d20612960b01b60448201526064016105a0565b6000600460009054906101000a90046001600160a01b03166001600160a01b03166364b1e3e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ade9190613264565b905060005b612aee6001836135c0565b9150600082126108635760048054604051633e62601d60e01b81529182018490526001600160a01b031690633e62601d90602401602060405180830381865afa158015612b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b639190613208565b600754604051632c2b369760e21b81526001600160a01b0380841660048301529293506000929091169063b0acda5c90602401602060405180830381865afa158015612bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd79190613264565b11612c41576004805460405163406a58fd60e11b81526001600160a01b03909116916380d4b1fa91612c0e918591600091016131ef565b600060405180830381600087803b158015612c2857600080fd5b505af1158015612c3c573d6000803e3d6000fd5b505050505b612ae3565b600082821115612c855760405162461bcd60e51b815260206004820152600a60248201526921202862203c3d20612960b01b60448201526064016105a0565b6118ef82846133de565b6000808211612ccc5760405162461bcd60e51b815260206004820152600960248201526821202862203e20302960b81b60448201526064016105a0565b6000612cd88385613507565b9050612ce483856135e0565b612cee82856134da565b612cf89190613251565b84146118ef5760405162461bcd60e51b815260206004820152601660248201527521202861203d3d2062202a2063202b2061202520622960501b60448201526064016105a0565b828054828255906000526020600020908101928215612d7a579160200282015b82811115612d7a578251825591602001919060010190612d5f565b50612d86929150612e1e565b5090565b828054828255906000526020600020908101928215612d7a5760005260206000209182015b82811115612d7a578254825591600101919060010190612daf565b508054612dd69061327d565b6000825580601f10612de6575050565b601f0160209004906000526020600020908101906105b39190612e1e565b50805460008255906000526020600020908101906105b391905b5b80821115612d865760008155600101612e1f565b600060208284031215612e4557600080fd5b5035919050565b6001600160a01b03811681146105b357600080fd5b600060208284031215612e7357600080fd5b81356118ef81612e4c565b60008060408385031215612e9157600080fd5b8235612e9c81612e4c565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310612ee257634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612f0f57600080fd5b813567ffffffffffffffff80821115612f2a57612f2a612ee8565b604051601f8301601f19908116603f01168101908282118183101715612f5257612f52612ee8565b81604052838152866020858801011115612f6b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215612fa157600080fd5b8435612fac81612e4c565b9350602085013567ffffffffffffffff80821115612fc957600080fd5b612fd588838901612efe565b94506040870135915080821115612feb57600080fd5b50612ff887828801612efe565b925050606085013561300981612e4c565b939692955090935050565b60005b8381101561302f578181015183820152602001613017565b50506000910152565b60018060a01b03841681526060602082015260008351806060840152613065816080850160208801613014565b604083019390935250601f91909101601f19160160800192915050565b60008060006060848603121561309757600080fd5b83356130a281612e4c565b9250602084013567ffffffffffffffff808211156130bf57600080fd5b6130cb87838801612efe565b935060408601359150808211156130e157600080fd5b506130ee86828701612efe565b9150509250925092565b60008060006060848603121561310d57600080fd5b833567ffffffffffffffff8082111561312557600080fd5b61313187838801612efe565b9450602086013591508082111561314757600080fd5b5061315486828701612efe565b925050604084013561316581612e4c565b809150509250925092565b6020808252601b908201527f456c20636f6e747261746f206e6f20657374612061637469766f2e0000000000604082015260600190565b60208082526028908201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360408201526703a3930b237b917160c51b606082015260800190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561321a57600080fd5b81516118ef81612e4c565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156118f2576118f261323b565b60006020828403121561327657600080fd5b5051919050565b600181811c9082168061329157607f821691505b6020821081036132b157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156132fd57600081815260208120601f850160051c810160208610156132de5750805b601f850160051c820191505b81811015611dc2578281556001016132ea565b505050565b815167ffffffffffffffff81111561331c5761331c612ee8565b6133308161332a845461327d565b846132b7565b602080601f831160018114613365576000841561334d5750858301515b600019600386901b1c1916600185901b178555611dc2565b600085815260208120601f198616915b8281101561339457888601518255948401946001909101908401613375565b50858210156133b25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516133d4818460208701613014565b9190910192915050565b818103818111156118f2576118f261323b565b8181036133fc575050565b613406825461327d565b67ffffffffffffffff81111561341e5761341e612ee8565b61342c8161332a845461327d565b6000601f82116001811461346057600083156134485750848201545b600019600385901b1c1916600184901b178455610666565b600085815260209020601f19841690600086815260209020845b8381101561349a578286015482556001958601959091019060200161347a565b50858310156133b25793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b80820281158282048414176118f2576118f261323b565b634e487b7160e01b600052601260045260246000fd5b600082613516576135166134f1565b500490565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561354357600080fd5b815180151581146118ef57600080fd5b60208082526047908201527f4e6f206861207265676973747261646f20656c20656d61696c20656e20656c2060408201527f736572766963696f2044454d2028446972656363696f6e657320456d61696c20606082015266026b0b8309497160cd1b608082015260a00190565b8181036000831280158383131683831282161715610a8257610a8261323b565b6000826135ef576135ef6134f1565b50069056fea26469706673582212200585d158302729fe3ae22054e20bf0893cc0c77318f537c079ad25bd23201eb764736f6c63430008110033608060405234801561001057600080fd5b507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e15009167604051610070906020808252601e908201527f6172696d617061735f61645f756973202d3e20636f6e7374727563746f720000604082015260600190565b60405180910390a161061d806100876000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806374afc8d71161006657806374afc8d71461011557806380d4b1fa1461013857806387e4c8211461014b578063b0acda5c1461015e578063c11879691461018757600080fd5b806330a11371146100a357806338d94193146100b85780633e62601d146100e857806364b1e3e8146100fb578063715a0ae91461010d575b600080fd5b6100b66100b13660046104ed565b6101a7565b005b6100cb6100c6366004610517565b610206565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cb6100f6366004610517565b610230565b6000545b6040519081526020016100df565b6100b66102b4565b610128610123366004610530565b610345565b60405190151581526020016100df565b6100b66101463660046104ed565b6103b1565b6100b6610159366004610530565b6103bb565b6100ff61016c366004610530565b6001600160a01b031660009081526001602052604090205490565b6100ff610195366004610530565b60016020526000908152604090205481565b6001600160a01b0390911660008181526001602081905260408220939093558054928301815580527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b0319169091179055565b6000818154811061021657600080fd5b6000918252602090912001546001600160a01b0316905081565b6000805482106102865760405162461bcd60e51b815260206004820152601960248201527f506f736963696f6e2066756572612064652072616e676f2e2000000000000000604482015260640160405180910390fd5b6000828154811061029957610299610552565b6000918252602090912001546001600160a01b031692915050565b600054805b6102c460018261057e565b90506000811261034157600160008083815481106102e4576102e4610552565b60009182526020808320909101546001600160a01b03168352820192909252604001812081905580548061031a5761031a6105a5565b600082815260209020810160001990810180546001600160a01b03191690550190556102b9565b5050565b6000805481905b808210156103a757836001600160a01b03166000838154811061037157610371610552565b6000918252602090912001546001600160a01b031603610395575060019392505050565b6103a08260016105bb565b915061034c565b5060009392505050565b61034182826101a7565b6001600160a01b038116600090815260016020526040812081905580545b808210156104cc57826001600160a01b0316600083815481106103fe576103fe610552565b6000918252602090912001546001600160a01b0316036104ba5760006104256001836105d4565b8154811061043557610435610552565b600091825260208220015481546001600160a01b0390911691908490811061045f5761045f610552565b6000918252602082200180546001600160a01b0319166001600160a01b039390931692909217909155805480610497576104976105a5565b600082815260209020810160001990810180546001600160a01b03191690550190555b6104c58260016105bb565b91506103d9565b505050565b80356001600160a01b03811681146104e857600080fd5b919050565b6000806040838503121561050057600080fd5b610509836104d1565b946020939093013593505050565b60006020828403121561052957600080fd5b5035919050565b60006020828403121561054257600080fd5b61054b826104d1565b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103600083128015838313168383128216171561059e5761059e610568565b5092915050565b634e487b7160e01b600052603160045260246000fd5b808201808211156105ce576105ce610568565b92915050565b818103818111156105ce576105ce61056856fea26469706673582212203cc7831a59d830b9550ad69625bd16a22074ca57375b6efdb0b61d719d3c622764736f6c63430008110033a3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e15009167";

    public static final String FUNC_ACL_ARRAY = "acl_array";

    public static final String FUNC_ACTIVAR = "activar";

    public static final String FUNC_actualizar_administrador_usuario_clave_direccion = "actualizar_administrador_usuario_clave_direccion";

    public static final String FUNC_borrar_administrador = "borrar_administrador";

    public static final String FUNC_CREAR_ADMINISTRADOR = "crear_administrador";

    public static final String FUNC_devolver_prestamo = "devolver_prestamo";

    public static final String FUNC_DIRECCIONES_EMAILS_MAPA = "direcciones_emails_mapa";

    public static final String FUNC_ESTADO = "estado";

    public static final String FUNC_I_ERC20_EXTRA = "i_erc20_extra";

    public static final String FUNC_INACTIVAR = "inactivar";

    public static final String FUNC_LEER_ADMINISTRADOR_POS = "leer_administrador_pos";

    public static final String FUNC_LEER_ADMINISTRADORES_NUM = "leer_administradores_num";

    public static final String FUNC_leer_cantidad_prestamo = "leer_cantidad_prestamo";

    public static final String FUNC_leer_cantidad_regalo = "leer_cantidad_regalo";

    public static final String FUNC_LEER_DIRECCIONES_PRESTAMO_NUM = "leer_direcciones_prestamo_num";

    public static final String FUNC_LEER_DIRECCIONES_PRESTAMO_POS = "leer_direcciones_prestamo_pos";

    public static final String FUNC_LEER_DIRECCIONES_REGALO_NUM = "leer_direcciones_regalo_num";

    public static final String FUNC_LEER_DIRECCIONES_REGALO_POS = "leer_direcciones_regalo_pos";

    public static final String FUNC_LEER_PRESTAMO_PUNTOS_INTERES_A_RETENER = "leer_prestamo_puntos_interes_a_retener";

    public static final String FUNC_LIBERAR_REGALO = "liberar_regalo";

    public static final String FUNC_LIMITAR = "limitar";

    public static final String FUNC_pedir_prestamo = "pedir_prestamo";

    public static final String FUNC_pedir_regalo = "pedir_regalo";

    public static final String FUNC_PONER_DIRECCIONES_EMAILS_MAPA = "poner_direcciones_emails_mapa";

    public static final String FUNC_PONER_ERC20_PRINCIPAL = "poner_erc20_principal";

    public static final String FUNC_poner_para_regalo = "poner_para_regalo";

    public static final String FUNC_PONER_PRESTAMO_PUNTOS_INTERES_A_RETENER = "poner_prestamo_puntos_interes_a_retener";

    public static final String FUNC_PONER_REGALO_MAXIMO_POR_DIRECCION = "poner_regalo_maximo_por_direccion";

    public static final String FUNC_PONER_REGALO_MAXIMO_POR_PRESTAMO = "poner_regalo_maximo_por_prestamo";

    public static final String FUNC_PONER_TIEMPO_INICIO_REGALOS = "poner_tiempo_inicio_regalos";

    public static final String FUNC_PRESTAMO_MAXIMO_POR_DIRECCION_NUM = "prestamo_maximo_por_direccion_num";

    public static final String FUNC_PRESTAMO_PUNTOS_INTERES_A_RETENER = "prestamo_puntos_interes_a_retener";

    public static final String FUNC_REGALO_CON_PARTE_EN_EL_BALANCE_NUM = "regalo_con_parte_en_el_balance_num";

    public static final String FUNC_REGALO_MAXIMO_POR_DIRECCION_NUM = "regalo_maximo_por_direccion_num";

    public static final String FUNC_SER_ADMINISTRADOR = "ser_administrador";

    public static final String FUNC_TIEMPO_INICIO_REGALOS = "tiempo_inicio_regalos";

    public static final Event AD_AD_U_EVENT = new Event("Ad_ad_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event DEVOLVER_PRESTAMO_EVENT = new Event("Devolver_prestamo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event MENSAJE_EVENT = new Event("Mensaje", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event OK_EVENT = new Event("Ok", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected Kalorias_faucets(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Kalorias_faucets(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Kalorias_faucets(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Kalorias_faucets(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<Ad_ad_uEventResponse> getAd_ad_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_AD_U_EVENT, transactionReceipt);
        ArrayList<Ad_ad_uEventResponse> responses = new ArrayList<Ad_ad_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_ad_uEventResponse getAd_ad_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_AD_U_EVENT, log);
        Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_ad_uEventFromLog(log));
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_AD_U_EVENT));
        return ad_ad_uEventFlowable(filter);
    }

    public static List<Devolver_prestamoEventResponse> getDevolver_prestamoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEVOLVER_PRESTAMO_EVENT, transactionReceipt);
        ArrayList<Devolver_prestamoEventResponse> responses = new ArrayList<Devolver_prestamoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Devolver_prestamoEventResponse typedResponse = new Devolver_prestamoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Devolver_prestamoEventResponse getDevolver_prestamoEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEVOLVER_PRESTAMO_EVENT, log);
        Devolver_prestamoEventResponse typedResponse = new Devolver_prestamoEventResponse();
        typedResponse.log = log;
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<Devolver_prestamoEventResponse> devolver_prestamoEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDevolver_prestamoEventFromLog(log));
    }

    public Flowable<Devolver_prestamoEventResponse> devolver_prestamoEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEVOLVER_PRESTAMO_EVENT));
        return devolver_prestamoEventFlowable(filter);
    }

    public static List<MensajeEventResponse> getMensajeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MENSAJE_EVENT, transactionReceipt);
        ArrayList<MensajeEventResponse> responses = new ArrayList<MensajeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MensajeEventResponse typedResponse = new MensajeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MensajeEventResponse getMensajeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MENSAJE_EVENT, log);
        MensajeEventResponse typedResponse = new MensajeEventResponse();
        typedResponse.log = log;
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMensajeEventFromLog(log));
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MENSAJE_EVENT));
        return mensajeEventFlowable(filter);
    }

    public static List<OkEventResponse> getOkEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OK_EVENT, transactionReceipt);
        ArrayList<OkEventResponse> responses = new ArrayList<OkEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OkEventResponse typedResponse = new OkEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OkEventResponse getOkEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OK_EVENT, log);
        OkEventResponse typedResponse = new OkEventResponse();
        typedResponse.log = log;
        typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<OkEventResponse> okEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOkEventFromLog(log));
    }

    public Flowable<OkEventResponse> okEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OK_EVENT));
        return okEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple3<String, String, byte[]>> acl_array(BigInteger param0) {
        final Function function = new Function(FUNC_ACL_ARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteFunctionCall<Tuple3<String, String, byte[]>>(function,
                new Callable<Tuple3<String, String, byte[]>>() {
                    @Override
                    public Tuple3<String, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> activar() {
        final Function function = new Function(
                FUNC_ACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String direccion, String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador() {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador(String direccion) {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crear_administrador(String direccion, String usuario, byte[] clave) {
        final Function function = new Function(
                FUNC_CREAR_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> devolver_prestamo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_devolver_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> devolver_prestamo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_devolver_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> direcciones_emails_mapa() {
        final Function function = new Function(FUNC_DIRECCIONES_EMAILS_MAPA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> estado() {
        final Function function = new Function(FUNC_ESTADO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> i_erc20_extra() {
        final Function function = new Function(FUNC_I_ERC20_EXTRA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> inactivar() {
        final Function function = new Function(
                FUNC_INACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> leer_administrador_pos(String direccion) {
        final Function function = new Function(FUNC_LEER_ADMINISTRADOR_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_administradores_num() {
        final Function function = new Function(FUNC_LEER_ADMINISTRADORES_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_prestamo() {
        final Function function = new Function(FUNC_leer_cantidad_prestamo, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_prestamo(String direccion) {
        final Function function = new Function(FUNC_leer_cantidad_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_regalo(String direccion) {
        final Function function = new Function(FUNC_leer_cantidad_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_regalo() {
        final Function function = new Function(FUNC_leer_cantidad_regalo, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_direcciones_prestamo_num() {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_PRESTAMO_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> leer_direcciones_prestamo_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_PRESTAMO_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> leer_direcciones_regalo_num() {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_REGALO_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> leer_direcciones_regalo_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_REGALO_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> leer_prestamo_puntos_interes_a_retener() {
        final Function function = new Function(FUNC_LEER_PRESTAMO_PUNTOS_INTERES_A_RETENER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> liberar_regalo(String direccion) {
        final Function function = new Function(
                FUNC_LIBERAR_REGALO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> limitar() {
        final Function function = new Function(
                FUNC_LIMITAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_prestamo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_prestamo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_regalo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_regalo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_direcciones_emails_mapa(String _direcciones_emails_mapa) {
        final Function function = new Function(
                FUNC_PONER_DIRECCIONES_EMAILS_MAPA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_erc20_principal(String nuevo_erc20) {
        final Function function = new Function(
                FUNC_PONER_ERC20_PRINCIPAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nuevo_erc20)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_para_regalo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_poner_para_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_para_regalo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_poner_para_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_prestamo_puntos_interes_a_retener(BigInteger puntos_porcentuales) {
        final Function function = new Function(
                FUNC_PONER_PRESTAMO_PUNTOS_INTERES_A_RETENER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(puntos_porcentuales)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_regalo_maximo_por_direccion(BigInteger _regalo_maximo_por_direccion_num) {
        final Function function = new Function(
                FUNC_PONER_REGALO_MAXIMO_POR_DIRECCION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_regalo_maximo_por_direccion_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_regalo_maximo_por_prestamo(BigInteger _prestamo_maximo_por_direccion_num) {
        final Function function = new Function(
                FUNC_PONER_REGALO_MAXIMO_POR_PRESTAMO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_prestamo_maximo_por_direccion_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_tiempo_inicio_regalos() {
        final Function function = new Function(
                FUNC_PONER_TIEMPO_INICIO_REGALOS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> prestamo_maximo_por_direccion_num() {
        final Function function = new Function(FUNC_PRESTAMO_MAXIMO_POR_DIRECCION_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> prestamo_puntos_interes_a_retener() {
        final Function function = new Function(FUNC_PRESTAMO_PUNTOS_INTERES_A_RETENER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> regalo_con_parte_en_el_balance_num() {
        final Function function = new Function(FUNC_REGALO_CON_PARTE_EN_EL_BALANCE_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> regalo_maximo_por_direccion_num() {
        final Function function = new Function(FUNC_REGALO_MAXIMO_POR_DIRECCION_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> ser_administrador(String direccion) {
        final Function function = new Function(FUNC_SER_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> tiempo_inicio_regalos() {
        final Function function = new Function(FUNC_TIEMPO_INICIO_REGALOS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static Kalorias_faucets load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias_faucets(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Kalorias_faucets load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias_faucets(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Kalorias_faucets load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Kalorias_faucets(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Kalorias_faucets load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Kalorias_faucets(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class Ad_ad_uEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger value;

        public String mensaje;
    }

    public static class Devolver_prestamoEventResponse extends BaseEventResponse {
        public String mensaje;

        public BigInteger cantidad;
    }

    public static class MensajeEventResponse extends BaseEventResponse {
        public String mensaje;
    }

    public static class OkEventResponse extends BaseEventResponse {
        public Boolean es;

        public String mensaje;
    }
}
