package innui.web3j.generated.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.8.
 */
@SuppressWarnings("rawtypes")
public class Kalorias_faucets extends Contract {
    public static final String BINARY = "60806040526001805460ff1916811790553480156200001d57600080fd5b50604051620045a7380380620045a78339810160408190526200004091620005eb565b600080516020620045878339815191526040516200008f9060208082526018908201527f6d696e696261736573202d3e20636f6e7374727563746f720000000000000000604082015260600190565b60405180910390a16040805160808101825260606020808301828152600084860152828401929092523383528351808501855260048152631c9bdbdd60e21b918101919091529052905169726f6f745f636c61766560b01b8152600290600a01602060405180830381855afa1580156200010d573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906200013291906200062a565b6040828101919091528051600180825281830190925290602080830190803683375050506060820181905280516d7065726d69736f5f6d6178696d6f60901b91906000906200018557620001856200065a565b60209081029190910181019190915260008054600181018255908052825160049091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039093166001600160a01b03199093169290921782559183015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401906200021f9082620006ff565b506040820151600282015560608201518051620002479160038401916020909101906200055d565b5050505060008051602062004587833981519152604051620002a79060208082526024908201527f6572633230735f6578747261735f66617563657473202d3e20636f6e7374727560408201526331ba37b960e11b606082015260800190565b60405180910390a1604051620002bd90620005ad565b604051809103906000f080158015620002da573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b03929092169190911790556040516200030990620005ad565b604051809103906000f08015801562000326573d6000803e3d6000fd5b50600780546001600160a01b03929092166001600160a01b0319909216919091179055426009556103e86006556040516000805160206200458783398151915290620003a3906020808252601f908201527f6b616c6f726961735f66617563657473202d3e20636f6e7374727563746f7200604082015260600190565b60405180910390a1620003b562000429565b60018054610100600160a81b0319166101006001600160a01b038581169190910291909117909155600880546001600160a01b0319169183169190911790556103e8600655633663a52060028190556200041d906005620004a2602090811b620018bb17901c565b600555506200084a9050565b6200043433620004ec565b620004965760405162461bcd60e51b815260206004820152602860248201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360448201526703a3930b237b917160c51b606482015260840160405180910390fd5b6001805460ff19169055565b600082600003620004b657506000620004e6565b6000620004c48385620007e1565b905082620004d38583620007fb565b14620004e357620004e36200081e565b90505b92915050565b600080805b6000548110156200055657600081815481106200051257620005126200065a565b60009182526020909120600490910201546001600160a01b039081169085160362000541576001915062000556565b6200054e81600162000834565b9050620004f1565b5092915050565b8280548282559060005260206000209081019282156200059b579160200282015b828111156200059b5782518255916020019190600101906200057e565b50620005a9929150620005bb565b5090565b6106a48062003ee383390190565b5b80821115620005a95760008155600101620005bc565b6001600160a01b0381168114620005e857600080fd5b50565b60008060408385031215620005ff57600080fd5b82516200060c81620005d2565b60208401519092506200061f81620005d2565b809150509250929050565b6000602082840312156200063d57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c908216806200068557607f821691505b602082108103620006a657634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620006fa57600081815260208120601f850160051c81016020861015620006d55750805b601f850160051c820191505b81811015620006f657828155600101620006e1565b5050505b505050565b81516001600160401b038111156200071b576200071b62000644565b62000733816200072c845462000670565b84620006ac565b602080601f8311600181146200076b5760008415620007525750858301515b600019600386901b1c1916600185901b178555620006f6565b600085815260208120601f198616915b828110156200079c578886015182559484019460019091019084016200077b565b5085821015620007bb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620004e657620004e6620007cb565b6000826200081957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052600160045260246000fd5b80820180821115620004e657620004e6620007cb565b613689806200085a6000396000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c806364915f8011610151578063a9a4079c116100c3578063e2ea116f11610087578063e2ea116f1461050e578063e3dbc94414610521578063e6828e1b14610534578063ed7bddc314610547578063f5a571361461054f578063f9d06c4d1461055757600080fd5b8063a9a4079c146104db578063b2be353c146104ee578063b776a7a2146104f6578063b9a456e1146104fe578063c49c3d051461050657600080fd5b80637f04dcc9116101155780637f04dcc91461045a5780637ffcbe501461046d5780638e3ee7ba1461048057806391c6a581146104a257806397aefa5b146104b557806397e865c4146104c857600080fd5b806364915f801461040a578063688e3467146104125780636a0fdd491461042c57806378a2252b1461043f5780637b318b6e1461044757600080fd5b80633470e932116101ea5780634cb64acf116101ae5780634cb64acf146103a75780634dc46437146103ba578063531a3352146103dd57806353a913b0146103e65780635e979800146103ef5780636354a8ef1461040257600080fd5b80633470e9321461034d578063367b943c1461036557806337cd86f81461037857806342134c491461038b5780634c3539c61461039e57600080fd5b806318cf46111161023c57806318cf4611146102f057806319e012b0146103035780631d032d011461030c57806324b5b0931461031f5780632dd47cac1461033257806333aadfcd1461033a57600080fd5b80630de62ad6146102795780631320ec511461028e57806313893106146102be57806314314188146102c6578063171d602f146102d9575b600080fd5b61028c610287366004612eab565b61056a565b005b6008546102a1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61028c6105b6565b61028c6102d4366004612ed9565b6105e1565b6102e260095481565b6040519081526020016102b5565b6102a16102fe366004612eab565b610671565b6102e260035481565b6102e261031a366004612ed9565b61070c565b61028c61032d366004612eab565b6107bd565b61028c6107fd565b61028c610348366004612ef6565b610838565b6001546102a19061010090046001600160a01b031681565b61028c610373366004612eab565b61086b565b61028c610386366004612ed9565b6108ab565b6102e2610399366004612ed9565b6108f2565b6102e260055481565b61028c6103b5366004612eab565b61098a565b6103cd6103c8366004612ed9565b610a25565b60405190151581526020016102b5565b6102e260065481565b6102e260025481565b61028c6103fd366004612ef6565b610a8d565b6102e2610abc565b6102e2610afa565b60015461041f9060ff1681565b6040516102b59190612f38565b61028c61043a366004612eab565b610ba3565b6102e2610be3565b61028c610455366004613003565b610c4b565b6102a1610468366004612eab565b610e28565b61028c61047b366004612ed9565b610e80565b61049361048e366004612eab565b610ecd565b6040516102b5939291906130b0565b61028c6104b0366004612eab565b610f95565b6102e26104c3366004612ed9565b610fbf565b61028c6104d6366004612ef6565b611018565b61028c6104e93660046130fa565b611047565b61028c61126e565b61028c6113c9565b6102e26113ff565b61028c61146d565b61028c61051c366004612eab565b6114a5565b61028c61052f366004613170565b6114cf565b61028c610542366004612ef6565b611600565b6102e261162f565b6102e26116a9565b61028c610565366004612ed9565b6116e7565b600060015460ff16600281111561058357610583612f22565b146105a95760405162461bcd60e51b81526004016105a0906131e8565b60405180910390fd5b6105b333826118fc565b50565b6105bf33610a25565b6105db5760405162461bcd60e51b81526004016105a09061321f565b42600955565b6105ea33610a25565b6106065760405162461bcd60e51b81526004016105a09061321f565b6004805460405163406a58fd60e11b81526001600160a01b0384811693820193909352600060248201529116906380d4b1fa90604401600060405180830381600087803b15801561065657600080fd5b505af115801561066a573d6000803e3d6000fd5b5050505050565b600061067c33610a25565b6106985760405162461bcd60e51b81526004016105a09061321f565b60048054604051633e62601d60e01b81529182018490526001600160a01b031690633e62601d906024015b602060405180830381865afa1580156106e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107049190613267565b90505b919050565b60008060015460ff16600281111561072657610726612f22565b146107435760405162461bcd60e51b81526004016105a0906131e8565b6000805b6000548110156107a3576000818154811061076457610764613284565b60009182526020909120600490910201546001600160a01b039081169085160361079157600191506107a3565b61079c8160016132b0565b9050610747565b81156107b25791506107079050565b506000199392505050565b600060015460ff1660028111156107d6576107d6612f22565b146107f35760405162461bcd60e51b81526004016105a0906131e8565b6105b33382611dfb565b61080633610a25565b6108225760405162461bcd60e51b81526004016105a09061321f565b600180546000919060ff191681835b0217905550565b61084133610a25565b61085d5760405162461bcd60e51b81526004016105a09061321f565b6108678282612383565b5050565b600060015460ff16600281111561088457610884612f22565b146108a15760405162461bcd60e51b81526004016105a0906131e8565b6105b333826128f6565b6108b433610a25565b6108d05760405162461bcd60e51b81526004016105a09061321f565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b60006108fd33610a25565b6109195760405162461bcd60e51b81526004016105a09061321f565b60048054604051632c2b369760e21b81526001600160a01b038581169382019390935291169063b0acda5c906024015b602060405180830381865afa158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070491906132c3565b61099333610a25565b6109af5760405162461bcd60e51b81526004016105a09061321f565b612710811115610a205760405162461bcd60e51b815260206004820152603660248201527f4c6f732050756e746f7320706f7263656e7475616c657320646562656e2073656044820152750391034b73332b934b7b932b9903090189818181817160551b60648201526084016105a0565b600655565b600080805b600054811015610a865760008181548110610a4757610a47613284565b60009182526020909120600490910201546001600160a01b0390811690851603610a745760019150610a86565b610a7f8160016132b0565b9050610a2a565b5092915050565b610a9633610a25565b610ab25760405162461bcd60e51b81526004016105a09061321f565b6108678282611dfb565b60008060015460ff166002811115610ad657610ad6612f22565b14610af35760405162461bcd60e51b81526004016105a0906131e8565b5060065490565b60008060015460ff166002811115610b1457610b14612f22565b14610b315760405162461bcd60e51b81526004016105a0906131e8565b600754604051632c2b369760e21b81523360048201526001600160a01b039091169063b0acda5c906024015b602060405180830381865afa158015610b7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9e91906132c3565b905090565b600060015460ff166002811115610bbc57610bbc612f22565b14610bd95760405162461bcd60e51b81526004016105a0906131e8565b6105b33382612383565b60008060015460ff166002811115610bfd57610bfd612f22565b14610c1a5760405162461bcd60e51b81526004016105a0906131e8565b60048054604051632c2b369760e21b815233928101929092526001600160a01b03169063b0acda5c90602401610b5d565b610c5433610a25565b610c705760405162461bcd60e51b81526004016105a09061321f565b600054600210610ce85760405162461bcd60e51b815260206004820152603e60248201527f536f6c6f207365207065726d6974652061637475616c697a617220736920686160448201527f79206d617320646520646f732061646d696e6973747261646f7265732e20000060648201526084016105a0565b6000610cf38561070c565b90506000811215610d165760405162461bcd60e51b81526004016105a09061321f565b835115610d50578360008281548110610d3157610d31613284565b90600052602060002090600402016001019081610d4e9190613361565b505b825115610dd057600283604051610d679190613421565b602060405180830381855afa158015610d84573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610da791906132c3565b60008281548110610dba57610dba613284565b9060005260206000209060040201600201819055505b6001600160a01b0382161561066a578160008281548110610df357610df3613284565b6000918252602090912060049091020180546001600160a01b0319166001600160a01b03929092169190911790555050505050565b6000610e3333610a25565b610e4f5760405162461bcd60e51b81526004016105a09061321f565b600754604051633e62601d60e01b8152600481018490526001600160a01b0390911690633e62601d906024016106c3565b610e8933610a25565b610ea55760405162461bcd60e51b81526004016105a09061321f565b600180546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60008181548110610edd57600080fd5b6000918252602090912060049091020180546001820180546001600160a01b03909216935090610f0c906132dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610f38906132dc565b8015610f855780601f10610f5a57610100808354040283529160200191610f85565b820191906000526020600020905b815481529060010190602001808311610f6857829003601f168201915b5050505050908060020154905083565b610f9e33610a25565b610fba5760405162461bcd60e51b81526004016105a09061321f565b600255565b6000610fca33610a25565b610fe65760405162461bcd60e51b81526004016105a09061321f565b600754604051632c2b369760e21b81526001600160a01b0384811660048301529091169063b0acda5c90602401610949565b61102133610a25565b61103d5760405162461bcd60e51b81526004016105a09061321f565b61086782826128f6565b61105033610a25565b61106c5760405162461bcd60e51b81526004016105a09061321f565b6000805b6000548110156110cc576000818154811061108d5761108d613284565b60009182526020909120600490910201546001600160a01b03908116908616036110ba57600191506110cc565b6110c58160016132b0565b9050611070565b81156111365760405162461bcd60e51b815260206004820152603360248201527f45736120646972656363696f6e2064652061646d696e6973747261646f7220796044820152720309032b9ba30903932b3b4b9ba3930b230971606d1b60648201526084016105a0565b604080516080810182526000818301526060808201526001600160a01b038716815260208101869052905160029061116f908690613421565b602060405180830381855afa15801561118c573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906111af91906132c3565b60408201526000805460018101825590805281517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563600490920291820180546001600160a01b0319166001600160a01b03909216919091178155602083015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564019061123d9082613361565b506040820151600282015560608201518051611263916003840191602090910190612db7565b505050505050505050565b61127733610a25565b6112935760405162461bcd60e51b81526004016105a09061321f565b600061129e3361070c565b905060008112156112c15760405162461bcd60e51b81526004016105a09061321f565b600080546112d19060019061343d565b815481106112e1576112e1613284565b90600052602060002090600402016000828154811061130257611302613284565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b0390921691909117815560018082019061134390840182613450565b50600282015481600201556003820181600301908054611364929190612e02565b50905050600080548061137957611379613523565b60008281526020812060046000199093019283020180546001600160a01b0319168155906113aa6001830182612e42565b60028201600090556003820160006113c29190612e7c565b5050905550565b6113d233610a25565b6113ee5760405162461bcd60e51b81526004016105a09061321f565b60018054819060ff19168180610831565b600061140a33610a25565b6114265760405162461bcd60e51b81526004016105a09061321f565b6004805460408051630c963c7d60e31b815290516001600160a01b03909216926364b1e3e89282820192602092908290030181865afa158015610b7a573d6000803e3d6000fd5b61147633610a25565b6114925760405162461bcd60e51b81526004016105a09061321f565b600180546002919060ff19168183610831565b6114ae33610a25565b6114ca5760405162461bcd60e51b81526004016105a09061321f565b600555565b6114d833610a25565b6114f45760405162461bcd60e51b81526004016105a09061321f565b3360006115008261070c565b905060008112156115235760405162461bcd60e51b81526004016105a09061321f565b84511561155d57846000828154811061153e5761153e613284565b9060005260206000209060040201600101908161155b9190613361565b505b8351156115dd576002846040516115749190613421565b602060405180830381855afa158015611591573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906115b491906132c3565b600082815481106115c7576115c7613284565b9060005260206000209060040201600201819055505b6001600160a01b0383161561066a578260008281548110610df357610df3613284565b61160933610a25565b6116255760405162461bcd60e51b81526004016105a09061321f565b61086782826118fc565b600061163a33610a25565b6116565760405162461bcd60e51b81526004016105a09061321f565b600760009054906101000a90046001600160a01b03166001600160a01b03166364b1e3e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b7a573d6000803e3d6000fd5b60008060015460ff1660028111156116c3576116c3612f22565b146116e05760405162461bcd60e51b81526004016105a0906131e8565b5060005490565b6116f033610a25565b61170c5760405162461bcd60e51b81526004016105a09061321f565b6000546002106117845760405162461bcd60e51b815260206004820152603a60248201527f536f6c6f207365207065726d69746520626f7272617220736920686179206d6160448201527f7320646520646f732061646d696e6973747261646f7265732e2000000000000060648201526084016105a0565b600061178f8261070c565b905060008112156117b25760405162461bcd60e51b81526004016105a09061321f565b600080546117c29060019061343d565b815481106117d2576117d2613284565b9060005260206000209060040201600082815481106117f3576117f3613284565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b0390921691909117815560018082019061183490840182613450565b50600282015481600201556003820181600301908054611855929190612e02565b50905050600080548061186a5761186a613523565b60008281526020812060046000199093019283020180546001600160a01b03191681559061189b6001830182612e42565b60028201600090556003820160006118b39190612e7c565b505090555050565b6000826000036118cd575060006118f6565b60006118d98385613539565b9050826118e68583613566565b146118f3576118f361357a565b90505b92915050565b600954600090611910906301e13380612a8d565b90508042111561192257611922612ad9565b60048054604051632c2b369760e21b81526001600160a01b03868116938201939093526000929091169063b0acda5c90602401602060405180830381865afa158015611972573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199691906132c3565b90506002548110611a0f5760405162461bcd60e51b815260206004820152603860248201527f5961206120616c63616e7a61646f20656c206d6178696d6f20706f7369626c6560448201527f2064652063616e746964616420646520726567616c6f2e20000000000000000060648201526084016105a0565b60085460405163ec72a5db60e01b81526001600160a01b0386811660048301529091169063ec72a5db90602401602060405180830381865afa158015611a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7d9190613590565b611a995760405162461bcd60e51b81526004016105a0906135b2565b6002548390600090611aab8484612a8d565b1115611ac157600254611abe9084612cbe565b91505b60035415611cd4576001546040516370a0823160e01b815230600482015260009161010090046001600160a01b0316906370a0823190602401602060405180830381865afa158015611b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3b91906132c3565b90508015611cce57600354811115611b5257506003545b82811015611b6a57611b648382612cbe565b91508092505b60015460405163a9059cbb60e01b81526001600160a01b038981166004830152602482018690526101009092049091169063a9059cbb906044016020604051808303816000875af1158015611bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be79190613590565b5060048054604051632c2b369760e21b81526001600160a01b038a8116938201939093529116906380d4b1fa908990611c6f908790859063b0acda5c906024015b602060405180830381865afa158015611c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6991906132c3565b90612a8d565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015611cb557600080fd5b505af1158015611cc9573d6000803e3d6000fd5b505050505b50611cd7565b50805b8015611df35760015460405163d27beddf60e01b81526001600160a01b03888116600483015260248201849052600060448301526101009092049091169063d27beddf90606401600060405180830381600087803b158015611d3857600080fd5b505af1158015611d4c573d6000803e3d6000fd5b505060048054604051632c2b369760e21b81526001600160a01b038b811693820193909352911692506380d4b1fa91508890611d94908590859063b0acda5c90602401611c28565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015611dda57600080fd5b505af1158015611dee573d6000803e3d6000fd5b505050505b505050505050565b600154604051636eb1769f60e11b81526001600160a01b0384811660048301523060248301526000926101009004169063dd62ed3e90604401602060405180830381865afa158015611e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7591906132c3565b905060008111611efb5760405162461bcd60e51b8152602060048201526044602482018190527f4e6f20686179207065726d69736f206461646f2061206e696e67756e61206361908201527f6e74696461642070617261206465766f6c7563696f6e20646520707265737461606482015263036b797160e51b608482015260a4016105a0565b81811015611f07578091505b600754604051632c2b369760e21b81526001600160a01b0385811660048301528492169063b0acda5c90602401602060405180830381865afa158015611f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7591906132c3565b1015611fec57600754604051632c2b369760e21b81526001600160a01b0385811660048301529091169063b0acda5c90602401602060405180830381865afa158015611fc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe991906132c3565b91505b600754604051632c2b369760e21b81526001600160a01b0385811660048301527fd1743226f5b18807ef1b11321ccb0a6965ff78caa57c03eddef734c3c258c75992169063b0acda5c90602401602060405180830381865afa158015612056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207a91906132c3565b6040516120c191906040808252601b908201527f43616e746964616420656e6465756461646120696e696369616c2000000000006060820152602081019190915260800190565b60405180910390a1604080518181526021818301527f43616e74696461642066696e616c207175652076612061206465766f6c7665726060820152600160fd1b60808201526020810184905290517fd1743226f5b18807ef1b11321ccb0a6965ff78caa57c03eddef734c3c258c7599181900360a00190a16001546040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201859052610100909204909116906323b872dd906064016020604051808303816000875af1158015612198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bc9190613590565b50600754604051632c2b369760e21b81526001600160a01b038581166004830152909116906380d4b1fa908590612241908690859063b0acda5c90602401602060405180830381865afa158015612217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223b91906132c3565b90612cbe565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561228757600080fd5b505af115801561229b573d6000803e3d6000fd5b5050600754604051632c2b369760e21b81526001600160a01b0387811660048301527fd1743226f5b18807ef1b11321ccb0a6965ff78caa57c03eddef734c3c258c7599450909116915063b0acda5c90602401602060405180830381865afa15801561230b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232f91906132c3565b604051612376919060408082526019908201527f43616e746964616420656e646575646164612066696e616c20000000000000006060820152602081019190915260800190565b60405180910390a1505050565b600060015460ff16600281111561239c5761239c612f22565b146123b95760405162461bcd60e51b81526004016105a0906131e8565b6009546000906123cd906301e13380612a8d565b9050804211156123df576123df612ad9565b600754604051632c2b369760e21b81526001600160a01b038581166004830152600092169063b0acda5c90602401602060405180830381865afa15801561242a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244e91906132c3565b905060055481106124c75760405162461bcd60e51b815260206004820152603a60248201527f5961206120616c63616e7a61646f20656c206d6178696d6f20706f7369626c6560448201527f2064652063616e746964616420656e207072657374616d6f2e2000000000000060648201526084016105a0565b60085460405163ec72a5db60e01b81526001600160a01b0386811660048301529091169063ec72a5db90602401602060405180830381865afa158015612511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125359190613590565b6125515760405162461bcd60e51b81526004016105a0906135b2565b60055483906125608383612a8d565b1115612576576005546125739083612cbe565b90505b6001546040516370a0823160e01b815230600482015260009161010090046001600160a01b0316906370a0823190602401602060405180830381865afa1580156125c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e891906132c3565b9050600080612602600654856118bb90919063ffffffff16565b905061261081612710612d07565b905061261c8482612cbe565b9350821561275f578383101561263c576126368484612cbe565b91508293505b60015460405163a9059cbb60e01b81526001600160a01b038a81166004830152602482018790526101009092049091169063a9059cbb906044016020604051808303816000875af1158015612695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b99190613590565b50600754604051632c2b369760e21b81526001600160a01b038a81166004830152909116906380d4b1fa908a906126fc908890859063b0acda5c90602401611c28565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561274257600080fd5b505af1158015612756573d6000803e3d6000fd5b50505050612763565b8391505b81156128ec5760015460405163d27beddf60e01b815230600482015260248101839052600060448201526101009091046001600160a01b03169063d27beddf90606401600060405180830381600087803b1580156127c057600080fd5b505af11580156127d4573d6000803e3d6000fd5b505060015460405163d27beddf60e01b81526001600160a01b038c811660048301526024820187905260006044830152610100909204909116925063d27beddf9150606401600060405180830381600087803b15801561283357600080fd5b505af1158015612847573d6000803e3d6000fd5b5050600754604051632c2b369760e21b81526001600160a01b038c8116600483015290911692506380d4b1fa91508a9061288d908690859063b0acda5c90602401611c28565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156128d357600080fd5b505af11580156128e7573d6000803e3d6000fd5b505050505b5050505050505050565b600154604051636eb1769f60e11b81526001600160a01b0384811660048301523060248301526000926101009004169063dd62ed3e90604401602060405180830381865afa15801561294c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297091906132c3565b9050600081116129e85760405162461bcd60e51b815260206004820152603f60248201527f4e6f20686179207065726d69736f206461646f2061206e696e67756e6120636160448201527f6e7469646164207061726120706f6e6572207061726120726567616c6f2e200060648201526084016105a0565b818110156129f4578091505b6001546040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201859052610100909204909116906323b872dd906064016020604051808303816000875af1158015612a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a779190613590565b50600354612a859083612a8d565b600355505050565b600080612a9a83856132b0565b9050838110156118f35760405162461bcd60e51b815260206004820152600a60248201526921202863203e3d20612960b01b60448201526064016105a0565b6000600460009054906101000a90046001600160a01b03166001600160a01b03166364b1e3e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5291906132c3565b905060005b612b6260018361361f565b9150600082126108675760048054604051633e62601d60e01b81529182018490526001600160a01b031690633e62601d90602401602060405180830381865afa158015612bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd79190613267565b600754604051632c2b369760e21b81526001600160a01b0380841660048301529293506000929091169063b0acda5c90602401602060405180830381865afa158015612c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4b91906132c3565b11612cb9576004805460405163406a58fd60e11b81526001600160a01b0384811693820193909352600060248201529116906380d4b1fa90604401600060405180830381600087803b158015612ca057600080fd5b505af1158015612cb4573d6000803e3d6000fd5b505050505b612b57565b600082821115612cfd5760405162461bcd60e51b815260206004820152600a60248201526921202862203c3d20612960b01b60448201526064016105a0565b6118f3828461343d565b6000808211612d445760405162461bcd60e51b815260206004820152600960248201526821202862203e20302960b81b60448201526064016105a0565b6000612d508385613566565b9050612d5c838561363f565b612d668285613539565b612d7091906132b0565b84146118f35760405162461bcd60e51b815260206004820152601660248201527521202861203d3d2062202a2063202b2061202520622960501b60448201526064016105a0565b828054828255906000526020600020908101928215612df2579160200282015b82811115612df2578251825591602001919060010190612dd7565b50612dfe929150612e96565b5090565b828054828255906000526020600020908101928215612df25760005260206000209182015b82811115612df2578254825591600101919060010190612e27565b508054612e4e906132dc565b6000825580601f10612e5e575050565b601f0160209004906000526020600020908101906105b39190612e96565b50805460008255906000526020600020908101906105b391905b5b80821115612dfe5760008155600101612e97565b600060208284031215612ebd57600080fd5b5035919050565b6001600160a01b03811681146105b357600080fd5b600060208284031215612eeb57600080fd5b81356118f381612ec4565b60008060408385031215612f0957600080fd5b8235612f1481612ec4565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310612f5a57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612f8757600080fd5b813567ffffffffffffffff80821115612fa257612fa2612f60565b604051601f8301601f19908116603f01168101908282118183101715612fca57612fca612f60565b81604052838152866020858801011115612fe357600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561301957600080fd5b843561302481612ec4565b9350602085013567ffffffffffffffff8082111561304157600080fd5b61304d88838901612f76565b9450604087013591508082111561306357600080fd5b5061307087828801612f76565b925050606085013561308181612ec4565b939692955090935050565b60005b838110156130a757818101518382015260200161308f565b50506000910152565b60018060a01b038416815260606020820152600083518060608401526130dd81608085016020880161308c565b604083019390935250601f91909101601f19160160800192915050565b60008060006060848603121561310f57600080fd5b833561311a81612ec4565b9250602084013567ffffffffffffffff8082111561313757600080fd5b61314387838801612f76565b9350604086013591508082111561315957600080fd5b5061316686828701612f76565b9150509250925092565b60008060006060848603121561318557600080fd5b833567ffffffffffffffff8082111561319d57600080fd5b6131a987838801612f76565b945060208601359150808211156131bf57600080fd5b506131cc86828701612f76565b92505060408401356131dd81612ec4565b809150509250925092565b6020808252601b908201527f456c20636f6e747261746f206e6f20657374612061637469766f2e0000000000604082015260600190565b60208082526028908201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360408201526703a3930b237b917160c51b606082015260800190565b60006020828403121561327957600080fd5b81516118f381612ec4565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156118f6576118f661329a565b6000602082840312156132d557600080fd5b5051919050565b600181811c908216806132f057607f821691505b60208210810361331057634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561335c57600081815260208120601f850160051c8101602086101561333d5750805b601f850160051c820191505b81811015611df357828155600101613349565b505050565b815167ffffffffffffffff81111561337b5761337b612f60565b61338f8161338984546132dc565b84613316565b602080601f8311600181146133c457600084156133ac5750858301515b600019600386901b1c1916600185901b178555611df3565b600085815260208120601f198616915b828110156133f3578886015182559484019460019091019084016133d4565b50858210156134115787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000825161343381846020870161308c565b9190910192915050565b818103818111156118f6576118f661329a565b81810361345b575050565b61346582546132dc565b67ffffffffffffffff81111561347d5761347d612f60565b61348b8161338984546132dc565b6000601f8211600181146134bf57600083156134a75750848201545b600019600385901b1c1916600184901b17845561066a565b600085815260209020601f19841690600086815260209020845b838110156134f957828601548255600195860195909101906020016134d9565b50858310156134115793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b80820281158282048414176118f6576118f661329a565b634e487b7160e01b600052601260045260246000fd5b60008261357557613575613550565b500490565b634e487b7160e01b600052600160045260246000fd5b6000602082840312156135a257600080fd5b815180151581146118f357600080fd5b60208082526047908201527f4e6f206861207265676973747261646f20656c20656d61696c20656e20656c2060408201527f736572766963696f2044454d2028446972656363696f6e657320456d61696c20606082015266026b0b8309497160cd1b608082015260a00190565b8181036000831280158383131683831282161715610a8657610a8661329a565b60008261364e5761364e613550565b50069056fea26469706673582212204c735c6b1fb94acab889ce7ce3476586ebddda36fa4538d897c72523cbfdc2c364736f6c63430008110033608060405234801561001057600080fd5b507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e15009167604051610070906020808252601e908201527f6172696d617061735f61645f756973202d3e20636f6e7374727563746f720000604082015260600190565b60405180910390a161061d806100876000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806374afc8d71161006657806374afc8d71461011557806380d4b1fa1461013857806387e4c8211461014b578063b0acda5c1461015e578063c11879691461018757600080fd5b806330a11371146100a357806338d94193146100b85780633e62601d146100e857806364b1e3e8146100fb578063715a0ae91461010d575b600080fd5b6100b66100b13660046104ed565b6101a7565b005b6100cb6100c6366004610517565b610206565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cb6100f6366004610517565b610230565b6000545b6040519081526020016100df565b6100b66102b4565b610128610123366004610530565b610345565b60405190151581526020016100df565b6100b66101463660046104ed565b6103b1565b6100b6610159366004610530565b6103bb565b6100ff61016c366004610530565b6001600160a01b031660009081526001602052604090205490565b6100ff610195366004610530565b60016020526000908152604090205481565b6001600160a01b0390911660008181526001602081905260408220939093558054928301815580527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b0319169091179055565b6000818154811061021657600080fd5b6000918252602090912001546001600160a01b0316905081565b6000805482106102865760405162461bcd60e51b815260206004820152601960248201527f506f736963696f6e2066756572612064652072616e676f2e2000000000000000604482015260640160405180910390fd5b6000828154811061029957610299610552565b6000918252602090912001546001600160a01b031692915050565b600054805b6102c460018261057e565b90506000811261034157600160008083815481106102e4576102e4610552565b60009182526020808320909101546001600160a01b03168352820192909252604001812081905580548061031a5761031a6105a5565b600082815260209020810160001990810180546001600160a01b03191690550190556102b9565b5050565b6000805481905b808210156103a757836001600160a01b03166000838154811061037157610371610552565b6000918252602090912001546001600160a01b031603610395575060019392505050565b6103a08260016105bb565b915061034c565b5060009392505050565b61034182826101a7565b6001600160a01b038116600090815260016020526040812081905580545b808210156104cc57826001600160a01b0316600083815481106103fe576103fe610552565b6000918252602090912001546001600160a01b0316036104ba5760006104256001836105d4565b8154811061043557610435610552565b600091825260208220015481546001600160a01b0390911691908490811061045f5761045f610552565b6000918252602082200180546001600160a01b0319166001600160a01b039390931692909217909155805480610497576104976105a5565b600082815260209020810160001990810180546001600160a01b03191690550190555b6104c58260016105bb565b91506103d9565b505050565b80356001600160a01b03811681146104e857600080fd5b919050565b6000806040838503121561050057600080fd5b610509836104d1565b946020939093013593505050565b60006020828403121561052957600080fd5b5035919050565b60006020828403121561054257600080fd5b61054b826104d1565b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103600083128015838313168383128216171561059e5761059e610568565b5092915050565b634e487b7160e01b600052603160045260246000fd5b808201808211156105ce576105ce610568565b92915050565b818103818111156105ce576105ce61056856fea26469706673582212203372aa8f6d894bd93f47e30695d8d937302608bd7596d5741de4cc4626fe103964736f6c63430008110033a3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e15009167";

    public static final String FUNC_ACL_ARRAY = "acl_array";

    public static final String FUNC_ACTIVAR = "activar";

    public static final String FUNC_actualizar_administrador_usuario_clave_direccion = "actualizar_administrador_usuario_clave_direccion";

    public static final String FUNC_borrar_administrador = "borrar_administrador";

    public static final String FUNC_CREAR_ADMINISTRADOR = "crear_administrador";

    public static final String FUNC_devolver_prestamo = "devolver_prestamo";

    public static final String FUNC_DIRECCIONES_EMAILS_MAPA = "direcciones_emails_mapa";

    public static final String FUNC_ESTADO = "estado";

    public static final String FUNC_I_ERC20_EXTRA = "i_erc20_extra";

    public static final String FUNC_INACTIVAR = "inactivar";

    public static final String FUNC_LEER_ADMINISTRADOR_POS = "leer_administrador_pos";

    public static final String FUNC_LEER_ADMINISTRADORES_NUM = "leer_administradores_num";

    public static final String FUNC_leer_cantidad_prestamo = "leer_cantidad_prestamo";

    public static final String FUNC_leer_cantidad_regalo = "leer_cantidad_regalo";

    public static final String FUNC_LEER_DIRECCIONES_PRESTAMO_NUM = "leer_direcciones_prestamo_num";

    public static final String FUNC_LEER_DIRECCIONES_PRESTAMO_POS = "leer_direcciones_prestamo_pos";

    public static final String FUNC_LEER_DIRECCIONES_REGALO_NUM = "leer_direcciones_regalo_num";

    public static final String FUNC_LEER_DIRECCIONES_REGALO_POS = "leer_direcciones_regalo_pos";

    public static final String FUNC_LEER_PRESTAMO_PUNTOS_INTERES_A_RETENER = "leer_prestamo_puntos_interes_a_retener";

    public static final String FUNC_LIBERAR_REGALO = "liberar_regalo";

    public static final String FUNC_LIMITAR = "limitar";

    public static final String FUNC_pedir_prestamo = "pedir_prestamo";

    public static final String FUNC_pedir_regalo = "pedir_regalo";

    public static final String FUNC_PONER_DIRECCIONES_EMAILS_MAPA = "poner_direcciones_emails_mapa";

    public static final String FUNC_PONER_ERC20_PRINCIPAL = "poner_erc20_principal";

    public static final String FUNC_poner_para_regalo = "poner_para_regalo";

    public static final String FUNC_PONER_PRESTAMO_PUNTOS_INTERES_A_RETENER = "poner_prestamo_puntos_interes_a_retener";

    public static final String FUNC_PONER_REGALO_MAXIMO_POR_DIRECCION = "poner_regalo_maximo_por_direccion";

    public static final String FUNC_PONER_REGALO_MAXIMO_POR_PRESTAMO = "poner_regalo_maximo_por_prestamo";

    public static final String FUNC_PONER_TIEMPO_INICIO_REGALOS = "poner_tiempo_inicio_regalos";

    public static final String FUNC_PRESTAMO_MAXIMO_POR_DIRECCION_NUM = "prestamo_maximo_por_direccion_num";

    public static final String FUNC_PRESTAMO_PUNTOS_INTERES_A_RETENER = "prestamo_puntos_interes_a_retener";

    public static final String FUNC_REGALO_CON_PARTE_EN_EL_BALANCE_NUM = "regalo_con_parte_en_el_balance_num";

    public static final String FUNC_REGALO_MAXIMO_POR_DIRECCION_NUM = "regalo_maximo_por_direccion_num";

    public static final String FUNC_SER_ADMINISTRADOR = "ser_administrador";

    public static final String FUNC_TIEMPO_INICIO_REGALOS = "tiempo_inicio_regalos";

    public static final Event AD_AD_U_EVENT = new Event("Ad_ad_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event AD_U_U_EVENT = new Event("Ad_u_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event DEVOLVER_PRESTAMO_EVENT = new Event("Devolver_prestamo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event MENSAJE_EVENT = new Event("Mensaje", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event OK_EVENT = new Event("Ok", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected Kalorias_faucets(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Kalorias_faucets(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Kalorias_faucets(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Kalorias_faucets(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<Ad_ad_uEventResponse> getAd_ad_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_AD_U_EVENT, transactionReceipt);
        ArrayList<Ad_ad_uEventResponse> responses = new ArrayList<Ad_ad_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.origen = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.destino = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_ad_uEventResponse getAd_ad_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_AD_U_EVENT, log);
        Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
        typedResponse.log = log;
        typedResponse.origen = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.destino = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_ad_uEventFromLog(log));
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_AD_U_EVENT));
        return ad_ad_uEventFlowable(filter);
    }

    public static List<Ad_u_uEventResponse> getAd_u_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_U_U_EVENT, transactionReceipt);
        ArrayList<Ad_u_uEventResponse> responses = new ArrayList<Ad_u_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_u_uEventResponse typedResponse = new Ad_u_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.direccion = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_u_uEventResponse getAd_u_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_U_U_EVENT, log);
        Ad_u_uEventResponse typedResponse = new Ad_u_uEventResponse();
        typedResponse.log = log;
        typedResponse.direccion = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_u_uEventResponse> ad_u_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_u_uEventFromLog(log));
    }

    public Flowable<Ad_u_uEventResponse> ad_u_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_U_U_EVENT));
        return ad_u_uEventFlowable(filter);
    }

    public static List<Devolver_prestamoEventResponse> getDevolver_prestamoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEVOLVER_PRESTAMO_EVENT, transactionReceipt);
        ArrayList<Devolver_prestamoEventResponse> responses = new ArrayList<Devolver_prestamoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Devolver_prestamoEventResponse typedResponse = new Devolver_prestamoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Devolver_prestamoEventResponse getDevolver_prestamoEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEVOLVER_PRESTAMO_EVENT, log);
        Devolver_prestamoEventResponse typedResponse = new Devolver_prestamoEventResponse();
        typedResponse.log = log;
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<Devolver_prestamoEventResponse> devolver_prestamoEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDevolver_prestamoEventFromLog(log));
    }

    public Flowable<Devolver_prestamoEventResponse> devolver_prestamoEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEVOLVER_PRESTAMO_EVENT));
        return devolver_prestamoEventFlowable(filter);
    }

    public static List<MensajeEventResponse> getMensajeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MENSAJE_EVENT, transactionReceipt);
        ArrayList<MensajeEventResponse> responses = new ArrayList<MensajeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MensajeEventResponse typedResponse = new MensajeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MensajeEventResponse getMensajeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MENSAJE_EVENT, log);
        MensajeEventResponse typedResponse = new MensajeEventResponse();
        typedResponse.log = log;
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMensajeEventFromLog(log));
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MENSAJE_EVENT));
        return mensajeEventFlowable(filter);
    }

    public static List<OkEventResponse> getOkEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OK_EVENT, transactionReceipt);
        ArrayList<OkEventResponse> responses = new ArrayList<OkEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OkEventResponse typedResponse = new OkEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OkEventResponse getOkEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OK_EVENT, log);
        OkEventResponse typedResponse = new OkEventResponse();
        typedResponse.log = log;
        typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<OkEventResponse> okEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOkEventFromLog(log));
    }

    public Flowable<OkEventResponse> okEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OK_EVENT));
        return okEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple3<String, String, byte[]>> acl_array(BigInteger param0) {
        final Function function = new Function(FUNC_ACL_ARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteFunctionCall<Tuple3<String, String, byte[]>>(function,
                new Callable<Tuple3<String, String, byte[]>>() {
                    @Override
                    public Tuple3<String, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> activar() {
        final Function function = new Function(
                FUNC_ACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String direccion, String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador() {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador(String direccion) {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crear_administrador(String direccion, String usuario, byte[] clave) {
        final Function function = new Function(
                FUNC_CREAR_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> devolver_prestamo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_devolver_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> devolver_prestamo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_devolver_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> direcciones_emails_mapa() {
        final Function function = new Function(FUNC_DIRECCIONES_EMAILS_MAPA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> estado() {
        final Function function = new Function(FUNC_ESTADO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> i_erc20_extra() {
        final Function function = new Function(FUNC_I_ERC20_EXTRA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> inactivar() {
        final Function function = new Function(
                FUNC_INACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> leer_administrador_pos(String direccion) {
        final Function function = new Function(FUNC_LEER_ADMINISTRADOR_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_administradores_num() {
        final Function function = new Function(FUNC_LEER_ADMINISTRADORES_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_prestamo() {
        final Function function = new Function(FUNC_leer_cantidad_prestamo, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_prestamo(String direccion) {
        final Function function = new Function(FUNC_leer_cantidad_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_regalo(String direccion) {
        final Function function = new Function(FUNC_leer_cantidad_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_regalo() {
        final Function function = new Function(FUNC_leer_cantidad_regalo, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_direcciones_prestamo_num() {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_PRESTAMO_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> leer_direcciones_prestamo_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_PRESTAMO_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> leer_direcciones_regalo_num() {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_REGALO_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> leer_direcciones_regalo_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_REGALO_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> leer_prestamo_puntos_interes_a_retener() {
        final Function function = new Function(FUNC_LEER_PRESTAMO_PUNTOS_INTERES_A_RETENER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> liberar_regalo(String direccion) {
        final Function function = new Function(
                FUNC_LIBERAR_REGALO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> limitar() {
        final Function function = new Function(
                FUNC_LIMITAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_prestamo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_prestamo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_regalo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_regalo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_direcciones_emails_mapa(String _direcciones_emails_mapa) {
        final Function function = new Function(
                FUNC_PONER_DIRECCIONES_EMAILS_MAPA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_erc20_principal(String nuevo_erc20) {
        final Function function = new Function(
                FUNC_PONER_ERC20_PRINCIPAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nuevo_erc20)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_para_regalo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_poner_para_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_para_regalo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_poner_para_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_prestamo_puntos_interes_a_retener(BigInteger puntos_porcentuales) {
        final Function function = new Function(
                FUNC_PONER_PRESTAMO_PUNTOS_INTERES_A_RETENER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(puntos_porcentuales)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_regalo_maximo_por_direccion(BigInteger _regalo_maximo_por_direccion_num) {
        final Function function = new Function(
                FUNC_PONER_REGALO_MAXIMO_POR_DIRECCION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_regalo_maximo_por_direccion_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_regalo_maximo_por_prestamo(BigInteger _prestamo_maximo_por_direccion_num) {
        final Function function = new Function(
                FUNC_PONER_REGALO_MAXIMO_POR_PRESTAMO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_prestamo_maximo_por_direccion_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_tiempo_inicio_regalos() {
        final Function function = new Function(
                FUNC_PONER_TIEMPO_INICIO_REGALOS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> prestamo_maximo_por_direccion_num() {
        final Function function = new Function(FUNC_PRESTAMO_MAXIMO_POR_DIRECCION_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> prestamo_puntos_interes_a_retener() {
        final Function function = new Function(FUNC_PRESTAMO_PUNTOS_INTERES_A_RETENER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> regalo_con_parte_en_el_balance_num() {
        final Function function = new Function(FUNC_REGALO_CON_PARTE_EN_EL_BALANCE_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> regalo_maximo_por_direccion_num() {
        final Function function = new Function(FUNC_REGALO_MAXIMO_POR_DIRECCION_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> ser_administrador(String direccion) {
        final Function function = new Function(FUNC_SER_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> tiempo_inicio_regalos() {
        final Function function = new Function(FUNC_TIEMPO_INICIO_REGALOS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static Kalorias_faucets load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias_faucets(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Kalorias_faucets load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias_faucets(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Kalorias_faucets load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Kalorias_faucets(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Kalorias_faucets load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Kalorias_faucets(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class Ad_ad_uEventResponse extends BaseEventResponse {
        public String origen;

        public String destino;

        public BigInteger cantidad;

        public String mensaje;
    }

    public static class Ad_u_uEventResponse extends BaseEventResponse {
        public String direccion;

        public BigInteger cantidad;

        public BigInteger id;

        public String mensaje;
    }

    public static class Devolver_prestamoEventResponse extends BaseEventResponse {
        public String mensaje;

        public BigInteger cantidad;
    }

    public static class MensajeEventResponse extends BaseEventResponse {
        public String mensaje;
    }

    public static class OkEventResponse extends BaseEventResponse {
        public Boolean es;

        public String mensaje;
    }
}
