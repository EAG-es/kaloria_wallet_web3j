package innui.web3j.generated.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.8.
 */
@SuppressWarnings("rawtypes")
public class Kalorias_faucets extends Contract {
    public static final String BINARY = "60806040526001805460ff1916811790553480156200001d57600080fd5b5060405162004521380380620045218339810160408190526200004091620005eb565b600080516020620045018339815191526040516200008f9060208082526018908201527f6d696e696261736573202d3e20636f6e7374727563746f720000000000000000604082015260600190565b60405180910390a16040805160808101825260606020808301828152600084860152828401929092523383528351808501855260048152631c9bdbdd60e21b918101919091529052905169726f6f745f636c61766560b01b8152600290600a01602060405180830381855afa1580156200010d573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906200013291906200062a565b6040828101919091528051600180825281830190925290602080830190803683375050506060820181905280516d7065726d69736f5f6d6178696d6f60901b91906000906200018557620001856200065a565b60209081029190910181019190915260008054600181018255908052825160049091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039093166001600160a01b03199093169290921782559183015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401906200021f9082620006ff565b506040820151600282015560608201518051620002479160038401916020909101906200055d565b5050505060008051602062004501833981519152604051620002a79060208082526024908201527f6572633230735f6578747261735f66617563657473202d3e20636f6e7374727560408201526331ba37b960e11b606082015260800190565b60405180910390a1604051620002bd90620005ad565b604051809103906000f080158015620002da573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b03929092169190911790556040516200030990620005ad565b604051809103906000f08015801562000326573d6000803e3d6000fd5b50600780546001600160a01b03929092166001600160a01b0319909216919091179055426009556103e86006556040516000805160206200450183398151915290620003a3906020808252601f908201527f6b616c6f726961735f66617563657473202d3e20636f6e7374727563746f7200604082015260600190565b60405180910390a1620003b562000429565b60018054610100600160a81b0319166101006001600160a01b038581169190910291909117909155600880546001600160a01b0319169183169190911790556103e8600655633663a52060028190556200041d906005620004a2602090811b62001fa017901c565b600555506200084a9050565b6200043433620004ec565b620004965760405162461bcd60e51b815260206004820152602860248201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360448201526703a3930b237b917160c51b606482015260840160405180910390fd5b6001805460ff19169055565b600082600003620004b657506000620004e6565b6000620004c48385620007e1565b905082620004d38583620007fb565b14620004e357620004e36200081e565b90505b92915050565b600080805b6000548110156200055657600081815481106200051257620005126200065a565b60009182526020909120600490910201546001600160a01b039081169085160362000541576001915062000556565b6200054e81600162000834565b9050620004f1565b5092915050565b8280548282559060005260206000209081019282156200059b579160200282015b828111156200059b5782518255916020019190600101906200057e565b50620005a9929150620005bb565b5090565b6106a48062003e5d83390190565b5b80821115620005a95760008155600101620005bc565b6001600160a01b0381168114620005e857600080fd5b50565b60008060408385031215620005ff57600080fd5b82516200060c81620005d2565b60208401519092506200061f81620005d2565b809150509250929050565b6000602082840312156200063d57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c908216806200068557607f821691505b602082108103620006a657634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620006fa57600081815260208120601f850160051c81016020861015620006d55750805b601f850160051c820191505b81811015620006f657828155600101620006e1565b5050505b505050565b81516001600160401b038111156200071b576200071b62000644565b62000733816200072c845462000670565b84620006ac565b602080601f8311600181146200076b5760008415620007525750858301515b600019600386901b1c1916600185901b178555620006f6565b600085815260208120601f198616915b828110156200079c578886015182559484019460019091019084016200077b565b5085821015620007bb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620004e657620004e6620007cb565b6000826200081957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052600160045260246000fd5b80820180821115620004e657620004e6620007cb565b613603806200085a6000396000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c806364915f8011610151578063a9a4079c116100c3578063e2ea116f11610087578063e2ea116f1461050e578063e3dbc94414610521578063e6828e1b14610534578063ed7bddc314610547578063f5a571361461054f578063f9d06c4d1461055757600080fd5b8063a9a4079c146104db578063b2be353c146104ee578063b776a7a2146104f6578063b9a456e1146104fe578063c49c3d051461050657600080fd5b80637f04dcc9116101155780637f04dcc91461045a5780637ffcbe501461046d5780638e3ee7ba1461048057806391c6a581146104a257806397aefa5b146104b557806397e865c4146104c857600080fd5b806364915f801461040a578063688e3467146104125780636a0fdd491461042c57806378a2252b1461043f5780637b318b6e1461044757600080fd5b80633470e932116101ea5780634cb64acf116101ae5780634cb64acf146103a75780634dc46437146103ba578063531a3352146103dd57806353a913b0146103e65780635e979800146103ef5780636354a8ef1461040257600080fd5b80633470e9321461034d578063367b943c1461036557806337cd86f81461037857806342134c491461038b5780634c3539c61461039e57600080fd5b806318cf46111161023c57806318cf4611146102f057806319e012b0146103035780631d032d011461030c57806324b5b0931461031f5780632dd47cac1461033257806333aadfcd1461033a57600080fd5b80630de62ad6146102795780631320ec511461028e57806313893106146102be57806314314188146102c6578063171d602f146102d9575b600080fd5b61028c610287366004612e0c565b61056a565b005b6008546102a1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61028c6105b6565b61028c6102d4366004612e3a565b6105e1565b6102e260095481565b6040519081526020016102b5565b6102a16102fe366004612e0c565b61066d565b6102e260035481565b6102e261031a366004612e3a565b610708565b61028c61032d366004612e0c565b6107b9565b61028c6109ea565b61028c610348366004612e57565b610a25565b6001546102a19061010090046001600160a01b031681565b61028c610373366004612e0c565b610a58565b61028c610386366004612e3a565b610b1b565b6102e2610399366004612e3a565b610b62565b6102e260055481565b61028c6103b5366004612e0c565b610bfa565b6103cd6103c8366004612e3a565b610c95565b60405190151581526020016102b5565b6102e260065481565b6102e260025481565b61028c6103fd366004612e57565b610cfd565b6102e2611022565b6102e2611060565b60015461041f9060ff1681565b6040516102b59190612e99565b61028c61043a366004612e0c565b611109565b6102e2611149565b61028c610455366004612f64565b6111a1565b6102a1610468366004612e0c565b61137e565b61028c61047b366004612e3a565b6113d6565b61049361048e366004612e0c565b611423565b6040516102b593929190613011565b61028c6104b0366004612e0c565b6114eb565b6102e26104c3366004612e3a565b611515565b61028c6104d6366004612e57565b61156e565b61028c6104e936600461305b565b61172a565b61028c611953565b61028c611aae565b6102e2611ae4565b61028c611b52565b61028c61051c366004612e0c565b611b8a565b61028c61052f3660046130d1565b611bb4565b61028c610542366004612e57565b611ce5565b6102e2611d14565b6102e2611d8e565b61028c610565366004612e3a565b611dcc565b600060015460ff16600281111561058357610583612e83565b146105a95760405162461bcd60e51b81526004016105a090613149565b60405180910390fd5b6105b33382611fe1565b50565b6105bf33610c95565b6105db5760405162461bcd60e51b81526004016105a090613180565b42600955565b6105ea33610c95565b6106065760405162461bcd60e51b81526004016105a090613180565b6004805460405163406a58fd60e11b81526001600160a01b03909116916380d4b1fa91610638918591600091016131c8565b600060405180830381600087803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b5050505050565b600061067833610c95565b6106945760405162461bcd60e51b81526004016105a090613180565b60048054604051633e62601d60e01b81529182018490526001600160a01b031690633e62601d906024015b602060405180830381865afa1580156106dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070091906131e1565b90505b919050565b60008060015460ff16600281111561072257610722612e83565b1461073f5760405162461bcd60e51b81526004016105a090613149565b6000805b60005481101561079f5760008181548110610760576107606131fe565b60009182526020909120600490910201546001600160a01b039081169085160361078d576001915061079f565b61079881600161322a565b9050610743565b81156107ae5791506107039050565b506000199392505050565b600060015460ff1660028111156107d2576107d2612e83565b146107ef5760405162461bcd60e51b81526004016105a090613149565b600754604051632c2b369760e21b815233600482015282916001600160a01b03169063b0acda5c90602401602060405180830381865afa158015610837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085b919061323d565b10156108d057600754604051632c2b369760e21b81523360048201526001600160a01b039091169063b0acda5c90602401602060405180830381865afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd919061323d565b90505b60015460405163a9059cbb60e01b81526101009091046001600160a01b03169063a9059cbb9061090690309085906004016131c8565b6020604051808303816000875af1158015610925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109499190613256565b50600754604051632c2b369760e21b815233600482018190526001600160a01b03909216916380d4b1fa916109cd908590859063b0acda5c906024015b602060405180830381865afa1580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c7919061323d565b906124b3565b6040518363ffffffff1660e01b81526004016106389291906131c8565b6109f333610c95565b610a0f5760405162461bcd60e51b81526004016105a090613180565b600180546000919060ff191681835b0217905550565b610a2e33610c95565b610a4a5760405162461bcd60e51b81526004016105a090613180565b610a5482826124fc565b5050565b600060015460ff166002811115610a7157610a71612e83565b14610a8e5760405162461bcd60e51b81526004016105a090613149565b60015460405163a9059cbb60e01b81526101009091046001600160a01b03169063a9059cbb90610ac490309085906004016131c8565b6020604051808303816000875af1158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b079190613256565b50600354610b159082612a3b565b60035550565b610b2433610c95565b610b405760405162461bcd60e51b81526004016105a090613180565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6000610b6d33610c95565b610b895760405162461bcd60e51b81526004016105a090613180565b60048054604051632c2b369760e21b81526001600160a01b038581169382019390935291169063b0acda5c906024015b602060405180830381865afa158015610bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610700919061323d565b610c0333610c95565b610c1f5760405162461bcd60e51b81526004016105a090613180565b612710811115610c905760405162461bcd60e51b815260206004820152603660248201527f4c6f732050756e746f7320706f7263656e7475616c657320646562656e2073656044820152750391034b73332b934b7b932b9903090189818181817160551b60648201526084016105a0565b600655565b600080805b600054811015610cf65760008181548110610cb757610cb76131fe565b60009182526020909120600490910201546001600160a01b0390811690851603610ce45760019150610cf6565b610cef81600161322a565b9050610c9a565b5092915050565b610d0633610c95565b610d225760405162461bcd60e51b81526004016105a090613180565b600154604051636eb1769f60e11b81526001600160a01b0384811660048301523060248301526000926101009004169063dd62ed3e90604401602060405180830381865afa158015610d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9c919061323d565b905060008111610e235760405162461bcd60e51b815260206004820152604660248201527f4e6f20686179207065726d69736f206461646f2061206e696e67756e6120636160448201527f6e74696461642070617261206465766f6c756369c3b36e206465207072c3a97360648201526503a30b6b797160d51b608482015260a4016105a0565b600754604051632c2b369760e21b81526001600160a01b0385811660048301528492169063b0acda5c90602401602060405180830381865afa158015610e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e91919061323d565b1015610f0857600754604051632c2b369760e21b81526001600160a01b0385811660048301529091169063b0acda5c90602401602060405180830381865afa158015610ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f05919061323d565b91505b6001546040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201859052610100909204909116906323b872dd906064016020604051808303816000875af1158015610f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8b9190613256565b50600754604051632c2b369760e21b81526001600160a01b038581166004830152909116906380d4b1fa908590610fce908690859063b0acda5c90602401610986565b6040518363ffffffff1660e01b8152600401610feb9291906131c8565b600060405180830381600087803b15801561100557600080fd5b505af1158015611019573d6000803e3d6000fd5b50505050505050565b60008060015460ff16600281111561103c5761103c612e83565b146110595760405162461bcd60e51b81526004016105a090613149565b5060065490565b60008060015460ff16600281111561107a5761107a612e83565b146110975760405162461bcd60e51b81526004016105a090613149565b600754604051632c2b369760e21b81523360048201526001600160a01b039091169063b0acda5c906024015b602060405180830381865afa1580156110e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611104919061323d565b905090565b600060015460ff16600281111561112257611122612e83565b1461113f5760405162461bcd60e51b81526004016105a090613149565b6105b333826124fc565b600061115433610c95565b6111705760405162461bcd60e51b81526004016105a090613180565b60048054604051632c2b369760e21b815233928101929092526001600160a01b03169063b0acda5c906024016110c3565b6111aa33610c95565b6111c65760405162461bcd60e51b81526004016105a090613180565b60005460021061123e5760405162461bcd60e51b815260206004820152603e60248201527f536f6c6f207365207065726d6974652061637475616c697a617220736920686160448201527f79206d617320646520646f732061646d696e6973747261646f7265732e20000060648201526084016105a0565b600061124985610708565b9050600081121561126c5760405162461bcd60e51b81526004016105a090613180565b8351156112a6578360008281548110611287576112876131fe565b906000526020600020906004020160010190816112a491906132fd565b505b825115611326576002836040516112bd91906133bd565b602060405180830381855afa1580156112da573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906112fd919061323d565b60008281548110611310576113106131fe565b9060005260206000209060040201600201819055505b6001600160a01b03821615610666578160008281548110611349576113496131fe565b6000918252602090912060049091020180546001600160a01b0319166001600160a01b03929092169190911790555050505050565b600061138933610c95565b6113a55760405162461bcd60e51b81526004016105a090613180565b600754604051633e62601d60e01b8152600481018490526001600160a01b0390911690633e62601d906024016106bf565b6113df33610c95565b6113fb5760405162461bcd60e51b81526004016105a090613180565b600180546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6000818154811061143357600080fd5b6000918252602090912060049091020180546001820180546001600160a01b0390921693509061146290613278565b80601f016020809104026020016040519081016040528092919081815260200182805461148e90613278565b80156114db5780601f106114b0576101008083540402835291602001916114db565b820191906000526020600020905b8154815290600101906020018083116114be57829003601f168201915b5050505050908060020154905083565b6114f433610c95565b6115105760405162461bcd60e51b81526004016105a090613180565b600255565b600061152033610c95565b61153c5760405162461bcd60e51b81526004016105a090613180565b600754604051632c2b369760e21b81526001600160a01b0384811660048301529091169063b0acda5c90602401610bb9565b61157733610c95565b6115935760405162461bcd60e51b81526004016105a090613180565b600154604051636eb1769f60e11b81526001600160a01b0384811660048301523060248301526000926101009004169063dd62ed3e90604401602060405180830381865afa1580156115e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160d919061323d565b9050600081116116855760405162461bcd60e51b815260206004820152603f60248201527f4e6f20686179207065726d69736f206461646f2061206e696e67756e6120636160448201527f6e7469646164207061726120706f6e6572207061726120726567616c6f2e200060648201526084016105a0565b81811015611691578091505b6001546040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201859052610100909204909116906323b872dd906064016020604051808303816000875af11580156116f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117149190613256565b506003546117229083612a3b565b600355505050565b61173333610c95565b61174f5760405162461bcd60e51b81526004016105a090613180565b6000805b6000548110156117af5760008181548110611770576117706131fe565b60009182526020909120600490910201546001600160a01b039081169086160361179d57600191506117af565b6117a881600161322a565b9050611753565b811561181b5760405162461bcd60e51b815260206004820152603560248201527f4573612064697265636369c3b36e2064652061646d696e6973747261646f722060448201527403cb09032b9ba61d0903932b3b4b9ba3930b230971605d1b60648201526084016105a0565b604080516080810182526000818301526060808201526001600160a01b03871681526020810186905290516002906118549086906133bd565b602060405180830381855afa158015611871573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611894919061323d565b60408201526000805460018101825590805281517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563600490920291820180546001600160a01b0319166001600160a01b03909216919091178155602083015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564019061192290826132fd565b506040820151600282015560608201518051611948916003840191602090910190612d18565b505050505050505050565b61195c33610c95565b6119785760405162461bcd60e51b81526004016105a090613180565b600061198333610708565b905060008112156119a65760405162461bcd60e51b81526004016105a090613180565b600080546119b6906001906133d9565b815481106119c6576119c66131fe565b9060005260206000209060040201600082815481106119e7576119e76131fe565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180820190611a28908401826133ec565b50600282015481600201556003820181600301908054611a49929190612d63565b509050506000805480611a5e57611a5e6134bf565b60008281526020812060046000199093019283020180546001600160a01b031916815590611a8f6001830182612da3565b6002820160009055600382016000611aa79190612ddd565b5050905550565b611ab733610c95565b611ad35760405162461bcd60e51b81526004016105a090613180565b60018054819060ff19168180610a1e565b6000611aef33610c95565b611b0b5760405162461bcd60e51b81526004016105a090613180565b6004805460408051630c963c7d60e31b815290516001600160a01b03909216926364b1e3e89282820192602092908290030181865afa1580156110e0573d6000803e3d6000fd5b611b5b33610c95565b611b775760405162461bcd60e51b81526004016105a090613180565b600180546002919060ff19168183610a1e565b611b9333610c95565b611baf5760405162461bcd60e51b81526004016105a090613180565b600555565b611bbd33610c95565b611bd95760405162461bcd60e51b81526004016105a090613180565b336000611be582610708565b90506000811215611c085760405162461bcd60e51b81526004016105a090613180565b845115611c42578460008281548110611c2357611c236131fe565b90600052602060002090600402016001019081611c4091906132fd565b505b835115611cc257600284604051611c5991906133bd565b602060405180830381855afa158015611c76573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c99919061323d565b60008281548110611cac57611cac6131fe565b9060005260206000209060040201600201819055505b6001600160a01b03831615610666578260008281548110611349576113496131fe565b611cee33610c95565b611d0a5760405162461bcd60e51b81526004016105a090613180565b610a548282611fe1565b6000611d1f33610c95565b611d3b5760405162461bcd60e51b81526004016105a090613180565b600760009054906101000a90046001600160a01b03166001600160a01b03166364b1e3e86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110e0573d6000803e3d6000fd5b60008060015460ff166002811115611da857611da8612e83565b14611dc55760405162461bcd60e51b81526004016105a090613149565b5060005490565b611dd533610c95565b611df15760405162461bcd60e51b81526004016105a090613180565b600054600210611e695760405162461bcd60e51b815260206004820152603a60248201527f536f6c6f207365207065726d69746520626f7272617220736920686179206d6160448201527f7320646520646f732061646d696e6973747261646f7265732e2000000000000060648201526084016105a0565b6000611e7482610708565b90506000811215611e975760405162461bcd60e51b81526004016105a090613180565b60008054611ea7906001906133d9565b81548110611eb757611eb76131fe565b906000526020600020906004020160008281548110611ed857611ed86131fe565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180820190611f19908401826133ec565b50600282015481600201556003820181600301908054611f3a929190612d63565b509050506000805480611f4f57611f4f6134bf565b60008281526020812060046000199093019283020180546001600160a01b031916815590611f806001830182612da3565b6002820160009055600382016000611f989190612ddd565b505090555050565b600082600003611fb257506000611fdb565b6000611fbe83856134d5565b905082611fcb8583613502565b14611fd857611fd8613516565b90505b92915050565b600954600090611ff5906301e13380612a3b565b90508042111561200757612007612a87565b60048054604051632c2b369760e21b81526001600160a01b03868116938201939093526000929091169063b0acda5c90602401602060405180830381865afa158015612057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207b919061323d565b905060025481106120f45760405162461bcd60e51b815260206004820152603960248201527f5961206120616c63616e7a61646f20656c206dc3a178696d6f20706f7369626c60448201527f652064652063616e746964616420646520726567616c6f2e200000000000000060648201526084016105a0565b60085460405163ec72a5db60e01b81526001600160a01b0386811660048301529091169063ec72a5db90602401602060405180830381865afa15801561213e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121629190613256565b61217e5760405162461bcd60e51b81526004016105a09061352c565b60025483906000906121908484612a3b565b11156121a6576002546121a390846124b3565b91505b600354156123a6576001546040516370a0823160e01b815230600482015260009161010090046001600160a01b0316906370a0823190602401602060405180830381865afa1580156121fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612220919061323d565b905080156123a05760035481111561223757506003545b8281101561224f5761224983826124b3565b91508092505b60015460405163a9059cbb60e01b81526101009091046001600160a01b03169063a9059cbb90612285908a9087906004016131c8565b6020604051808303816000875af11580156122a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c89190613256565b5060048054604051632c2b369760e21b81526001600160a01b038a8116938201939093529116906380d4b1fa908990612350908790859063b0acda5c906024015b602060405180830381865afa158015612326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234a919061323d565b90612a3b565b6040518363ffffffff1660e01b815260040161236d9291906131c8565b600060405180830381600087803b15801561238757600080fd5b505af115801561239b573d6000803e3d6000fd5b505050505b506123a9565b50805b80156124ab576001546040516345b1769b60e11b81526101009091046001600160a01b031690638b62ed36906123e590899085906004016131c8565b600060405180830381600087803b1580156123ff57600080fd5b505af1158015612413573d6000803e3d6000fd5b505060048054604051632c2b369760e21b81526001600160a01b038b811693820193909352911692506380d4b1fa9150889061245b908590859063b0acda5c90602401612309565b6040518363ffffffff1660e01b81526004016124789291906131c8565b600060405180830381600087803b15801561249257600080fd5b505af11580156124a6573d6000803e3d6000fd5b505050505b505050505050565b6000828211156124f25760405162461bcd60e51b815260206004820152600a60248201526921202862203c3d20612960b01b60448201526064016105a0565b611fd882846133d9565b600060015460ff16600281111561251557612515612e83565b146125325760405162461bcd60e51b81526004016105a090613149565b600954600090612546906301e13380612a3b565b90508042111561255857612558612a87565b600754604051632c2b369760e21b81526001600160a01b038581166004830152600092169063b0acda5c90602401602060405180830381865afa1580156125a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c7919061323d565b905060055481106126405760405162461bcd60e51b815260206004820152603c60248201527f5961206120616c63616e7a61646f20656c206dc3a178696d6f20706f7369626c60448201527f652064652063616e746964616420656e20707265c59b74616d6f2e200000000060648201526084016105a0565b60085460405163ec72a5db60e01b81526001600160a01b0386811660048301529091169063ec72a5db90602401602060405180830381865afa15801561268a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ae9190613256565b6126ca5760405162461bcd60e51b81526004016105a09061352c565b60055483906126d98383612a3b565b11156126ef576005546126ec90836124b3565b90505b6001546040516370a0823160e01b815230600482015260009161010090046001600160a01b0316906370a0823190602401602060405180830381865afa15801561273d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612761919061323d565b905060008061277b60065485611fa090919063ffffffff16565b905061278981612710612c68565b905061279584826124b3565b935082156128c557838310156127b5576127af84846124b3565b91508293505b60015460405163a9059cbb60e01b81526101009091046001600160a01b03169063a9059cbb906127eb908b9088906004016131c8565b6020604051808303816000875af115801561280a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282e9190613256565b50600754604051632c2b369760e21b81526001600160a01b038a81166004830152909116906380d4b1fa908a90612871908890859063b0acda5c90602401612309565b6040518363ffffffff1660e01b815260040161288e9291906131c8565b600060405180830381600087803b1580156128a857600080fd5b505af11580156128bc573d6000803e3d6000fd5b505050506128c9565b8391505b8115612a31576001546040516345b1769b60e11b81526101009091046001600160a01b031690638b62ed369061290590309085906004016131c8565b600060405180830381600087803b15801561291f57600080fd5b505af1158015612933573d6000803e3d6000fd5b50506001546040516345b1769b60e11b81526101009091046001600160a01b03169250638b62ed36915061296d908b9086906004016131c8565b600060405180830381600087803b15801561298757600080fd5b505af115801561299b573d6000803e3d6000fd5b5050600754604051632c2b369760e21b81526001600160a01b038c8116600483015290911692506380d4b1fa91508a906129e1908690859063b0acda5c90602401612309565b6040518363ffffffff1660e01b81526004016129fe9291906131c8565b600060405180830381600087803b158015612a1857600080fd5b505af1158015612a2c573d6000803e3d6000fd5b505050505b5050505050505050565b600080612a48838561322a565b905083811015611fd85760405162461bcd60e51b815260206004820152600a60248201526921202863203e3d20612960b01b60448201526064016105a0565b6000600460009054906101000a90046001600160a01b03166001600160a01b03166364b1e3e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b00919061323d565b905060005b612b10600183613599565b915060008212610a545760048054604051633e62601d60e01b81529182018490526001600160a01b031690633e62601d90602401602060405180830381865afa158015612b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8591906131e1565b600754604051632c2b369760e21b81526001600160a01b0380841660048301529293506000929091169063b0acda5c90602401602060405180830381865afa158015612bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf9919061323d565b11612c63576004805460405163406a58fd60e11b81526001600160a01b03909116916380d4b1fa91612c30918591600091016131c8565b600060405180830381600087803b158015612c4a57600080fd5b505af1158015612c5e573d6000803e3d6000fd5b505050505b612b05565b6000808211612ca55760405162461bcd60e51b815260206004820152600960248201526821202862203e20302960b81b60448201526064016105a0565b6000612cb18385613502565b9050612cbd83856135b9565b612cc782856134d5565b612cd1919061322a565b8414611fd85760405162461bcd60e51b815260206004820152601660248201527521202861203d3d2062202a2063202b2061202520622960501b60448201526064016105a0565b828054828255906000526020600020908101928215612d53579160200282015b82811115612d53578251825591602001919060010190612d38565b50612d5f929150612df7565b5090565b828054828255906000526020600020908101928215612d535760005260206000209182015b82811115612d53578254825591600101919060010190612d88565b508054612daf90613278565b6000825580601f10612dbf575050565b601f0160209004906000526020600020908101906105b39190612df7565b50805460008255906000526020600020908101906105b391905b5b80821115612d5f5760008155600101612df8565b600060208284031215612e1e57600080fd5b5035919050565b6001600160a01b03811681146105b357600080fd5b600060208284031215612e4c57600080fd5b8135611fd881612e25565b60008060408385031215612e6a57600080fd5b8235612e7581612e25565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310612ebb57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612ee857600080fd5b813567ffffffffffffffff80821115612f0357612f03612ec1565b604051601f8301601f19908116603f01168101908282118183101715612f2b57612f2b612ec1565b81604052838152866020858801011115612f4457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215612f7a57600080fd5b8435612f8581612e25565b9350602085013567ffffffffffffffff80821115612fa257600080fd5b612fae88838901612ed7565b94506040870135915080821115612fc457600080fd5b50612fd187828801612ed7565b9250506060850135612fe281612e25565b939692955090935050565b60005b83811015613008578181015183820152602001612ff0565b50506000910152565b60018060a01b0384168152606060208201526000835180606084015261303e816080850160208801612fed565b604083019390935250601f91909101601f19160160800192915050565b60008060006060848603121561307057600080fd5b833561307b81612e25565b9250602084013567ffffffffffffffff8082111561309857600080fd5b6130a487838801612ed7565b935060408601359150808211156130ba57600080fd5b506130c786828701612ed7565b9150509250925092565b6000806000606084860312156130e657600080fd5b833567ffffffffffffffff808211156130fe57600080fd5b61310a87838801612ed7565b9450602086013591508082111561312057600080fd5b5061312d86828701612ed7565b925050604084013561313e81612e25565b809150509250925092565b6020808252601c908201527f456c20636f6e747261746f206e6f20657374c3a12061637469766f2e00000000604082015260600190565b60208082526028908201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360408201526703a3930b237b917160c51b606082015260800190565b6001600160a01b03929092168252602082015260400190565b6000602082840312156131f357600080fd5b8151611fd881612e25565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115611fdb57611fdb613214565b60006020828403121561324f57600080fd5b5051919050565b60006020828403121561326857600080fd5b81518015158114611fd857600080fd5b600181811c9082168061328c57607f821691505b6020821081036132ac57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156132f857600081815260208120601f850160051c810160208610156132d95750805b601f850160051c820191505b818110156124ab578281556001016132e5565b505050565b815167ffffffffffffffff81111561331757613317612ec1565b61332b816133258454613278565b846132b2565b602080601f83116001811461336057600084156133485750858301515b600019600386901b1c1916600185901b1785556124ab565b600085815260208120601f198616915b8281101561338f57888601518255948401946001909101908401613370565b50858210156133ad5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516133cf818460208701612fed565b9190910192915050565b81810381811115611fdb57611fdb613214565b8181036133f7575050565b6134018254613278565b67ffffffffffffffff81111561341957613419612ec1565b613427816133258454613278565b6000601f82116001811461345b57600083156134435750848201545b600019600385901b1c1916600184901b178455610666565b600085815260209020601f19841690600086815260209020845b838110156134955782860154825560019586019590910190602001613475565b50858310156133ad5793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b8082028115828204841417611fdb57611fdb613214565b634e487b7160e01b600052601260045260246000fd5b600082613511576135116134ec565b500490565b634e487b7160e01b600052600160045260246000fd5b60208082526047908201527f4e6f206861207265676973747261646f20656c20656d61696c20656e20656c2060408201527f736572766963696f2044454d2028446972656363696f6e657320456d61696c20606082015266026b0b8309497160cd1b608082015260a00190565b8181036000831280158383131683831282161715610cf657610cf6613214565b6000826135c8576135c86134ec565b50069056fea264697066735822122057d4d928a60af472b106cbe276166abbf3d4811e113f3abe6f4895732faa35a464736f6c63430008110033608060405234801561001057600080fd5b507fb0184c63645b05365f5a9db2ca685229262033018ed42c77d2aa445d1026e10f604051610070906020808252601e908201527f6172696d617061735f61645f756973202d3e20636f6e7374727563746f720000604082015260600190565b60405180910390a161061d806100876000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806374afc8d71161006657806374afc8d71461011557806380d4b1fa1461013857806387e4c8211461014b578063b0acda5c1461015e578063c11879691461018757600080fd5b806330a11371146100a357806338d94193146100b85780633e62601d146100e857806364b1e3e8146100fb578063715a0ae91461010d575b600080fd5b6100b66100b13660046104ed565b6101a7565b005b6100cb6100c6366004610517565b610206565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cb6100f6366004610517565b610230565b6000545b6040519081526020016100df565b6100b66102b4565b610128610123366004610530565b610345565b60405190151581526020016100df565b6100b66101463660046104ed565b6103b1565b6100b6610159366004610530565b6103bb565b6100ff61016c366004610530565b6001600160a01b031660009081526001602052604090205490565b6100ff610195366004610530565b60016020526000908152604090205481565b6001600160a01b0390911660008181526001602081905260408220939093558054928301815580527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b0319169091179055565b6000818154811061021657600080fd5b6000918252602090912001546001600160a01b0316905081565b6000805482106102865760405162461bcd60e51b815260206004820152601a60248201527f506f73696369c3b36e2066756572612064652072616e676f2e20000000000000604482015260640160405180910390fd5b6000828154811061029957610299610552565b6000918252602090912001546001600160a01b031692915050565b600054805b6102c460018261057e565b90506000811261034157600160008083815481106102e4576102e4610552565b60009182526020808320909101546001600160a01b03168352820192909252604001812081905580548061031a5761031a6105a5565b600082815260209020810160001990810180546001600160a01b03191690550190556102b9565b5050565b6000805481905b808210156103a757836001600160a01b03166000838154811061037157610371610552565b6000918252602090912001546001600160a01b031603610395575060019392505050565b6103a08260016105bb565b915061034c565b5060009392505050565b61034182826101a7565b6001600160a01b038116600090815260016020526040812081905580545b808210156104cc57826001600160a01b0316600083815481106103fe576103fe610552565b6000918252602090912001546001600160a01b0316036104ba5760006104256001836105d4565b8154811061043557610435610552565b600091825260208220015481546001600160a01b0390911691908490811061045f5761045f610552565b6000918252602082200180546001600160a01b0319166001600160a01b039390931692909217909155805480610497576104976105a5565b600082815260209020810160001990810180546001600160a01b03191690550190555b6104c58260016105bb565b91506103d9565b505050565b80356001600160a01b03811681146104e857600080fd5b919050565b6000806040838503121561050057600080fd5b610509836104d1565b946020939093013593505050565b60006020828403121561052957600080fd5b5035919050565b60006020828403121561054257600080fd5b61054b826104d1565b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103600083128015838313168383128216171561059e5761059e610568565b5092915050565b634e487b7160e01b600052603160045260246000fd5b808201808211156105ce576105ce610568565b92915050565b818103818111156105ce576105ce61056856fea26469706673582212203b621350495a4de1227b2d4b8e3e56b984974de780c2fdc438ee8c3508aaa96364736f6c63430008110033a3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e15009167";

    public static final String FUNC_ACL_ARRAY = "acl_array";

    public static final String FUNC_ACTIVAR = "activar";

    public static final String FUNC_actualizar_administrador_usuario_clave_direccion = "actualizar_administrador_usuario_clave_direccion";

    public static final String FUNC_borrar_administrador = "borrar_administrador";

    public static final String FUNC_CREAR_ADMINISTRADOR = "crear_administrador";

    public static final String FUNC_devolver_prestamo = "devolver_prestamo";

    public static final String FUNC_DIRECCIONES_EMAILS_MAPA = "direcciones_emails_mapa";

    public static final String FUNC_ESTADO = "estado";

    public static final String FUNC_I_ERC20_EXTRA = "i_erc20_extra";

    public static final String FUNC_INACTIVAR = "inactivar";

    public static final String FUNC_LEER_ADMINISTRADOR_POS = "leer_administrador_pos";

    public static final String FUNC_LEER_ADMINISTRADORES_NUM = "leer_administradores_num";

    public static final String FUNC_leer_cantidad_prestamo = "leer_cantidad_prestamo";

    public static final String FUNC_leer_cantidad_regalo = "leer_cantidad_regalo";

    public static final String FUNC_LEER_DIRECCIONES_PRESTAMO_NUM = "leer_direcciones_prestamo_num";

    public static final String FUNC_LEER_DIRECCIONES_PRESTAMO_POS = "leer_direcciones_prestamo_pos";

    public static final String FUNC_LEER_DIRECCIONES_REGALO_NUM = "leer_direcciones_regalo_num";

    public static final String FUNC_LEER_DIRECCIONES_REGALO_POS = "leer_direcciones_regalo_pos";

    public static final String FUNC_LEER_PRESTAMO_PUNTOS_INTERES_A_RETENER = "leer_prestamo_puntos_interes_a_retener";

    public static final String FUNC_LIBERAR_REGALO = "liberar_regalo";

    public static final String FUNC_LIMITAR = "limitar";

    public static final String FUNC_pedir_prestamo = "pedir_prestamo";

    public static final String FUNC_pedir_regalo = "pedir_regalo";

    public static final String FUNC_PONER_DIRECCIONES_EMAILS_MAPA = "poner_direcciones_emails_mapa";

    public static final String FUNC_PONER_ERC20_PRINCIPAL = "poner_erc20_principal";

    public static final String FUNC_poner_para_regalo = "poner_para_regalo";

    public static final String FUNC_PONER_PRESTAMO_PUNTOS_INTERES_A_RETENER = "poner_prestamo_puntos_interes_a_retener";

    public static final String FUNC_PONER_REGALO_MAXIMO_POR_DIRECCION = "poner_regalo_maximo_por_direccion";

    public static final String FUNC_PONER_REGALO_MAXIMO_POR_PRESTAMO = "poner_regalo_maximo_por_prestamo";

    public static final String FUNC_PONER_TIEMPO_INICIO_REGALOS = "poner_tiempo_inicio_regalos";

    public static final String FUNC_PRESTAMO_MAXIMO_POR_DIRECCION_NUM = "prestamo_maximo_por_direccion_num";

    public static final String FUNC_PRESTAMO_PUNTOS_INTERES_A_RETENER = "prestamo_puntos_interes_a_retener";

    public static final String FUNC_REGALO_CON_PARTE_EN_EL_BALANCE_NUM = "regalo_con_parte_en_el_balance_num";

    public static final String FUNC_REGALO_MAXIMO_POR_DIRECCION_NUM = "regalo_maximo_por_direccion_num";

    public static final String FUNC_SER_ADMINISTRADOR = "ser_administrador";

    public static final String FUNC_TIEMPO_INICIO_REGALOS = "tiempo_inicio_regalos";

    public static final Event MENSAJE_EVENT = new Event("Mensaje", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected Kalorias_faucets(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Kalorias_faucets(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Kalorias_faucets(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Kalorias_faucets(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<MensajeEventResponse> getMensajeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MENSAJE_EVENT, transactionReceipt);
        ArrayList<MensajeEventResponse> responses = new ArrayList<MensajeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MensajeEventResponse typedResponse = new MensajeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MensajeEventResponse getMensajeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MENSAJE_EVENT, log);
        MensajeEventResponse typedResponse = new MensajeEventResponse();
        typedResponse.log = log;
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMensajeEventFromLog(log));
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MENSAJE_EVENT));
        return mensajeEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple3<String, String, byte[]>> acl_array(BigInteger param0) {
        final Function function = new Function(FUNC_ACL_ARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteFunctionCall<Tuple3<String, String, byte[]>>(function,
                new Callable<Tuple3<String, String, byte[]>>() {
                    @Override
                    public Tuple3<String, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> activar() {
        final Function function = new Function(
                FUNC_ACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String direccion, String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador() {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador(String direccion) {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crear_administrador(String direccion, String usuario, byte[] clave) {
        final Function function = new Function(
                FUNC_CREAR_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> devolver_prestamo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_devolver_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> devolver_prestamo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_devolver_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> direcciones_emails_mapa() {
        final Function function = new Function(FUNC_DIRECCIONES_EMAILS_MAPA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> estado() {
        final Function function = new Function(FUNC_ESTADO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> i_erc20_extra() {
        final Function function = new Function(FUNC_I_ERC20_EXTRA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> inactivar() {
        final Function function = new Function(
                FUNC_INACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> leer_administrador_pos(String direccion) {
        final Function function = new Function(FUNC_LEER_ADMINISTRADOR_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_administradores_num() {
        final Function function = new Function(FUNC_LEER_ADMINISTRADORES_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_prestamo() {
        final Function function = new Function(FUNC_leer_cantidad_prestamo, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_prestamo(String direccion) {
        final Function function = new Function(FUNC_leer_cantidad_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_regalo(String direccion) {
        final Function function = new Function(FUNC_leer_cantidad_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_cantidad_regalo() {
        final Function function = new Function(FUNC_leer_cantidad_regalo, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_direcciones_prestamo_num() {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_PRESTAMO_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> leer_direcciones_prestamo_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_PRESTAMO_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> leer_direcciones_regalo_num() {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_REGALO_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> leer_direcciones_regalo_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_REGALO_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> leer_prestamo_puntos_interes_a_retener() {
        final Function function = new Function(FUNC_LEER_PRESTAMO_PUNTOS_INTERES_A_RETENER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> liberar_regalo(String direccion) {
        final Function function = new Function(
                FUNC_LIBERAR_REGALO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> limitar() {
        final Function function = new Function(
                FUNC_LIMITAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_prestamo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_prestamo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_prestamo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_regalo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pedir_regalo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_pedir_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_direcciones_emails_mapa(String _direcciones_emails_mapa) {
        final Function function = new Function(
                FUNC_PONER_DIRECCIONES_EMAILS_MAPA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_erc20_principal(String nuevo_erc20) {
        final Function function = new Function(
                FUNC_PONER_ERC20_PRINCIPAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nuevo_erc20)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_para_regalo(BigInteger cantidad) {
        final Function function = new Function(
                FUNC_poner_para_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_para_regalo(String direccion, BigInteger cantidad) {
        final Function function = new Function(
                FUNC_poner_para_regalo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.generated.Uint256(cantidad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_prestamo_puntos_interes_a_retener(BigInteger puntos_porcentuales) {
        final Function function = new Function(
                FUNC_PONER_PRESTAMO_PUNTOS_INTERES_A_RETENER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(puntos_porcentuales)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_regalo_maximo_por_direccion(BigInteger _regalo_maximo_por_direccion_num) {
        final Function function = new Function(
                FUNC_PONER_REGALO_MAXIMO_POR_DIRECCION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_regalo_maximo_por_direccion_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_regalo_maximo_por_prestamo(BigInteger _prestamo_maximo_por_direccion_num) {
        final Function function = new Function(
                FUNC_PONER_REGALO_MAXIMO_POR_PRESTAMO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_prestamo_maximo_por_direccion_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_tiempo_inicio_regalos() {
        final Function function = new Function(
                FUNC_PONER_TIEMPO_INICIO_REGALOS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> prestamo_maximo_por_direccion_num() {
        final Function function = new Function(FUNC_PRESTAMO_MAXIMO_POR_DIRECCION_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> prestamo_puntos_interes_a_retener() {
        final Function function = new Function(FUNC_PRESTAMO_PUNTOS_INTERES_A_RETENER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> regalo_con_parte_en_el_balance_num() {
        final Function function = new Function(FUNC_REGALO_CON_PARTE_EN_EL_BALANCE_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> regalo_maximo_por_direccion_num() {
        final Function function = new Function(FUNC_REGALO_MAXIMO_POR_DIRECCION_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> ser_administrador(String direccion) {
        final Function function = new Function(FUNC_SER_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> tiempo_inicio_regalos() {
        final Function function = new Function(FUNC_TIEMPO_INICIO_REGALOS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static Kalorias_faucets load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias_faucets(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Kalorias_faucets load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Kalorias_faucets(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Kalorias_faucets load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Kalorias_faucets(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Kalorias_faucets load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Kalorias_faucets(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Kalorias_faucets> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _i_erc20s_extra, String _direcciones_emails_mapa) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _i_erc20s_extra), 
                new org.web3j.abi.datatypes.Address(160, _direcciones_emails_mapa)));
        return deployRemoteCall(Kalorias_faucets.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class MensajeEventResponse extends BaseEventResponse {
        public String mensaje;
    }
}
