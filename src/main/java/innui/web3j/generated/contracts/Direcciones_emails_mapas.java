package innui.web3j.generated.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.8.
 */
@SuppressWarnings("rawtypes")
public class Direcciones_emails_mapas extends Contract {
    public static final String BINARY = "60806040526001805460ff1916811790553480156200001d57600080fd5b5060008051602062004f0f8339815191526040516200006d9060208082526018908201527f6d696e696261736573202d3e20636f6e7374727563746f720000000000000000604082015260600190565b60405180910390a16040805160808101825260606020808301828152600084860152828401929092523383528351808501855260048152631c9bdbdd60e21b918101919091529052905169726f6f745f636c61766560b01b8152600290600a01602060405180830381855afa158015620000eb573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906200011091906200041f565b6040828101919091528051600180825281830190925290602080830190803683375050506060820181905280516d7065726d69736f5f6d6178696d6f60901b91906000906200016357620001636200044f565b60209081029190910181019190915260008054600181018255908052825160049091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039093166001600160a01b03199093169290921782559183015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5640190620001fd9082620004f4565b506040820151600282015560608201518051620002259160038401916020909101906200039c565b5050505060008051602062004f0f833981519152604051620002879060208082526026908201527f62696172696d617061735f61645f73745f73745f616473202d3e20636f6e7374604082015265393ab1ba37b960d11b606082015260800190565b60405180910390a16040516200029d90620003ec565b604051809103906000f080158015620002ba573d6000803e3d6000fd5b506001806101000a8154816001600160a01b0302191690836001600160a01b03160217905550604051620002ee90620003fa565b604051809103906000f0801580156200030b573d6000803e3d6000fd5b50600280546001600160a01b03929092166001600160a01b031990921691909117905560405160008051602062004f0f833981519152906200038e9060208082526027908201527f646972656363696f6e65735f656d61696c735f6d61706173202d3e20636f6e736040820152663a393ab1ba37b960c91b606082015260800190565b60405180910390a1620005c0565b828054828255906000526020600020908101928215620003da579160200282015b82811115620003da578251825591602001919060010190620003bd565b50620003e892915062000408565b5090565b610db180620030aa83390190565b6110b48062003e5b83390190565b5b80821115620003e8576000815560010162000409565b6000602082840312156200043257600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c908216806200047a57607f821691505b6020821081036200049b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004ef57600081815260208120601f850160051c81016020861015620004ca5750805b601f850160051c820191505b81811015620004eb57828155600101620004d6565b5050505b505050565b81516001600160401b0381111562000510576200051062000439565b620005288162000521845462000465565b84620004a1565b602080601f831160018114620005605760008415620005475750858301515b600019600386901b1c1916600185901b178555620004eb565b600085815260208120601f198616915b82811015620005915788860151825594840194600190910190840162000570565b5085821015620005b05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612ada80620005d06000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c80638e3ee7ba1161013b578063c49c3d05116100b8578063ec72a5db1161007c578063ec72a5db146104ba578063f5a57136146104cd578063f9c99f79146104d5578063f9d06c4d146104ed578063fde12e311461050057600080fd5b8063c49c3d0514610466578063cabbdd321461046e578063d0dac26314610481578063de660d3b14610494578063e3dbc944146104a757600080fd5b8063aca7c0d0116100ff578063aca7c0d014610428578063b0bcaeb21461043b578063b2be353c14610443578063b776a7a21461044b578063ba19f56f1461045357600080fd5b80638e3ee7ba146103ba5780639570c475146103dc578063a1a04952146103ef578063a9a4079c14610402578063abd60afd1461041557600080fd5b806364b1e3e8116101c9578063715a0ae91161018d578063715a0ae91461037157806378500f12146103795780637b318b6e1461038c5780637b5fef861461039f578063879d541a146103a757600080fd5b806364b1e3e814610316578063667538081461031e578063688e3467146103315780636bb9d38a1461034b5780636c92cef31461035e57600080fd5b80632e9a7ff6116102105780632e9a7ff61461028d5780634dc46437146102a257806351bf9e63146102c5578063590331d1146102d857806363ef0c20146102eb57600080fd5b80631d032d01146102425780632b59d1fc146102685780632d4adcd9146102725780632dd47cac14610285575b600080fd5b610255610250366004612244565b610513565b6040519081526020015b60405180910390f35b6102706105d2565b005b61027061028036600461232d565b610615565b61027061065a565b610295610695565b60405161025f91906123ba565b6102b56102b0366004612244565b6106a5565b604051901515815260200161025f565b6102706102d336600461232d565b61070d565b6102956102e63660046123cd565b610717565b6102fe6102f936600461232d565b61074d565b6040516001600160a01b03909116815260200161025f565b61025561078d565b6102b561032c36600461232d565b6107bc565b60015461033e9060ff1681565b60405161025f91906123fc565b610270610359366004612244565b61082e565b61027061036c36600461232d565b61085c565b61027061099b565b610295610387366004612244565b6109ca565b61027061039a366004612424565b610a0b565b6102b5610be9565b6102fe6103b53660046123cd565b610bf4565b6103cd6103c83660046123cd565b610c24565b60405161025f939291906124ad565b6002546102fe906001600160a01b031681565b6102706103fd3660046124e1565b610cec565b610270610410366004612531565b610d1b565b6102706104233660046124e1565b610f42565b6102706104363660046125a7565b61125c565b61027061153a565b610270611543565b61027061169e565b6102956104613660046123cd565b6116d4565b610270611747565b6102b561047c36600461232d565b61177f565b61029561048f366004612244565b6117bf565b6102706104a236600461232d565b6117f7565b6102706104b53660046125f9565b611801565b6102b56104c8366004612244565b611932565b610255611972565b6001546102fe9061010090046001600160a01b031681565b6102706104fb366004612244565b6119b0565b61027061050e36600461232d565b611b84565b60008060015460ff16600281111561052d5761052d6123e6565b146105535760405162461bcd60e51b815260040161054a90612671565b60405180910390fd5b6000805b6000548110156105b35760008181548110610574576105746126a8565b60009182526020909120600490910201546001600160a01b03908116908516036105a157600191506105b3565b6105ac8160016126d4565b9050610557565b81156105c25791506105cd9050565b506000199392505050565b919050565b600060015460ff1660028111156105eb576105eb6123e6565b146106085760405162461bcd60e51b815260040161054a90612671565b3361061281611bb2565b50565b600060015460ff16600281111561062e5761062e6123e6565b1461064b5760405162461bcd60e51b815260040161054a90612671565b336106568183611cc2565b5050565b610663336106a5565b61067f5760405162461bcd60e51b815260040161054a906126e7565b600180546000919060ff191681835b0217905550565b60606106a0336117bf565b905090565b600080805b60005481101561070657600081815481106106c7576106c76126a8565b60009182526020909120600490910201546001600160a01b03908116908516036106f45760019150610706565b6106ff8160016126d4565b90506106aa565b5092915050565b610612813361125c565b6060610722336106a5565b61073e5760405162461bcd60e51b815260040161054a906126e7565b610747826116d4565b92915050565b60008060015460ff166002811115610767576107676123e6565b146107845760405162461bcd60e51b815260040161054a90612671565b61074782611f13565b6000610798336106a5565b6107b45760405162461bcd60e51b815260040161054a906126e7565b6106a0611f85565b60025460405163a70fca8d60e01b81526000916001600160a01b03169063a70fca8d906107ed9085906004016123ba565b602060405180830381865afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610747919061272f565b610837336106a5565b6108535760405162461bcd60e51b815260040161054a906126e7565b61061281611bb2565b600254604051634773bc3d60e01b81526000916001600160a01b031690634773bc3d9061088d9085906004016123ba565b602060405180830381865afa1580156108aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ce9190612751565b6002546040516385148fd360e01b81529192506001600160a01b0316906385148fd3906108ff9085906004016123ba565b600060405180830381600087803b15801561091957600080fd5b505af115801561092d573d6000803e3d6000fd5b50506001546040516387e4c82160e01b81526001600160a01b03858116600483015261010090920490911692506387e4c82191506024015b600060405180830381600087803b15801561097f57600080fd5b505af1158015610993573d6000803e3d6000fd5b505050505050565b6109a4336106a5565b6109c05760405162461bcd60e51b815260040161054a906126e7565b6109c8611ffc565b565b6060600060015460ff1660028111156109e5576109e56123e6565b14610a025760405162461bcd60e51b815260040161054a90612671565b610747826117bf565b610a14336106a5565b610a305760405162461bcd60e51b815260040161054a906126e7565b600054600210610aa85760405162461bcd60e51b815260206004820152603e60248201527f536f6c6f207365207065726d6974652061637475616c697a617220736920686160448201527f79206d617320646520646f732061646d696e6973747261646f7265732e200000606482015260840161054a565b6000610ab385610513565b90506000811215610ad65760405162461bcd60e51b815260040161054a906126e7565b835115610b10578360008281548110610af157610af16126a8565b90600052602060002090600402016001019081610b0e91906127ee565b505b825115610b9057600283604051610b2791906128ae565b602060405180830381855afa158015610b44573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610b6791906128ca565b60008281548110610b7a57610b7a6126a8565b9060005260206000209060040201600201819055505b6001600160a01b03821615610be2578160008281548110610bb357610bb36126a8565b6000918252602090912060049091020180546001600160a01b0319166001600160a01b03929092169190911790555b5050505050565b60006106a033611932565b6000610bff336106a5565b610c1b5760405162461bcd60e51b815260040161054a906126e7565b610747826120cc565b60008181548110610c3457600080fd5b6000918252602090912060049091020180546001820180546001600160a01b03909216935090610c639061276e565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8f9061276e565b8015610cdc5780601f10610cb157610100808354040283529160200191610cdc565b820191906000526020600020905b815481529060010190602001808311610cbf57829003601f168201915b5050505050908060020154905083565b610cf5336106a5565b610d115760405162461bcd60e51b815260040161054a906126e7565b6106568282611cc2565b610d24336106a5565b610d405760405162461bcd60e51b815260040161054a906126e7565b6000805b600054811015610da05760008181548110610d6157610d616126a8565b60009182526020909120600490910201546001600160a01b0390811690861603610d8e5760019150610da0565b610d998160016126d4565b9050610d44565b8115610e0a5760405162461bcd60e51b815260206004820152603360248201527f45736120646972656363696f6e2064652061646d696e6973747261646f7220796044820152720309032b9ba30903932b3b4b9ba3930b230971606d1b606482015260840161054a565b604080516080810182526000818301526060808201526001600160a01b0387168152602081018690529051600290610e439086906128ae565b602060405180830381855afa158015610e60573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610e8391906128ca565b60408201526000805460018101825590805281517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563600490920291820180546001600160a01b0319166001600160a01b03909216919091178155602083015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5640190610f1190826127ee565b506040820151600282015560608201518051610f3791600384019160209091019061213b565b505050505050505050565b6001546040516374afc8d760e01b81526001600160a01b038481166004830152610100909204909116906374afc8d790602401602060405180830381865afa158015610f92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb6919061272f565b6110025760405162461bcd60e51b815260206004820181905260248201527f4c6120646972656363696f6e206e6f206861207369646f206372656164612e20604482015260640161054a565b600154604051632c2b369760e21b81526001600160a01b0384811660048301526000926101009004169063b0acda5c90602401600060405180830381865afa158015611052573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261107a91908101906128e3565b60015460405163561088ab60e01b815291925061010090046001600160a01b03169063561088ab906110b2908690869060040161295a565b600060405180830381600087803b1580156110cc57600080fd5b505af11580156110e0573d6000803e3d6000fd5b50506002546040516385148fd360e01b81526001600160a01b0390911692506385148fd391506111149084906004016123ba565b600060405180830381600087803b15801561112e57600080fd5b505af1158015611142573d6000803e3d6000fd5b505060025460405163a70fca8d60e01b81526001600160a01b03909116925063a70fca8d91506111769085906004016123ba565b602060405180830381865afa158015611193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b7919061272f565b15611225576002546040516326fd900360e21b81526001600160a01b0390911690639bf6400c906111ee908590879060040161297e565b600060405180830381600087803b15801561120857600080fd5b505af115801561121c573d6000803e3d6000fd5b50505050505050565b60025460405163cf1be57160e01b81526001600160a01b039091169063cf1be571906111ee908590879060040161297e565b505050565b60025460405163a70fca8d60e01b81526001600160a01b039091169063a70fca8d9061128c9085906004016123ba565b602060405180830381865afa1580156112a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cd919061272f565b6113195760405162461bcd60e51b815260206004820152601f60248201527f456c20746578746f206e6f206861207369646f207574696c697a61646f2e2000604482015260640161054a565b600254604051634773bc3d60e01b81526000916001600160a01b031690634773bc3d9061134a9086906004016123ba565b602060405180830381865afa158015611367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138b9190612751565b6002546040516326fd900360e21b81529192506001600160a01b031690639bf6400c906113be908690869060040161297e565b600060405180830381600087803b1580156113d857600080fd5b505af11580156113ec573d6000803e3d6000fd5b50506001546040516387e4c82160e01b81526001600160a01b03858116600483015261010090920490911692506387e4c8219150602401600060405180830381600087803b15801561143d57600080fd5b505af1158015611451573d6000803e3d6000fd5b50506001546040516374afc8d760e01b81526001600160a01b03868116600483015261010090920490911692506374afc8d79150602401602060405180830381865afa1580156114a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c9919061272f565b156115045760015460405163561088ab60e01b81526101009091046001600160a01b03169063561088ab906111ee908590879060040161295a565b6001546040516350d024a960e11b81526101009091046001600160a01b03169063a1a04952906111ee908590879060040161295a565b6109c83361082e565b61154c336106a5565b6115685760405162461bcd60e51b815260040161054a906126e7565b600061157333610513565b905060008112156115965760405162461bcd60e51b815260040161054a906126e7565b600080546115a6906001906129a8565b815481106115b6576115b66126a8565b9060005260206000209060040201600082815481106115d7576115d76126a8565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180820190611618908401826129bb565b50600282015481600201556003820181600301908054611639929190612186565b50905050600080548061164e5761164e612a8e565b60008281526020812060046000199093019283020180546001600160a01b03191681559061167f60018301826121c6565b60028201600090556003820160006116979190612200565b5050905550565b6116a7336106a5565b6116c35760405162461bcd60e51b815260040161054a906126e7565b60018054819060ff1916818061068e565b600254604051633e62601d60e01b8152600481018390526060916001600160a01b031690633e62601d906024015b600060405180830381865afa15801561171f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261074791908101906128e3565b611750336106a5565b61176c5760405162461bcd60e51b815260040161054a906126e7565b600180546002919060ff1916818361068e565b60008060015460ff166002811115611799576117996123e6565b146117b65760405162461bcd60e51b815260040161054a90612671565b610747826107bc565b600154604051632c2b369760e21b81526001600160a01b0383811660048301526060926101009004169063b0acda5c90602401611702565b6106123382610f42565b61180a336106a5565b6118265760405162461bcd60e51b815260040161054a906126e7565b33600061183282610513565b905060008112156118555760405162461bcd60e51b815260040161054a906126e7565b84511561188f578460008281548110611870576118706126a8565b9060005260206000209060040201600101908161188d91906127ee565b505b83511561190f576002846040516118a691906128ae565b602060405180830381855afa1580156118c3573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906118e691906128ca565b600082815481106118f9576118f96126a8565b9060005260206000209060040201600201819055505b6001600160a01b03831615610be2578260008281548110610bb357610bb36126a8565b60008060015460ff16600281111561194c5761194c6123e6565b146119695760405162461bcd60e51b815260040161054a90612671565b61074782612103565b60008060015460ff16600281111561198c5761198c6123e6565b146119a95760405162461bcd60e51b815260040161054a90612671565b5060005490565b6119b9336106a5565b6119d55760405162461bcd60e51b815260040161054a906126e7565b600054600210611a4d5760405162461bcd60e51b815260206004820152603a60248201527f536f6c6f207365207065726d69746520626f7272617220736920686179206d6160448201527f7320646520646f732061646d696e6973747261646f7265732e20000000000000606482015260840161054a565b6000611a5882610513565b90506000811215611a7b5760405162461bcd60e51b815260040161054a906126e7565b60008054611a8b906001906129a8565b81548110611a9b57611a9b6126a8565b906000526020600020906004020160008281548110611abc57611abc6126a8565b60009182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180820190611afd908401826129bb565b50600282015481600201556003820181600301908054611b1e929190612186565b509050506000805480611b3357611b33612a8e565b60008281526020812060046000199093019283020180546001600160a01b031916815590611b6460018301826121c6565b6002820160009055600382016000611b7c9190612200565b505090555050565b611b8d336106a5565b611ba95760405162461bcd60e51b815260040161054a906126e7565b6106128161085c565b600154604051632c2b369760e21b81526001600160a01b0383811660048301526000926101009004169063b0acda5c90602401600060405180830381865afa158015611c02573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c2a91908101906128e3565b6001546040516387e4c82160e01b81526001600160a01b038581166004830152929350610100909104909116906387e4c82190602401600060405180830381600087803b158015611c7a57600080fd5b505af1158015611c8e573d6000803e3d6000fd5b50506002546040516385148fd360e01b81526001600160a01b0390911692506385148fd391506109659084906004016123ba565b6001546040516374afc8d760e01b81526001600160a01b038481166004830152610100909204909116906374afc8d790602401602060405180830381865afa158015611d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d36919061272f565b15611d9f5760405162461bcd60e51b815260206004820152603360248201527f4c6120646972656363696f6e207961206861207369646f206372656164612028604482015272032b9ba30b934b0903932b832ba34b23094971606d1b606482015260840161054a565b60025460405163a70fca8d60e01b81526001600160a01b039091169063a70fca8d90611dcf9084906004016123ba565b602060405180830381865afa158015611dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e10919061272f565b15611e795760405162461bcd60e51b815260206004820152603360248201527f456c20746578746f207961206861207369646f207574696c697a61646f2e2028604482015272032b9ba30b934b0903932b832ba34b23794971606d1b606482015260840161054a565b6001546040516350d024a960e11b81526101009091046001600160a01b03169063a1a0495290611eaf908590859060040161295a565b600060405180830381600087803b158015611ec957600080fd5b505af1158015611edd573d6000803e3d6000fd5b505060025460405163cf1be57160e01b81526001600160a01b03909116925063cf1be5719150610965908490869060040161297e565b600254604051634773bc3d60e01b81526000916001600160a01b031690634773bc3d90611f449085906004016123ba565b602060405180830381865afa158015611f61573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107479190612751565b600060018054906101000a90046001600160a01b03166001600160a01b03166364b1e3e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fd8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a091906128ca565b600260009054906101000a90046001600160a01b03166001600160a01b031663715a0ae96040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561204c57600080fd5b505af1158015612060573d6000803e3d6000fd5b5050505060018054906101000a90046001600160a01b03166001600160a01b031663715a0ae96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156120b257600080fd5b505af11580156120c6573d6000803e3d6000fd5b50505050565b600154604051633e62601d60e01b81526004810183905260009161010090046001600160a01b031690633e62601d90602401611f44565b6001546040516374afc8d760e01b81526001600160a01b038381166004830152600092610100900416906374afc8d7906024016107ed565b828054828255906000526020600020908101928215612176579160200282015b8281111561217657825182559160200191906001019061215b565b5061218292915061221a565b5090565b8280548282559060005260206000209081019282156121765760005260206000209182015b828111156121765782548255916001019190600101906121ab565b5080546121d29061276e565b6000825580601f106121e2575050565b601f016020900490600052602060002090810190610612919061221a565b508054600082559060005260206000209081019061061291905b5b80821115612182576000815560010161221b565b6001600160a01b038116811461061257600080fd5b60006020828403121561225657600080fd5b81356122618161222f565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156122a7576122a7612268565b604052919050565b600067ffffffffffffffff8211156122c9576122c9612268565b50601f01601f191660200190565b600082601f8301126122e857600080fd5b81356122fb6122f6826122af565b61227e565b81815284602083860101111561231057600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561233f57600080fd5b813567ffffffffffffffff81111561235657600080fd5b612362848285016122d7565b949350505050565b60005b8381101561238557818101518382015260200161236d565b50506000910152565b600081518084526123a681602086016020860161236a565b601f01601f19169290920160200192915050565b602081526000612261602083018461238e565b6000602082840312156123df57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061241e57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806000806080858703121561243a57600080fd5b84356124458161222f565b9350602085013567ffffffffffffffff8082111561246257600080fd5b61246e888389016122d7565b9450604087013591508082111561248457600080fd5b50612491878288016122d7565b92505060608501356124a28161222f565b939692955090935050565b6001600160a01b03841681526060602082018190526000906124d19083018561238e565b9050826040830152949350505050565b600080604083850312156124f457600080fd5b82356124ff8161222f565b9150602083013567ffffffffffffffff81111561251b57600080fd5b612527858286016122d7565b9150509250929050565b60008060006060848603121561254657600080fd5b83356125518161222f565b9250602084013567ffffffffffffffff8082111561256e57600080fd5b61257a878388016122d7565b9350604086013591508082111561259057600080fd5b5061259d868287016122d7565b9150509250925092565b600080604083850312156125ba57600080fd5b823567ffffffffffffffff8111156125d157600080fd5b6125dd858286016122d7565b92505060208301356125ee8161222f565b809150509250929050565b60008060006060848603121561260e57600080fd5b833567ffffffffffffffff8082111561262657600080fd5b612632878388016122d7565b9450602086013591508082111561264857600080fd5b50612655868287016122d7565b92505060408401356126668161222f565b809150509250925092565b6020808252601b908201527f456c20636f6e747261746f206e6f20657374612061637469766f2e0000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610747576107476126be565b60208082526028908201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360408201526703a3930b237b917160c51b606082015260800190565b60006020828403121561274157600080fd5b8151801515811461226157600080fd5b60006020828403121561276357600080fd5b81516122618161222f565b600181811c9082168061278257607f821691505b6020821081036127a257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561125757600081815260208120601f850160051c810160208610156127cf5750805b601f850160051c820191505b81811015610993578281556001016127db565b815167ffffffffffffffff81111561280857612808612268565b61281c81612816845461276e565b846127a8565b602080601f83116001811461285157600084156128395750858301515b600019600386901b1c1916600185901b178555610993565b600085815260208120601f198616915b8281101561288057888601518255948401946001909101908401612861565b508582101561289e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516128c081846020870161236a565b9190910192915050565b6000602082840312156128dc57600080fd5b5051919050565b6000602082840312156128f557600080fd5b815167ffffffffffffffff81111561290c57600080fd5b8201601f8101841361291d57600080fd5b805161292b6122f6826122af565b81815285602083850101111561294057600080fd5b61295182602083016020860161236a565b95945050505050565b6001600160a01b03831681526040602082018190526000906123629083018461238e565b604081526000612991604083018561238e565b905060018060a01b03831660208301529392505050565b81810381811115610747576107476126be565b8181036129c6575050565b6129d0825461276e565b67ffffffffffffffff8111156129e8576129e8612268565b6129f681612816845461276e565b6000601f821160018114612a2a5760008315612a125750848201545b600019600385901b1c1916600184901b178455610be2565b600085815260209020601f19841690600086815260209020845b83811015612a645782860154825560019586019590910190602001612a44565b508583101561289e5793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220c7663eb8d8766df8f759b9bf2517a98f001571db0e7a37c8506a7fa525badc4064736f6c63430008110033608060405234801561001057600080fd5b507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e15009167604051610070906020808252601e908201527f6172696d617061735f61645f737473202d3e20636f6e7374727563746f720000604082015260600190565b60405180910390a1610d2a806100876000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806364b1e3e8116100a257806387e4c8211161007157806387e4c82114610200578063a1a0495214610213578063b0acda5c14610226578063b38f9adf14610246578063c11879691461024e57600080fd5b806364b1e3e8146101c1578063715a0ae9146101d257806374afc8d7146101da57806377d7b514146101ed57600080fd5b80633e62601d116100de5780633e62601d1461017057806347b68a5d14610183578063561088ab1461019b5780635a701bcc146101ae57600080fd5b8063103b346f146101105780632b59d1fc146101255780632d4adcd91461012d57806338d9419314610140575b600080fd5b61012361011e366004610a09565b610261565b005b610123610288565b61012361013b366004610a57565b610293565b61015361014e366004610a94565b6102a0565b6040516001600160a01b0390911681526020015b60405180910390f35b61015361017e366004610a94565b6102ca565b61018b61034f565b6040519015158152602001610167565b6101236101a9366004610a09565b61035f565b6101236101bc366004610a57565b6103b2565b600054604051908152602001610167565b6101236103bc565b61018b6101e8366004610aad565b610455565b6101236101fb366004610a57565b6104c1565b61012361020e366004610aad565b6104cb565b610123610221366004610a09565b6105e4565b610239610234366004610aad565b6106a5565b6040516101679190610acf565b61023961079c565b61023961025c366004610aad565b6107a7565b600061026d8383610841565b90508015156000036102835761028383836105e4565b505050565b610291336104cb565b565b61029d33826105e4565b50565b600081815481106102b057600080fd5b6000918252602090912001546001600160a01b0316905081565b6000805482106103215760405162461bcd60e51b815260206004820152601960248201527f506f736963696f6e2066756572612064652072616e676f2e200000000000000060448201526064015b60405180910390fd5b6000828154811061033457610334610b1d565b6000918252602090912001546001600160a01b031692915050565b600061035a33610455565b905090565b600061036b8383610841565b9050806102835760405162461bcd60e51b8152602060048201526015602482015274027379032bc34b9ba329032b9b2903b30b637b9171605d1b6044820152606401610318565b61029d338261035f565b600054805b6103cc600182610b49565b90506000811261045157600160008083815481106103ec576103ec610b1d565b60009182526020808320909101546001600160a01b031683528201929092526040018120610419916108fc565b600080548061042a5761042a610b70565b600082815260209020810160001990810180546001600160a01b03191690550190556103c1565b5050565b6000805481905b808210156104b757836001600160a01b03166000838154811061048157610481610b1d565b6000918252602090912001546001600160a01b0316036104a5575060019392505050565b6104b0826001610b86565b915061045c565b5060009392505050565b61029d3382610261565b6001600160a01b03811660009081526001602052604081206104ec916108fc565b600080545b8082101561028357826001600160a01b03166000838154811061051657610516610b1d565b6000918252602090912001546001600160a01b0316036105d257600061053d600183610b99565b8154811061054d5761054d610b1d565b600091825260208220015481546001600160a01b0390911691908490811061057757610577610b1d565b6000918252602082200180546001600160a01b0319166001600160a01b0393909316929092179091558054806105af576105af610b70565b600082815260209020810160001990810180546001600160a01b03191690550190555b6105dd826001610b86565b91506104f1565b6105ed82610455565b156106325760405162461bcd60e51b815260206004820152601560248201527402cb09032bc34b9ba329032b9b2903b30b637b9171605d1b6044820152606401610318565b6001600160a01b03821660009081526001602052604090206106548282610c34565b5050600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0392909216919091179055565b60606106b082610455565b6106f45760405162461bcd60e51b8152602060048201526015602482015274027379032bc34b9ba329032b9b2903b30b637b9171605d1b6044820152606401610318565b6001600160a01b0382166000908152600160205260409020805461071790610bac565b80601f016020809104026020016040519081016040528092919081815260200182805461074390610bac565b80156107905780601f1061076557610100808354040283529160200191610790565b820191906000526020600020905b81548152906001019060200180831161077357829003601f168201915b50505050509050919050565b606061035a336106a5565b600160205260009081526040902080546107c090610bac565b80601f01602080910402602001604051908101604052809291908181526020018280546107ec90610bac565b80156108395780601f1061080e57610100808354040283529160200191610839565b820191906000526020600020905b81548152906001019060200180831161081c57829003601f168201915b505050505081565b6000805481905b808210156108f357846001600160a01b03166000838154811061086d5761086d610b1d565b6000918252602090912001546001600160a01b0316036108e15760019250846000838154811061089f5761089f610b1d565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591871681526001909152604090206108df8582610c34565b505b6108ec826001610b86565b9150610848565b50505b92915050565b50805461090890610bac565b6000825580601f10610918575050565b601f01602090049060005260206000209081019061029d91905b808211156109465760008155600101610932565b5090565b80356001600160a01b038116811461096157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261098d57600080fd5b813567ffffffffffffffff808211156109a8576109a8610966565b604051601f8301601f19908116603f011681019082821181831017156109d0576109d0610966565b816040528381528660208588010111156109e957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215610a1c57600080fd5b610a258361094a565b9150602083013567ffffffffffffffff811115610a4157600080fd5b610a4d8582860161097c565b9150509250929050565b600060208284031215610a6957600080fd5b813567ffffffffffffffff811115610a8057600080fd5b610a8c8482850161097c565b949350505050565b600060208284031215610aa657600080fd5b5035919050565b600060208284031215610abf57600080fd5b610ac88261094a565b9392505050565b600060208083528351808285015260005b81811015610afc57858101830151858201604001528201610ae0565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181036000831280158383131683831282161715610b6957610b69610b33565b5092915050565b634e487b7160e01b600052603160045260246000fd5b808201808211156108f6576108f6610b33565b818103818111156108f6576108f6610b33565b600181811c90821680610bc057607f821691505b602082108103610be057634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561028357600081815260208120601f850160051c81016020861015610c0d5750805b601f850160051c820191505b81811015610c2c57828155600101610c19565b505050505050565b815167ffffffffffffffff811115610c4e57610c4e610966565b610c6281610c5c8454610bac565b84610be6565b602080601f831160018114610c975760008415610c7f5750858301515b600019600386901b1c1916600185901b178555610c2c565b600085815260208120601f198616915b82811015610cc657888601518255948401946001909101908401610ca7565b5085821015610ce45787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220cd46deaf7fe483ef30f6c3af59ec3df93b934883fc6d3fc4014c32cb51e6782464736f6c63430008110033608060405234801561001057600080fd5b507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e15009167604051610070906020808252601e908201527f6172696d617061735f73745f616473202d3e20636f6e7374727563746f720000604082015260600190565b60405180910390a161102d806100876000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806364b1e3e81161008c57806385148fd31161006657806385148fd3146101ed5780639bf6400c14610200578063a70fca8d14610213578063cf1be5711461023657600080fd5b806364b1e3e8146101c1578063715a0ae9146101d257806377d7b514146101da57600080fd5b80633e62601d116100c85780633e62601d146101755780634773bc3d14610188578063512b29631461019b5780635a701bcc146101ae57600080fd5b80630b731f89146100ef5780632d4adcd91461014057806338d9419314610155575b600080fd5b6101236100fd366004610ad4565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015361014e366004610ad4565b610249565b005b610168610163366004610b11565b610256565b6040516101379190610b7a565b610168610183366004610b11565b610302565b610123610196366004610ad4565b610408565b6101536101a9366004610b94565b610486565b6101536101bc366004610ad4565b6104ad565b600054604051908152602001610137565b6101536104b7565b6101536101e8366004610ad4565b610552565b6101536101fb366004610ad4565b61055c565b61015361020e366004610b94565b6106c4565b610226610221366004610ad4565b610717565b6040519015158152602001610137565b610153610244366004610b94565b6107e7565b61025381336107e7565b50565b6000818154811061026657600080fd5b90600052602060002001600091509050805461028190610bf2565b80601f01602080910402602001604051908101604052809291908181526020018280546102ad90610bf2565b80156102fa5780601f106102cf576101008083540402835291602001916102fa565b820191906000526020600020905b8154815290600101906020018083116102dd57829003601f168201915b505050505081565b600054606090821061035b5760405162461bcd60e51b815260206004820152601960248201527f506f736963696f6e2066756572612064652072616e676f2e200000000000000060448201526064015b60405180910390fd5b6000828154811061036e5761036e610c2c565b90600052602060002001805461038390610bf2565b80601f01602080910402602001604051908101604052809291908181526020018280546103af90610bf2565b80156103fc5780601f106103d1576101008083540402835291602001916103fc565b820191906000526020600020905b8154815290600101906020018083116103df57829003601f168201915b50505050509050919050565b600061041382610717565b6104575760405162461bcd60e51b8152602060048201526015602482015274027379032bc34b9ba329032b9b2903b30b637b9171605d1b6044820152606401610352565b6001826040516104679190610c42565b908152604051908190036020019020546001600160a01b031692915050565b600061049283836108ae565b90508015156000036104a8576104a883836107e7565b505050565b61025381336106c4565b600054805b6104c7600182610c74565b90506000811261054e576001600082815481106104e6576104e6610c2c565b906000526020600020016040516104fd9190610c9b565b90815260405190819003602001902080546001600160a01b0319169055600080548061052b5761052b610d11565b60019003818190600052602060002001600061054791906109e3565b90556104bc565b5050565b6102538133610486565b60018160405161056c9190610c42565b90815260405190819003602001902080546001600160a01b0319169055600080545b808210156104a85773__$b8aea4b0d65a9a3624a5e62f85f41dcce2$__6376332c2d600084815481106105c3576105c3610c2c565b90600052602060002001856040518363ffffffff1660e01b81526004016105eb929190610d27565b602060405180830381865af4158015610608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062c9190610dc6565b156106b257600061063e600183610de8565b8154811061064e5761064e610c2c565b906000526020600020016000838154811061066b5761066b610c2c565b9060005260206000200190816106819190610e49565b50600080548061069357610693610d11565b6001900381819060005260206000200160006106af91906109e3565b90555b6106bd826001610f2a565b915061058e565b60006106d083836108ae565b9050806104a85760405162461bcd60e51b8152602060048201526015602482015274027379032bc34b9ba329032b9b2903b30b637b9171605d1b6044820152606401610352565b6000805481905b808210156107dd5773__$b8aea4b0d65a9a3624a5e62f85f41dcce2$__6376332c2d6000848154811061075357610753610c2c565b90600052602060002001866040518363ffffffff1660e01b815260040161077b929190610d27565b602060405180830381865af4158015610798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bc9190610dc6565b156107cb575060019392505050565b6107d6826001610f2a565b915061071e565b5060009392505050565b6107f082610717565b156108355760405162461bcd60e51b815260206004820152601560248201527402cb09032bc34b9ba329032b9b2903b30b637b9171605d1b6044820152606401610352565b806001836040516108469190610c42565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563016104a88382610f3d565b6000805481905b808210156109da5773__$b8aea4b0d65a9a3624a5e62f85f41dcce2$__6376332c2d600084815481106108ea576108ea610c2c565b90600052602060002001876040518363ffffffff1660e01b8152600401610912929190610d27565b602060405180830381865af415801561092f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109539190610dc6565b156109c85760019250846000838154811061097057610970610c2c565b9060005260206000200190816109869190610f3d565b50836001866040516109989190610c42565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555b6109d3826001610f2a565b91506108b5565b50505b92915050565b5080546109ef90610bf2565b6000825580601f106109ff575050565b601f01602090049060005260206000209081019061025391905b80821115610a2d5760008155600101610a19565b5090565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610a5857600080fd5b813567ffffffffffffffff80821115610a7357610a73610a31565b604051601f8301601f19908116603f01168101908282118183101715610a9b57610a9b610a31565b81604052838152866020858801011115610ab457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610ae657600080fd5b813567ffffffffffffffff811115610afd57600080fd5b610b0984828501610a47565b949350505050565b600060208284031215610b2357600080fd5b5035919050565b60005b83811015610b45578181015183820152602001610b2d565b50506000910152565b60008151808452610b66816020860160208601610b2a565b601f01601f19169290920160200192915050565b602081526000610b8d6020830184610b4e565b9392505050565b60008060408385031215610ba757600080fd5b823567ffffffffffffffff811115610bbe57600080fd5b610bca85828601610a47565b92505060208301356001600160a01b0381168114610be757600080fd5b809150509250929050565b600181811c90821680610c0657607f821691505b602082108103610c2657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60008251610c54818460208701610b2a565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b8181036000831280158383131683831282161715610c9457610c94610c5e565b5092915050565b6000808354610ca981610bf2565b60018281168015610cc15760018114610cd657610d05565b60ff1984168752821515830287019450610d05565b8760005260208060002060005b85811015610cfc5781548a820152908401908201610ce3565b50505082870194505b50929695505050505050565b634e487b7160e01b600052603160045260246000fd5b604081526000808454610d3981610bf2565b8060408601526060600180841660008114610d5b5760018114610d7557610da6565b60ff1985168884015283151560051b880183019550610da6565b8960005260208060002060005b86811015610d9d5781548b8201870152908401908201610d82565b8a018501975050505b50505050508281036020840152610dbd8185610b4e565b95945050505050565b600060208284031215610dd857600080fd5b81518015158114610b8d57600080fd5b818103818111156109dd576109dd610c5e565b601f8211156104a857600081815260208120601f850160051c81016020861015610e225750805b601f850160051c820191505b81811015610e4157828155600101610e2e565b505050505050565b818103610e54575050565b610e5e8254610bf2565b67ffffffffffffffff811115610e7657610e76610a31565b610e8a81610e848454610bf2565b84610dfb565b6000601f821160018114610ebe5760008315610ea65750848201545b600019600385901b1c1916600184901b178455610f23565b600085815260209020601f19841690600086815260209020845b83811015610ef85782860154825560019586019590910190602001610ed8565b5085831015610f165781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b808201808211156109dd576109dd610c5e565b815167ffffffffffffffff811115610f5757610f57610a31565b610f6581610e848454610bf2565b602080601f831160018114610f9a5760008415610f825750858301515b600019600386901b1c1916600185901b178555610e41565b600085815260208120601f198616915b82811015610fc957888601518255948401946001909101908401610faa565b5085821015610fe75787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220273f3ed8e5d27d71d3d890333003faab05116ca3167cdb1e4d874646243cdd6064736f6c63430008110033a3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e15009167";

    public static final String FUNC_ACL_ARRAY = "acl_array";

    public static final String FUNC_ACTIVAR = "activar";

    public static final String FUNC_actualizar_administrador_usuario_clave_direccion = "actualizar_administrador_usuario_clave_direccion";

    public static final String FUNC_actualizar_direccion = "actualizar_direccion";

    public static final String FUNC_actualizar_texto = "actualizar_texto";

    public static final String FUNC_BORRAR = "borrar";

    public static final String FUNC_borrar_administrador = "borrar_administrador";

    public static final String FUNC_borrar_direccion = "borrar_direccion";

    public static final String FUNC_BORRAR_EMAIL = "borrar_email";

    public static final String FUNC_BORRAR_TEXTO = "borrar_texto";

    public static final String FUNC_crear = "crear";

    public static final String FUNC_CREAR_ADMINISTRADOR = "crear_administrador";

    public static final String FUNC_DIRECCIONES_TEXTOS_ARIMAPA = "direcciones_textos_arimapa";

    public static final String FUNC_ESTADO = "estado";

    public static final String FUNC_estar_direccion = "estar_direccion";

    public static final String FUNC_ESTAR_EMAIL = "estar_email";

    public static final String FUNC_ESTAR_TEXTO = "estar_texto";

    public static final String FUNC_INACTIVAR = "inactivar";

    public static final String FUNC_LEER_ADMINISTRADOR_POS = "leer_administrador_pos";

    public static final String FUNC_LEER_ADMINISTRADORES_NUM = "leer_administradores_num";

    public static final String FUNC_LEER_DIRECCION = "leer_direccion";

    public static final String FUNC_LEER_DIRECCIONES_POS = "leer_direcciones_pos";

    public static final String FUNC_LEER_EMAIL = "leer_email";

    public static final String FUNC_LEER_EMAILS_POS = "leer_emails_pos";

    public static final String FUNC_LEER_NUM = "leer_num";

    public static final String FUNC_leer_texto = "leer_texto";

    public static final String FUNC_LEER_TEXTOS_POS = "leer_textos_pos";

    public static final String FUNC_LIMITAR = "limitar";

    public static final String FUNC_REINICIAR = "reiniciar";

    public static final String FUNC_SER_ADMINISTRADOR = "ser_administrador";

    public static final String FUNC_TEXTOS_DIRECCIONES_ARIMAPA = "textos_direcciones_arimapa";

    public static final Event AD_AD_U_EVENT = new Event("Ad_ad_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event AD_U_U_EVENT = new Event("Ad_u_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event MENSAJE_EVENT = new Event("Mensaje", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event OK_EVENT = new Event("Ok", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ST_U_EVENT = new Event("St_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Direcciones_emails_mapas(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Direcciones_emails_mapas(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Direcciones_emails_mapas(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Direcciones_emails_mapas(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<Ad_ad_uEventResponse> getAd_ad_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_AD_U_EVENT, transactionReceipt);
        ArrayList<Ad_ad_uEventResponse> responses = new ArrayList<Ad_ad_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.origen = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.destino = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_ad_uEventResponse getAd_ad_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_AD_U_EVENT, log);
        Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
        typedResponse.log = log;
        typedResponse.origen = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.destino = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_ad_uEventFromLog(log));
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_AD_U_EVENT));
        return ad_ad_uEventFlowable(filter);
    }

    public static List<Ad_u_uEventResponse> getAd_u_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_U_U_EVENT, transactionReceipt);
        ArrayList<Ad_u_uEventResponse> responses = new ArrayList<Ad_u_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_u_uEventResponse typedResponse = new Ad_u_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.direccion = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_u_uEventResponse getAd_u_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_U_U_EVENT, log);
        Ad_u_uEventResponse typedResponse = new Ad_u_uEventResponse();
        typedResponse.log = log;
        typedResponse.direccion = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_u_uEventResponse> ad_u_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_u_uEventFromLog(log));
    }

    public Flowable<Ad_u_uEventResponse> ad_u_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_U_U_EVENT));
        return ad_u_uEventFlowable(filter);
    }

    public static List<MensajeEventResponse> getMensajeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MENSAJE_EVENT, transactionReceipt);
        ArrayList<MensajeEventResponse> responses = new ArrayList<MensajeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MensajeEventResponse typedResponse = new MensajeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MensajeEventResponse getMensajeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MENSAJE_EVENT, log);
        MensajeEventResponse typedResponse = new MensajeEventResponse();
        typedResponse.log = log;
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMensajeEventFromLog(log));
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MENSAJE_EVENT));
        return mensajeEventFlowable(filter);
    }

    public static List<OkEventResponse> getOkEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OK_EVENT, transactionReceipt);
        ArrayList<OkEventResponse> responses = new ArrayList<OkEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OkEventResponse typedResponse = new OkEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OkEventResponse getOkEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OK_EVENT, log);
        OkEventResponse typedResponse = new OkEventResponse();
        typedResponse.log = log;
        typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<OkEventResponse> okEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOkEventFromLog(log));
    }

    public Flowable<OkEventResponse> okEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OK_EVENT));
        return okEventFlowable(filter);
    }

    public static List<St_uEventResponse> getSt_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ST_U_EVENT, transactionReceipt);
        ArrayList<St_uEventResponse> responses = new ArrayList<St_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            St_uEventResponse typedResponse = new St_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.texto = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static St_uEventResponse getSt_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ST_U_EVENT, log);
        St_uEventResponse typedResponse = new St_uEventResponse();
        typedResponse.log = log;
        typedResponse.texto = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<St_uEventResponse> st_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSt_uEventFromLog(log));
    }

    public Flowable<St_uEventResponse> st_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ST_U_EVENT));
        return st_uEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple3<String, String, byte[]>> acl_array(BigInteger param0) {
        final Function function = new Function(FUNC_ACL_ARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteFunctionCall<Tuple3<String, String, byte[]>>(function,
                new Callable<Tuple3<String, String, byte[]>>() {
                    @Override
                    public Tuple3<String, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> activar() {
        final Function function = new Function(
                FUNC_ACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String direccion, String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_direccion(String texto) {
        final Function function = new Function(
                FUNC_actualizar_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(texto)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_direccion(String texto, String direccion) {
        final Function function = new Function(
                FUNC_actualizar_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(texto), 
                new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_texto(String direccion, String texto) {
        final Function function = new Function(
                FUNC_actualizar_texto, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(texto)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_texto(String texto) {
        final Function function = new Function(
                FUNC_actualizar_texto, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(texto)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar() {
        final Function function = new Function(
                FUNC_BORRAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador() {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador(String direccion) {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_direccion(String direccion) {
        final Function function = new Function(
                FUNC_borrar_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_direccion() {
        final Function function = new Function(
                FUNC_borrar_direccion, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_email(String email) {
        final Function function = new Function(
                FUNC_BORRAR_EMAIL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_texto(String texto) {
        final Function function = new Function(
                FUNC_BORRAR_TEXTO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(texto)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crear(String email) {
        final Function function = new Function(
                FUNC_crear, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crear(String direccion, String email) {
        final Function function = new Function(
                FUNC_crear, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crear_administrador(String direccion, String usuario, byte[] clave) {
        final Function function = new Function(
                FUNC_CREAR_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> direcciones_textos_arimapa() {
        final Function function = new Function(FUNC_DIRECCIONES_TEXTOS_ARIMAPA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> estado() {
        final Function function = new Function(FUNC_ESTADO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> estar_direccion() {
        final Function function = new Function(FUNC_estar_direccion, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> estar_direccion(String direccion) {
        final Function function = new Function(FUNC_estar_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> estar_email(String email) {
        final Function function = new Function(FUNC_ESTAR_EMAIL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(email)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> estar_texto(String texto) {
        final Function function = new Function(FUNC_ESTAR_TEXTO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(texto)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> inactivar() {
        final Function function = new Function(
                FUNC_INACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> leer_administrador_pos(String direccion) {
        final Function function = new Function(FUNC_LEER_ADMINISTRADOR_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_administradores_num() {
        final Function function = new Function(FUNC_LEER_ADMINISTRADORES_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> leer_direccion(String email) {
        final Function function = new Function(FUNC_LEER_DIRECCION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(email)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_direcciones_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_email(String direccion) {
        final Function function = new Function(FUNC_LEER_EMAIL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_emails_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_EMAILS_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> leer_num() {
        final Function function = new Function(FUNC_LEER_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> leer_texto() {
        final Function function = new Function(FUNC_leer_texto, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_texto(String direccion) {
        final Function function = new Function(FUNC_leer_texto, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_textos_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_TEXTOS_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> limitar() {
        final Function function = new Function(
                FUNC_LIMITAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reiniciar() {
        final Function function = new Function(
                FUNC_REINICIAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> ser_administrador(String direccion) {
        final Function function = new Function(FUNC_SER_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> textos_direcciones_arimapa() {
        final Function function = new Function(FUNC_TEXTOS_DIRECCIONES_ARIMAPA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static Direcciones_emails_mapas load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Direcciones_emails_mapas(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Direcciones_emails_mapas load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Direcciones_emails_mapas(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Direcciones_emails_mapas load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Direcciones_emails_mapas(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Direcciones_emails_mapas load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Direcciones_emails_mapas(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Direcciones_emails_mapas> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Direcciones_emails_mapas.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Direcciones_emails_mapas> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Direcciones_emails_mapas.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Direcciones_emails_mapas> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Direcciones_emails_mapas.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Direcciones_emails_mapas> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Direcciones_emails_mapas.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Ad_ad_uEventResponse extends BaseEventResponse {
        public String origen;

        public String destino;

        public BigInteger cantidad;

        public String mensaje;
    }

    public static class Ad_u_uEventResponse extends BaseEventResponse {
        public String direccion;

        public BigInteger cantidad;

        public BigInteger id;

        public String mensaje;
    }

    public static class MensajeEventResponse extends BaseEventResponse {
        public String mensaje;
    }

    public static class OkEventResponse extends BaseEventResponse {
        public Boolean es;

        public String mensaje;
    }

    public static class St_uEventResponse extends BaseEventResponse {
        public String texto;

        public BigInteger cantidad;
    }
}
