package innui.web3j.generated.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.8.
 */
@SuppressWarnings("rawtypes")
public class Direcciones_emails_mapas extends Contract {
    public static final String BINARY = "60806040526001805460ff1916811790553480156200001c575f80fd5b505f80516020620051188339815191526040516200006b9060208082526018908201527f6d696e696261736573202d3e20636f6e7374727563746f720000000000000000604082015260600190565b60405180910390a160408051608081018252606060208083018281525f84860152828401929092523383528351808501855260048152631c9bdbdd60e21b918101919091529052905169726f6f745f636c61766560b01b8152600290600a01602060405180830381855afa158015620000e6573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906200010b91906200040d565b6040828101919091528051600180825281830190925290602080830190803683375050506060820181905280516d7065726d69736f5f6d6178696d6f60901b91905f906200015d576200015d62000439565b6020908102919091018101919091525f8054600181018255908052825160049091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039093166001600160a01b03199093169290921782559183015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5640190620001f69082620004d9565b5060408201516002820155606082015180516200021e9160038401916020909101906200038d565b505050505f80516020620051188339815191526040516200027f9060208082526026908201527f62696172696d617061735f61645f73745f73745f616473202d3e20636f6e7374604082015265393ab1ba37b960d11b606082015260800190565b60405180910390a16040516200029590620003db565b604051809103905ff080158015620002af573d5f803e3d5ffd5b506001806101000a8154816001600160a01b0302191690836001600160a01b03160217905550604051620002e390620003e9565b604051809103905ff080158015620002fd573d5f803e3d5ffd5b50600280546001600160a01b03929092166001600160a01b03199092169190911790556040515f8051602062005118833981519152906200037f9060208082526027908201527f646972656363696f6e65735f656d61696c735f6d61706173202d3e20636f6e736040820152663a393ab1ba37b960c91b606082015260800190565b60405180910390a1620005a1565b828054828255905f5260205f20908101928215620003c9579160200282015b82811115620003c9578251825591602001919060010190620003ac565b50620003d7929150620003f7565b5090565b610d56806200338b83390190565b61103780620040e183390190565b5b80821115620003d7575f8155600101620003f8565b5f602082840312156200041e575f80fd5b5051919050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b600181811c908216806200046257607f821691505b6020821081036200048157634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115620004d4575f81815260208120601f850160051c81016020861015620004af5750805b601f850160051c820191505b81811015620004d057828155600101620004bb565b5050505b505050565b81516001600160401b03811115620004f557620004f562000425565b6200050d816200050684546200044d565b8462000487565b602080601f83116001811462000543575f84156200052b5750858301515b5f19600386901b1c1916600185901b178555620004d0565b5f85815260208120601f198616915b82811015620005735788860151825594840194600190910190840162000552565b50858210156200059157878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b612ddc80620005af5f395ff3fe608060405260043610610254575f3560e01c80639570c4751161013f578063c49c3d05116100b3578063ec72a5db11610078578063ec72a5db146106a3578063f5a57136146106c2578063f9c99f79146106d6578063f9d06c4d146106fa578063fabe8b1014610719578063fde12e311461072d575f80fd5b8063c49c3d0514610613578063cabbdd3214610627578063d0dac26314610646578063de660d3b14610665578063e3dbc94414610684575f80fd5b8063af2ed37a11610104578063af2ed37a14610586578063b0bcaeb2146105a5578063b2be353c146105b9578063b73d6dbf146105cd578063b776a7a2146105e0578063ba19f56f146105f4575f80fd5b80639570c475146104eb578063a1a049521461050a578063a9a4079c14610529578063abd60afd14610548578063aca7c0d014610567575f80fd5b806364b1e3e8116101d6578063715a0ae91161019b578063715a0ae91461043857806378500f121461044c5780637b318b6e1461046b5780637b5fef861461048a578063879d541a1461049e5780638e3ee7ba146104bd575f80fd5b806364b1e3e8146103a157806366753808146103b5578063688e3467146103d45780636bb9d38a146103fa5780636c92cef314610419575f80fd5b80634dc464371161021c5780634dc46437146102e857806351bf9e6314610317578063548f795314610336578063590331d11461034b57806363ef0c201461036a575f80fd5b80631d032d0114610258578063238c72251461028a5780632d4adcd9146102945780632dd47cac146102b35780632e9a7ff6146102c7575b5f80fd5b348015610263575f80fd5b50610277610272366004612542565b61074c565b6040519081526020015b60405180910390f35b610292610805565b005b34801561029f575f80fd5b506102926102ae366004612622565b610869565b3480156102be575f80fd5b5061029261089d565b3480156102d2575f80fd5b506102db6108d7565b60405161028191906126a9565b3480156102f3575f80fd5b50610307610302366004612542565b6108e7565b6040519015158152602001610281565b348015610322575f80fd5b50610292610331366004612622565b61094b565b348015610341575f80fd5b5061027760035481565b348015610356575f80fd5b506102db6103653660046126bb565b610979565b348015610375575f80fd5b50610389610384366004612622565b6109af565b6040516001600160a01b039091168152602001610281565b3480156103ac575f80fd5b506102776109ee565b3480156103c0575f80fd5b506103076103cf366004612622565b610a1c565b3480156103df575f80fd5b506001546103ed9060ff1681565b60405161028191906126e6565b348015610405575f80fd5b50610292610414366004612542565b610a8b565b348015610424575f80fd5b50610292610433366004612622565b610ab9565b348015610443575f80fd5b50610292610beb565b348015610457575f80fd5b506102db610466366004612542565b610c1a565b348015610476575f80fd5b5061029261048536600461270c565b610c5a565b348015610495575f80fd5b50610307610e2b565b3480156104a9575f80fd5b506103896104b83660046126bb565b610e35565b3480156104c8575f80fd5b506104dc6104d73660046126bb565b610e64565b60405161028193929190612790565b3480156104f6575f80fd5b50600254610389906001600160a01b031681565b348015610515575f80fd5b506102926105243660046127c3565b610f27565b348015610534575f80fd5b50610292610543366004612810565b610f56565b348015610553575f80fd5b506102926105623660046127c3565b611175565b348015610572575f80fd5b50610292610581366004612881565b6111a4565b348015610591575f80fd5b506102926105a03660046126bb565b6111d3565b3480156105b0575f80fd5b506102926111fd565b3480156105c4575f80fd5b50610292611206565b6102926105db366004612622565b611355565b3480156105eb575f80fd5b506102926113ac565b3480156105ff575f80fd5b506102db61060e3660046126bb565b6113e2565b34801561061e575f80fd5b50610292611451565b348015610632575f80fd5b50610307610641366004612622565b611489565b348015610651575f80fd5b506102db610660366004612542565b6114c8565b348015610670575f80fd5b5061029261067f366004612622565b611500565b34801561068f575f80fd5b5061029261069e3660046128d0565b61152e565b3480156106ae575f80fd5b506103076106bd366004612542565b611654565b3480156106cd575f80fd5b50610277611693565b3480156106e1575f80fd5b506001546103899061010090046001600160a01b031681565b348015610705575f80fd5b50610292610714366004612542565b6116cf565b348015610724575f80fd5b50610277611896565b348015610738575f80fd5b50610292610747366004612622565b6118d3565b5f8060015460ff166002811115610765576107656126d2565b1461078b5760405162461bcd60e51b815260040161078290612943565b60405180910390fd5b5f805b5f548110156107e7575f81815481106107a9576107a961297a565b5f9182526020909120600490910201546001600160a01b03908116908516036107d557600191506107e7565b6107e08160016129a2565b905061078e565b81156107f65791506108009050565b505f199392505050565b919050565b5f60015460ff16600281111561081d5761081d6126d2565b1461083a5760405162461bcd60e51b815260040161078290612943565b60035434101561085c5760405162461bcd60e51b8152600401610782906129b5565b3361086681611901565b50565b610872336108e7565b61088e5760405162461bcd60e51b815260040161078290612a07565b336108998183611a07565b5050565b6108a6336108e7565b6108c25760405162461bcd60e51b815260040161078290612a07565b600180545f919060ff191681835b0217905550565b60606108e2336114c8565b905090565b5f80805b5f54811015610944575f81815481106109065761090661297a565b5f9182526020909120600490910201546001600160a01b03908116908516036109325760019150610944565b61093d8160016129a2565b90506108eb565b5092915050565b610954336108e7565b6109705760405162461bcd60e51b815260040161078290612a07565b61086681611c4f565b6060610984336108e7565b6109a05760405162461bcd60e51b815260040161078290612a07565b6109a9826113e2565b92915050565b5f8060015460ff1660028111156109c8576109c86126d2565b146109e55760405162461bcd60e51b815260040161078290612943565b6109a982611c59565b5f6109f8336108e7565b610a145760405162461bcd60e51b815260040161078290612a07565b6108e2611cc8565b60025460405163a70fca8d60e01b81525f916001600160a01b03169063a70fca8d90610a4c9085906004016126a9565b602060405180830381865afa158015610a67573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109a99190612a4f565b610a94336108e7565b610ab05760405162461bcd60e51b815260040161078290612a07565b61086681611901565b600254604051634773bc3d60e01b81525f916001600160a01b031690634773bc3d90610ae99085906004016126a9565b602060405180830381865afa158015610b04573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b289190612a6e565b6002546040516385148fd360e01b81529192506001600160a01b0316906385148fd390610b599085906004016126a9565b5f604051808303815f87803b158015610b70575f80fd5b505af1158015610b82573d5f803e3d5ffd5b50506001546040516387e4c82160e01b81526001600160a01b03858116600483015261010090920490911692506387e4c82191506024015b5f604051808303815f87803b158015610bd1575f80fd5b505af1158015610be3573d5f803e3d5ffd5b505050505050565b610bf4336108e7565b610c105760405162461bcd60e51b815260040161078290612a07565b610c18611d3c565b565b60605f60015460ff166002811115610c3457610c346126d2565b14610c515760405162461bcd60e51b815260040161078290612943565b6109a9826114c8565b610c63336108e7565b610c7f5760405162461bcd60e51b815260040161078290612a07565b5f54600210610cf65760405162461bcd60e51b815260206004820152603e60248201527f536f6c6f207365207065726d6974652061637475616c697a617220736920686160448201527f79206d617320646520646f732061646d696e6973747261646f7265732e2000006064820152608401610782565b5f610d008561074c565b90505f811215610d225760405162461bcd60e51b815260040161078290612a07565b835115610d5957835f8281548110610d3c57610d3c61297a565b905f5260205f2090600402016001019081610d579190612b06565b505b825115610dd457600283604051610d709190612bc2565b602060405180830381855afa158015610d8b573d5f803e3d5ffd5b5050506040513d601f19601f82011682018060405250810190610dae9190612bdd565b5f8281548110610dc057610dc061297a565b905f5260205f209060040201600201819055505b6001600160a01b03821615610e2457815f8281548110610df657610df661297a565b5f918252602090912060049091020180546001600160a01b0319166001600160a01b03929092169190911790555b5050505050565b5f6108e233611654565b5f610e3f336108e7565b610e5b5760405162461bcd60e51b815260040161078290612a07565b6109a982611e01565b5f8181548110610e72575f80fd5b5f918252602090912060049091020180546001820180546001600160a01b03909216935090610ea090612a89565b80601f0160208091040260200160405190810160405280929190818152602001828054610ecc90612a89565b8015610f175780601f10610eee57610100808354040283529160200191610f17565b820191905f5260205f20905b815481529060010190602001808311610efa57829003601f168201915b5050505050908060020154905083565b610f30336108e7565b610f4c5760405162461bcd60e51b815260040161078290612a07565b6108998282611a07565b610f5f336108e7565b610f7b5760405162461bcd60e51b815260040161078290612a07565b5f805b5f54811015610fd7575f8181548110610f9957610f9961297a565b5f9182526020909120600490910201546001600160a01b0390811690861603610fc55760019150610fd7565b610fd08160016129a2565b9050610f7e565b81156110415760405162461bcd60e51b815260206004820152603360248201527f45736120646972656363696f6e2064652061646d696e6973747261646f7220796044820152720309032b9ba30903932b3b4b9ba3930b230971606d1b6064820152608401610782565b604080516080810182525f818301526060808201526001600160a01b0387168152602081018690529051600290611079908690612bc2565b602060405180830381855afa158015611094573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906110b79190612bdd565b60408201525f805460018101825590805281517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563600490920291820180546001600160a01b0319166001600160a01b03909216919091178155602083015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401906111449082612b06565b50604082015160028201556060820151805161116a916003840191602090910190612447565b505050505050505050565b61117e336108e7565b61119a5760405162461bcd60e51b815260040161078290612a07565b6108998282611e37565b6111ad336108e7565b6111c95760405162461bcd60e51b815260040161078290612a07565b6108998282612139565b6111dc336108e7565b6111f85760405162461bcd60e51b815260040161078290612a07565b600355565b610c1833610a8b565b61120f336108e7565b61122b5760405162461bcd60e51b815260040161078290612a07565b5f6112353361074c565b90505f8112156112575760405162461bcd60e51b815260040161078290612a07565b5f805461126690600190612bf4565b815481106112765761127661297a565b905f5260205f2090600402015f82815481106112945761129461297a565b5f9182526020909120825460049092020180546001600160a01b0319166001600160a01b039092169190911781556001808201906112d490840182612c07565b506002820154816002015560038201816003019080546112f5929190612490565b509050505f80548061130957611309612cd4565b5f8281526020812060045f199093019283020180546001600160a01b03191681559061133860018301826124cc565b600282015f9055600382015f61134e9190612503565b5050905550565b5f60015460ff16600281111561136d5761136d6126d2565b1461138a5760405162461bcd60e51b815260040161078290612943565b60035434101561088e5760405162461bcd60e51b8152600401610782906129b5565b6113b5336108e7565b6113d15760405162461bcd60e51b815260040161078290612a07565b60018054819060ff191681806108d0565b600254604051633e62601d60e01b8152600481018390526060916001600160a01b031690633e62601d906024015b5f60405180830381865afa15801561142a573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526109a99190810190612ce8565b61145a336108e7565b6114765760405162461bcd60e51b815260040161078290612a07565b600180546002919060ff191681836108d0565b5f8060015460ff1660028111156114a2576114a26126d2565b146114bf5760405162461bcd60e51b815260040161078290612943565b6109a982610a1c565b600154604051632c2b369760e21b81526001600160a01b0383811660048301526060926101009004169063b0acda5c90602401611410565b611509336108e7565b6115255760405162461bcd60e51b815260040161078290612a07565b61086681612406565b611537336108e7565b6115535760405162461bcd60e51b815260040161078290612a07565b335f61155e8261074c565b90505f8112156115805760405162461bcd60e51b815260040161078290612a07565b8451156115b757845f828154811061159a5761159a61297a565b905f5260205f20906004020160010190816115b59190612b06565b505b835115611632576002846040516115ce9190612bc2565b602060405180830381855afa1580156115e9573d5f803e3d5ffd5b5050506040513d601f19601f8201168201806040525081019061160c9190612bdd565b5f828154811061161e5761161e61297a565b905f5260205f209060040201600201819055505b6001600160a01b03831615610e2457825f8281548110610df657610df661297a565b5f8060015460ff16600281111561166d5761166d6126d2565b1461168a5760405162461bcd60e51b815260040161078290612943565b6109a982612410565b5f8060015460ff1660028111156116ac576116ac6126d2565b146116c95760405162461bcd60e51b815260040161078290612943565b505f5490565b6116d8336108e7565b6116f45760405162461bcd60e51b815260040161078290612a07565b5f5460021061176b5760405162461bcd60e51b815260206004820152603a60248201527f536f6c6f207365207065726d69746520626f7272617220736920686179206d6160448201527f7320646520646f732061646d696e6973747261646f7265732e200000000000006064820152608401610782565b5f6117758261074c565b90505f8112156117975760405162461bcd60e51b815260040161078290612a07565b5f80546117a690600190612bf4565b815481106117b6576117b661297a565b905f5260205f2090600402015f82815481106117d4576117d461297a565b5f9182526020909120825460049092020180546001600160a01b0319166001600160a01b0390921691909117815560018082019061181490840182612c07565b50600282015481600201556003820181600301908054611835929190612490565b509050505f80548061184957611849612cd4565b5f8281526020812060045f199093019283020180546001600160a01b03191681559061187860018301826124cc565b600282015f9055600382015f61188e9190612503565b505090555050565b5f8060015460ff1660028111156118af576118af6126d2565b146118cc5760405162461bcd60e51b815260040161078290612943565b5060035490565b6118dc336108e7565b6118f85760405162461bcd60e51b815260040161078290612a07565b61086681610ab9565b600154604051632c2b369760e21b81526001600160a01b0383811660048301525f926101009004169063b0acda5c906024015f60405180830381865afa15801561194d573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526119749190810190612ce8565b6001546040516387e4c82160e01b81526001600160a01b038581166004830152929350610100909104909116906387e4c821906024015f604051808303815f87803b1580156119c1575f80fd5b505af11580156119d3573d5f803e3d5ffd5b50506002546040516385148fd360e01b81526001600160a01b0390911692506385148fd39150610bba9084906004016126a9565b6001546040516374afc8d760e01b81526001600160a01b038481166004830152610100909204909116906374afc8d790602401602060405180830381865afa158015611a55573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a799190612a4f565b15611ae25760405162461bcd60e51b815260206004820152603360248201527f4c6120646972656363696f6e207961206861207369646f206372656164612028604482015272032b9ba30b934b0903932b832ba34b23094971606d1b6064820152608401610782565b60025460405163a70fca8d60e01b81526001600160a01b039091169063a70fca8d90611b129084906004016126a9565b602060405180830381865afa158015611b2d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b519190612a4f565b15611bba5760405162461bcd60e51b815260206004820152603360248201527f456c20746578746f207961206861207369646f207574696c697a61646f2e2028604482015272032b9ba30b934b0903932b832ba34b23794971606d1b6064820152608401610782565b6001546040516350d024a960e11b81526101009091046001600160a01b03169063a1a0495290611bf09085908590600401612d5a565b5f604051808303815f87803b158015611c07575f80fd5b505af1158015611c19573d5f803e3d5ffd5b505060025460405163cf1be57160e01b81526001600160a01b03909116925063cf1be5719150610bba9084908690600401612d7d565b61086681336111a4565b600254604051634773bc3d60e01b81525f916001600160a01b031690634773bc3d90611c899085906004016126a9565b602060405180830381865afa158015611ca4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109a99190612a6e565b5f60018054906101000a90046001600160a01b03166001600160a01b03166364b1e3e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d18573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e29190612bdd565b60025f9054906101000a90046001600160a01b03166001600160a01b031663715a0ae96040518163ffffffff1660e01b81526004015f604051808303815f87803b158015611d88575f80fd5b505af1158015611d9a573d5f803e3d5ffd5b5050505060018054906101000a90046001600160a01b03166001600160a01b031663715a0ae96040518163ffffffff1660e01b81526004015f604051808303815f87803b158015611de9575f80fd5b505af1158015611dfb573d5f803e3d5ffd5b50505050565b600154604051633e62601d60e01b8152600481018390525f9161010090046001600160a01b031690633e62601d90602401611c89565b6001546040516374afc8d760e01b81526001600160a01b038481166004830152610100909204909116906374afc8d790602401602060405180830381865afa158015611e85573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ea99190612a4f565b611ef55760405162461bcd60e51b815260206004820181905260248201527f4c6120646972656363696f6e206e6f206861207369646f206372656164612e206044820152606401610782565b600154604051632c2b369760e21b81526001600160a01b0384811660048301525f926101009004169063b0acda5c906024015f60405180830381865afa158015611f41573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611f689190810190612ce8565b60015460405163561088ab60e01b815291925061010090046001600160a01b03169063561088ab90611fa09086908690600401612d5a565b5f604051808303815f87803b158015611fb7575f80fd5b505af1158015611fc9573d5f803e3d5ffd5b50506002546040516385148fd360e01b81526001600160a01b0390911692506385148fd39150611ffd9084906004016126a9565b5f604051808303815f87803b158015612014575f80fd5b505af1158015612026573d5f803e3d5ffd5b505060025460405163a70fca8d60e01b81526001600160a01b03909116925063a70fca8d915061205a9085906004016126a9565b602060405180830381865afa158015612075573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120999190612a4f565b15612102576002546040516326fd900360e21b81526001600160a01b0390911690639bf6400c906120d09085908790600401612d7d565b5f604051808303815f87803b1580156120e7575f80fd5b505af11580156120f9573d5f803e3d5ffd5b50505050505050565b60025460405163cf1be57160e01b81526001600160a01b039091169063cf1be571906120d09085908790600401612d7d565b505050565b60025460405163a70fca8d60e01b81526001600160a01b039091169063a70fca8d906121699085906004016126a9565b602060405180830381865afa158015612184573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121a89190612a4f565b6121f45760405162461bcd60e51b815260206004820152601f60248201527f456c20746578746f206e6f206861207369646f207574696c697a61646f2e20006044820152606401610782565b600254604051634773bc3d60e01b81525f916001600160a01b031690634773bc3d906122249086906004016126a9565b602060405180830381865afa15801561223f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122639190612a6e565b6002546040516326fd900360e21b81529192506001600160a01b031690639bf6400c906122969086908690600401612d7d565b5f604051808303815f87803b1580156122ad575f80fd5b505af11580156122bf573d5f803e3d5ffd5b50506001546040516387e4c82160e01b81526001600160a01b03858116600483015261010090920490911692506387e4c82191506024015f604051808303815f87803b15801561230d575f80fd5b505af115801561231f573d5f803e3d5ffd5b50506001546040516374afc8d760e01b81526001600160a01b03868116600483015261010090920490911692506374afc8d79150602401602060405180830381865afa158015612371573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123959190612a4f565b156123d05760015460405163561088ab60e01b81526101009091046001600160a01b03169063561088ab906120d09085908790600401612d5a565b6001546040516350d024a960e11b81526101009091046001600160a01b03169063a1a04952906120d09085908790600401612d5a565b6108663382611175565b6001546040516374afc8d760e01b81526001600160a01b0383811660048301525f92610100900416906374afc8d790602401610a4c565b828054828255905f5260205f20908101928215612480579160200282015b82811115612480578251825591602001919060010190612465565b5061248c92915061251a565b5090565b828054828255905f5260205f20908101928215612480575f5260205f209182015b828111156124805782548255916001019190600101906124b1565b5080546124d890612a89565b5f825580601f106124e7575050565b601f0160209004905f5260205f2090810190610866919061251a565b5080545f8255905f5260205f209081019061086691905b5b8082111561248c575f815560010161251b565b6001600160a01b0381168114610866575f80fd5b5f60208284031215612552575f80fd5b813561255d8161252e565b9392505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156125a1576125a1612564565b604052919050565b5f67ffffffffffffffff8211156125c2576125c2612564565b50601f01601f191660200190565b5f82601f8301126125df575f80fd5b81356125f26125ed826125a9565b612578565b818152846020838601011115612606575f80fd5b816020850160208301375f918101602001919091529392505050565b5f60208284031215612632575f80fd5b813567ffffffffffffffff811115612648575f80fd5b612654848285016125d0565b949350505050565b5f5b8381101561267657818101518382015260200161265e565b50505f910152565b5f815180845261269581602086016020860161265c565b601f01601f19169290920160200192915050565b602081525f61255d602083018461267e565b5f602082840312156126cb575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b602081016003831061270657634e487b7160e01b5f52602160045260245ffd5b91905290565b5f805f806080858703121561271f575f80fd5b843561272a8161252e565b9350602085013567ffffffffffffffff80821115612746575f80fd5b612752888389016125d0565b94506040870135915080821115612767575f80fd5b50612774878288016125d0565b92505060608501356127858161252e565b939692955090935050565b6001600160a01b03841681526060602082018190525f906127b39083018561267e565b9050826040830152949350505050565b5f80604083850312156127d4575f80fd5b82356127df8161252e565b9150602083013567ffffffffffffffff8111156127fa575f80fd5b612806858286016125d0565b9150509250929050565b5f805f60608486031215612822575f80fd5b833561282d8161252e565b9250602084013567ffffffffffffffff80821115612849575f80fd5b612855878388016125d0565b9350604086013591508082111561286a575f80fd5b50612877868287016125d0565b9150509250925092565b5f8060408385031215612892575f80fd5b823567ffffffffffffffff8111156128a8575f80fd5b6128b4858286016125d0565b92505060208301356128c58161252e565b809150509250929050565b5f805f606084860312156128e2575f80fd5b833567ffffffffffffffff808211156128f9575f80fd5b612905878388016125d0565b9450602086013591508082111561291a575f80fd5b50612927868287016125d0565b92505060408401356129388161252e565b809150509250925092565b6020808252601b908201527f456c20636f6e747261746f206e6f20657374612061637469766f2e0000000000604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b808201808211156109a9576109a961298e565b60208082526032908201527f4e6f207469656e6520666f6e646f73207061726120706167617220656c20636f604082015271039ba32903232b61039b2b93b34b1b4b797160751b606082015260800190565b60208082526028908201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360408201526703a3930b237b917160c51b606082015260800190565b5f60208284031215612a5f575f80fd5b8151801515811461255d575f80fd5b5f60208284031215612a7e575f80fd5b815161255d8161252e565b600181811c90821680612a9d57607f821691505b602082108103612abb57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115612134575f81815260208120601f850160051c81016020861015612ae75750805b601f850160051c820191505b81811015610be357828155600101612af3565b815167ffffffffffffffff811115612b2057612b20612564565b612b3481612b2e8454612a89565b84612ac1565b602080601f831160018114612b67575f8415612b505750858301515b5f19600386901b1c1916600185901b178555610be3565b5f85815260208120601f198616915b82811015612b9557888601518255948401946001909101908401612b76565b5085821015612bb257878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f8251612bd381846020870161265c565b9190910192915050565b5f60208284031215612bed575f80fd5b5051919050565b818103818111156109a9576109a961298e565b818103612c12575050565b612c1c8254612a89565b67ffffffffffffffff811115612c3457612c34612564565b612c4281612b2e8454612a89565b5f601f821160018114612c73575f8315612c5c5750848201545b5f19600385901b1c1916600184901b178455610e24565b5f85815260209020601f198416905f86815260209020845b83811015612cab5782860154825560019586019590910190602001612c8b565b5085831015612bb2579301545f1960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b5f52603160045260245ffd5b5f60208284031215612cf8575f80fd5b815167ffffffffffffffff811115612d0e575f80fd5b8201601f81018413612d1e575f80fd5b8051612d2c6125ed826125a9565b818152856020838501011115612d40575f80fd5b612d5182602083016020860161265c565b95945050505050565b6001600160a01b03831681526040602082018190525f906126549083018461267e565b604081525f612d8f604083018561267e565b905060018060a01b0383166020830152939250505056fea2646970667358221220ced884fb2e76bcfe9de3ffa631aaae2f325691f6b5db87c4d7d29345a6febb5664736f6c63430008140033608060405234801561000f575f80fd5b507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e1500916760405161006f906020808252601e908201527f6172696d617061735f61645f737473202d3e20636f6e7374727563746f720000604082015260600190565b60405180910390a1610cd2806100845f395ff3fe608060405234801561000f575f80fd5b5060043610610106575f3560e01c806364b1e3e81161009e57806387e4c8211161006e57806387e4c821146101f9578063a1a049521461020c578063b0acda5c1461021f578063b38f9adf1461023f578063c118796914610247575f80fd5b806364b1e3e8146101bb578063715a0ae9146101cb57806374afc8d7146101d357806377d7b514146101e6575f80fd5b80633e62601d116100d95780633e62601d1461016a57806347b68a5d1461017d578063561088ab146101955780635a701bcc146101a8575f80fd5b8063103b346f1461010a5780632b59d1fc1461011f5780632d4adcd91461012757806338d941931461013a575b5f80fd5b61011d6101183660046109cc565b61025a565b005b61011d61027f565b61011d610135366004610a17565b61028a565b61014d610148366004610a51565b610297565b6040516001600160a01b0390911681526020015b60405180910390f35b61014d610178366004610a51565b6102be565b610185610340565b6040519015158152602001610161565b61011d6101a33660046109cc565b61034f565b61011d6101b6366004610a17565b6103a1565b5f54604051908152602001610161565b61011d6103ab565b6101856101e1366004610a68565b61043d565b61011d6101f4366004610a17565b6104a5565b61011d610207366004610a68565b6104af565b61011d61021a3660046109cc565b6105bf565b61023261022d366004610a68565b61067e565b6040516101619190610a88565b610232610772565b610232610255366004610a68565b61077d565b5f6102658383610814565b90508015155f0361027a5761027a83836105bf565b505050565b610288336104af565b565b61029433826105bf565b50565b5f81815481106102a5575f80fd5b5f918252602090912001546001600160a01b0316905081565b5f805482106103145760405162461bcd60e51b815260206004820152601960248201527f506f736963696f6e2066756572612064652072616e676f2e200000000000000060448201526064015b60405180910390fd5b5f828154811061032657610326610ad3565b5f918252602090912001546001600160a01b031692915050565b5f61034a3361043d565b905090565b5f61035a8383610814565b90508061027a5760405162461bcd60e51b8152602060048201526015602482015274027379032bc34b9ba329032b9b2903b30b637b9171605d1b604482015260640161030b565b610294338261034f565b5f54805b6103ba600182610afb565b90505f81126104395760015f8083815481106103d8576103d8610ad3565b5f9182526020808320909101546001600160a01b031683528201929092526040018120610404916108ca565b5f80548061041457610414610b21565b5f8281526020902081015f1990810180546001600160a01b03191690550190556103af565b5050565b5f805481905b8082101561049c57836001600160a01b03165f838154811061046757610467610ad3565b5f918252602090912001546001600160a01b03160361048a575060019392505050565b610495826001610b35565b9150610443565b505f9392505050565b610294338261025a565b6001600160a01b0381165f9081526001602052604081206104cf916108ca565b5f80545b8082101561027a57826001600160a01b03165f83815481106104f7576104f7610ad3565b5f918252602090912001546001600160a01b0316036105ad575f61051c600183610b48565b8154811061052c5761052c610ad3565b5f91825260208220015481546001600160a01b0390911691908490811061055557610555610ad3565b5f918252602082200180546001600160a01b0319166001600160a01b03939093169290921790915580548061058c5761058c610b21565b5f8281526020902081015f1990810180546001600160a01b03191690550190555b6105b8826001610b35565b91506104d3565b6105c88261043d565b1561060d5760405162461bcd60e51b815260206004820152601560248201527402cb09032bc34b9ba329032b9b2903b30b637b9171605d1b604482015260640161030b565b6001600160a01b0382165f90815260016020526040902061062e8282610be0565b50505f80546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0392909216919091179055565b60606106898261043d565b6106cd5760405162461bcd60e51b8152602060048201526015602482015274027379032bc34b9ba329032b9b2903b30b637b9171605d1b604482015260640161030b565b6001600160a01b0382165f90815260016020526040902080546106ef90610b5b565b80601f016020809104026020016040519081016040528092919081815260200182805461071b90610b5b565b80156107665780601f1061073d57610100808354040283529160200191610766565b820191905f5260205f20905b81548152906001019060200180831161074957829003601f168201915b50505050509050919050565b606061034a3361067e565b60016020525f90815260409020805461079590610b5b565b80601f01602080910402602001604051908101604052809291908181526020018280546107c190610b5b565b801561080c5780601f106107e35761010080835404028352916020019161080c565b820191905f5260205f20905b8154815290600101906020018083116107ef57829003601f168201915b505050505081565b5f805481905b808210156108c157846001600160a01b03165f838154811061083e5761083e610ad3565b5f918252602090912001546001600160a01b0316036108af5760019250845f838154811061086e5761086e610ad3565b5f91825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591871681526001909152604090206108ad8582610be0565b505b6108ba826001610b35565b915061081a565b50505b92915050565b5080546108d690610b5b565b5f825580601f106108e5575050565b601f0160209004905f5260205f209081019061029491905b80821115610910575f81556001016108fd565b5090565b80356001600160a01b038116811461092a575f80fd5b919050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112610952575f80fd5b813567ffffffffffffffff8082111561096d5761096d61092f565b604051601f8301601f19908116603f011681019082821181831017156109955761099561092f565b816040528381528660208588010111156109ad575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f80604083850312156109dd575f80fd5b6109e683610914565b9150602083013567ffffffffffffffff811115610a01575f80fd5b610a0d85828601610943565b9150509250929050565b5f60208284031215610a27575f80fd5b813567ffffffffffffffff811115610a3d575f80fd5b610a4984828501610943565b949350505050565b5f60208284031215610a61575f80fd5b5035919050565b5f60208284031215610a78575f80fd5b610a8182610914565b9392505050565b5f6020808352835180828501525f5b81811015610ab357858101830151858201604001528201610a97565b505f604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8181035f831280158383131683831282161715610b1a57610b1a610ae7565b5092915050565b634e487b7160e01b5f52603160045260245ffd5b808201808211156108c4576108c4610ae7565b818103818111156108c4576108c4610ae7565b600181811c90821680610b6f57607f821691505b602082108103610b8d57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561027a575f81815260208120601f850160051c81016020861015610bb95750805b601f850160051c820191505b81811015610bd857828155600101610bc5565b505050505050565b815167ffffffffffffffff811115610bfa57610bfa61092f565b610c0e81610c088454610b5b565b84610b93565b602080601f831160018114610c41575f8415610c2a5750858301515b5f19600386901b1c1916600185901b178555610bd8565b5f85815260208120601f198616915b82811015610c6f57888601518255948401946001909101908401610c50565b5085821015610c8c57878501515f19600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220e1678ddfacdd6a8bd00fd492b1a4d72fb7189d4261310bcfbd1ec8740466edac64736f6c63430008140033608060405234801561000f575f80fd5b507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e1500916760405161006f906020808252601e908201527f6172696d617061735f73745f616473202d3e20636f6e7374727563746f720000604082015260600190565b60405180910390a1610fb3806100845f395ff3fe608060405234801561000f575f80fd5b50600436106100e5575f3560e01c806364b1e3e81161008857806385148fd31161006357806385148fd3146101e65780639bf6400c146101f9578063a70fca8d1461020c578063cf1be5711461022f575f80fd5b806364b1e3e8146101bb578063715a0ae9146101cb57806377d7b514146101d3575f80fd5b80633e62601d116100c35780633e62601d1461016f5780634773bc3d14610182578063512b2963146101955780635a701bcc146101a8575f80fd5b80630b731f89146100e95780632d4adcd91461013a57806338d941931461014f575b5f80fd5b61011d6100f7366004610a88565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014d610148366004610a88565b610242565b005b61016261015d366004610ac2565b61024f565b6040516101319190610b26565b61016261017d366004610ac2565b6102f4565b61011d610190366004610a88565b6103f4565b61014d6101a3366004610b3f565b610471565b61014d6101b6366004610a88565b610496565b5f54604051908152602001610131565b61014d6104a0565b61014d6101e1366004610a88565b610532565b61014d6101f4366004610a88565b61053c565b61014d610207366004610b3f565b610694565b61021f61021a366004610a88565b6106e6565b6040519015158152602001610131565b61014d61023d366004610b3f565b6107af565b61024c81336107af565b50565b5f818154811061025d575f80fd5b905f5260205f20015f91509050805461027590610b99565b80601f01602080910402602001604051908101604052809291908181526020018280546102a190610b99565b80156102ec5780601f106102c3576101008083540402835291602001916102ec565b820191905f5260205f20905b8154815290600101906020018083116102cf57829003601f168201915b505050505081565b5f54606090821061034c5760405162461bcd60e51b815260206004820152601960248201527f506f736963696f6e2066756572612064652072616e676f2e200000000000000060448201526064015b60405180910390fd5b5f828154811061035e5761035e610bd1565b905f5260205f2001805461037190610b99565b80601f016020809104026020016040519081016040528092919081815260200182805461039d90610b99565b80156103e85780601f106103bf576101008083540402835291602001916103e8565b820191905f5260205f20905b8154815290600101906020018083116103cb57829003601f168201915b50505050509050919050565b5f6103fe826106e6565b6104425760405162461bcd60e51b8152602060048201526015602482015274027379032bc34b9ba329032b9b2903b30b637b9171605d1b6044820152606401610343565b6001826040516104529190610be5565b908152604051908190036020019020546001600160a01b031692915050565b5f61047c8383610875565b90508015155f036104915761049183836107af565b505050565b61024c8133610694565b5f54805b6104af600182610c14565b90505f811261052e5760015f82815481106104cc576104cc610bd1565b905f5260205f20016040516104e19190610c3a565b90815260405190819003602001902080546001600160a01b03191690555f80548061050e5761050e610cac565b600190038181905f5260205f20015f61052791906109a1565b90556104a4565b5050565b61024c8133610471565b60018160405161054c9190610be5565b90815260405190819003602001902080546001600160a01b03191690555f80545b808210156104915773__$b8aea4b0d65a9a3624a5e62f85f41dcce2$__6376332c2d5f84815481106105a1576105a1610bd1565b905f5260205f2001856040518363ffffffff1660e01b81526004016105c7929190610cc0565b602060405180830381865af41580156105e2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106069190610d5a565b15610682575f610617600183610d79565b8154811061062757610627610bd1565b905f5260205f20015f838154811061064157610641610bd1565b905f5260205f200190816106559190610dd9565b505f80548061066657610666610cac565b600190038181905f5260205f20015f61067f91906109a1565b90555b61068d826001610eb4565b915061056d565b5f61069f8383610875565b9050806104915760405162461bcd60e51b8152602060048201526015602482015274027379032bc34b9ba329032b9b2903b30b637b9171605d1b6044820152606401610343565b5f805481905b808210156107a65773__$b8aea4b0d65a9a3624a5e62f85f41dcce2$__6376332c2d5f848154811061072057610720610bd1565b905f5260205f2001866040518363ffffffff1660e01b8152600401610746929190610cc0565b602060405180830381865af4158015610761573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107859190610d5a565b15610794575060019392505050565b61079f826001610eb4565b91506106ec565b505f9392505050565b6107b8826106e6565b156107fd5760405162461bcd60e51b815260206004820152601560248201527402cb09032bc34b9ba329032b9b2903b30b637b9171605d1b6044820152606401610343565b8060018360405161080e9190610be5565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555f80546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563016104918382610ec7565b5f805481905b808210156109985773__$b8aea4b0d65a9a3624a5e62f85f41dcce2$__6376332c2d5f84815481106108af576108af610bd1565b905f5260205f2001876040518363ffffffff1660e01b81526004016108d5929190610cc0565b602060405180830381865af41580156108f0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109149190610d5a565b156109865760019250845f838154811061093057610930610bd1565b905f5260205f200190816109449190610ec7565b50836001866040516109569190610be5565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555b610991826001610eb4565b915061087b565b50505b92915050565b5080546109ad90610b99565b5f825580601f106109bc575050565b601f0160209004905f5260205f209081019061024c91905b808211156109e7575f81556001016109d4565b5090565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112610a0e575f80fd5b813567ffffffffffffffff80821115610a2957610a296109eb565b604051601f8301601f19908116603f01168101908282118183101715610a5157610a516109eb565b81604052838152866020858801011115610a69575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f60208284031215610a98575f80fd5b813567ffffffffffffffff811115610aae575f80fd5b610aba848285016109ff565b949350505050565b5f60208284031215610ad2575f80fd5b5035919050565b5f5b83811015610af3578181015183820152602001610adb565b50505f910152565b5f8151808452610b12816020860160208601610ad9565b601f01601f19169290920160200192915050565b602081525f610b386020830184610afb565b9392505050565b5f8060408385031215610b50575f80fd5b823567ffffffffffffffff811115610b66575f80fd5b610b72858286016109ff565b92505060208301356001600160a01b0381168114610b8e575f80fd5b809150509250929050565b600181811c90821680610bad57607f821691505b602082108103610bcb57634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603260045260245ffd5b5f8251610bf6818460208701610ad9565b9190910192915050565b634e487b7160e01b5f52601160045260245ffd5b8181035f831280158383131683831282161715610c3357610c33610c00565b5092915050565b5f808354610c4781610b99565b60018281168015610c5f5760018114610c7457610ca0565b60ff1984168752821515830287019450610ca0565b875f526020805f205f5b85811015610c975781548a820152908401908201610c7e565b50505082870194505b50929695505050505050565b634e487b7160e01b5f52603160045260245ffd5b604081525f808454610cd181610b99565b806040860152606060018084165f8114610cf25760018114610d0c57610d3a565b60ff1985168884015283151560051b880183019550610d3a565b895f526020805f205f5b86811015610d315781548b8201870152908401908201610d16565b8a018501975050505b50505050508281036020840152610d518185610afb565b95945050505050565b5f60208284031215610d6a575f80fd5b81518015158114610b38575f80fd5b8181038181111561099b5761099b610c00565b601f821115610491575f81815260208120601f850160051c81016020861015610db25750805b601f850160051c820191505b81811015610dd157828155600101610dbe565b505050505050565b818103610de4575050565b610dee8254610b99565b67ffffffffffffffff811115610e0657610e066109eb565b610e1a81610e148454610b99565b84610d8c565b5f601f821160018114610e4b575f8315610e345750848201545b5f19600385901b1c1916600184901b178455610ead565b5f85815260209020601f198416905f86815260209020845b83811015610e835782860154825560019586019590910190602001610e63565b5085831015610ea057818501545f19600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b8082018082111561099b5761099b610c00565b815167ffffffffffffffff811115610ee157610ee16109eb565b610eef81610e148454610b99565b602080601f831160018114610f22575f8415610f0b5750858301515b5f19600386901b1c1916600185901b178555610dd1565b5f85815260208120601f198616915b82811015610f5057888601518255948401946001909101908401610f31565b5085821015610f6d57878501515f19600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122072d4e43e712b131c20508f9a678ff9ea42f155585d6c27e808b09d7bf67d2a5264736f6c63430008140033a3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e15009167";

    public static final String FUNC_ACL_ARRAY = "acl_array";

    public static final String FUNC_ACTIVAR = "activar";

    public static final String FUNC_actualizar_administrador_usuario_clave_direccion = "actualizar_administrador_usuario_clave_direccion";

    public static final String FUNC_actualizar_direccion = "actualizar_direccion";

    public static final String FUNC_actualizar_texto = "actualizar_texto";

    public static final String FUNC_AUTO_BORRAR = "auto_borrar";

    public static final String FUNC_AUTO_CREAR = "auto_crear";

    public static final String FUNC_borrar_administrador = "borrar_administrador";

    public static final String FUNC_borrar_direccion = "borrar_direccion";

    public static final String FUNC_BORRAR_EMAIL = "borrar_email";

    public static final String FUNC_BORRAR_TEXTO = "borrar_texto";

    public static final String FUNC_COSTE = "coste";

    public static final String FUNC_crear = "crear";

    public static final String FUNC_CREAR_ADMINISTRADOR = "crear_administrador";

    public static final String FUNC_DIRECCIONES_TEXTOS_ARIMAPA = "direcciones_textos_arimapa";

    public static final String FUNC_ESTADO = "estado";

    public static final String FUNC_estar_direccion = "estar_direccion";

    public static final String FUNC_ESTAR_EMAIL = "estar_email";

    public static final String FUNC_ESTAR_TEXTO = "estar_texto";

    public static final String FUNC_INACTIVAR = "inactivar";

    public static final String FUNC_LEER_ADMINISTRADOR_POS = "leer_administrador_pos";

    public static final String FUNC_LEER_ADMINISTRADORES_NUM = "leer_administradores_num";

    public static final String FUNC_LEER_COSTE = "leer_coste";

    public static final String FUNC_LEER_DIRECCION = "leer_direccion";

    public static final String FUNC_LEER_DIRECCIONES_POS = "leer_direcciones_pos";

    public static final String FUNC_LEER_EMAIL = "leer_email";

    public static final String FUNC_LEER_EMAILS_POS = "leer_emails_pos";

    public static final String FUNC_LEER_NUM = "leer_num";

    public static final String FUNC_leer_texto = "leer_texto";

    public static final String FUNC_LEER_TEXTOS_POS = "leer_textos_pos";

    public static final String FUNC_LIMITAR = "limitar";

    public static final String FUNC_PONER_COSTE = "poner_coste";

    public static final String FUNC_REINICIAR = "reiniciar";

    public static final String FUNC_SER_ADMINISTRADOR = "ser_administrador";

    public static final String FUNC_TEXTOS_DIRECCIONES_ARIMAPA = "textos_direcciones_arimapa";

    public static final Event AD_AD_U_EVENT = new Event("Ad_ad_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event AD_U_U_EVENT = new Event("Ad_u_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event MENSAJE_EVENT = new Event("Mensaje", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event OK_EVENT = new Event("Ok", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ST_U_EVENT = new Event("St_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Direcciones_emails_mapas(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Direcciones_emails_mapas(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Direcciones_emails_mapas(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Direcciones_emails_mapas(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<Ad_ad_uEventResponse> getAd_ad_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_AD_U_EVENT, transactionReceipt);
        ArrayList<Ad_ad_uEventResponse> responses = new ArrayList<Ad_ad_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.origen = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.destino = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_ad_uEventResponse getAd_ad_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_AD_U_EVENT, log);
        Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
        typedResponse.log = log;
        typedResponse.origen = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.destino = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_ad_uEventFromLog(log));
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_AD_U_EVENT));
        return ad_ad_uEventFlowable(filter);
    }

    public static List<Ad_u_uEventResponse> getAd_u_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_U_U_EVENT, transactionReceipt);
        ArrayList<Ad_u_uEventResponse> responses = new ArrayList<Ad_u_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_u_uEventResponse typedResponse = new Ad_u_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.direccion = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_u_uEventResponse getAd_u_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_U_U_EVENT, log);
        Ad_u_uEventResponse typedResponse = new Ad_u_uEventResponse();
        typedResponse.log = log;
        typedResponse.direccion = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_u_uEventResponse> ad_u_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_u_uEventFromLog(log));
    }

    public Flowable<Ad_u_uEventResponse> ad_u_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_U_U_EVENT));
        return ad_u_uEventFlowable(filter);
    }

    public static List<MensajeEventResponse> getMensajeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MENSAJE_EVENT, transactionReceipt);
        ArrayList<MensajeEventResponse> responses = new ArrayList<MensajeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MensajeEventResponse typedResponse = new MensajeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MensajeEventResponse getMensajeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MENSAJE_EVENT, log);
        MensajeEventResponse typedResponse = new MensajeEventResponse();
        typedResponse.log = log;
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMensajeEventFromLog(log));
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MENSAJE_EVENT));
        return mensajeEventFlowable(filter);
    }

    public static List<OkEventResponse> getOkEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OK_EVENT, transactionReceipt);
        ArrayList<OkEventResponse> responses = new ArrayList<OkEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OkEventResponse typedResponse = new OkEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OkEventResponse getOkEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OK_EVENT, log);
        OkEventResponse typedResponse = new OkEventResponse();
        typedResponse.log = log;
        typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<OkEventResponse> okEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOkEventFromLog(log));
    }

    public Flowable<OkEventResponse> okEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OK_EVENT));
        return okEventFlowable(filter);
    }

    public static List<St_uEventResponse> getSt_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ST_U_EVENT, transactionReceipt);
        ArrayList<St_uEventResponse> responses = new ArrayList<St_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            St_uEventResponse typedResponse = new St_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.texto = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static St_uEventResponse getSt_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ST_U_EVENT, log);
        St_uEventResponse typedResponse = new St_uEventResponse();
        typedResponse.log = log;
        typedResponse.texto = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<St_uEventResponse> st_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSt_uEventFromLog(log));
    }

    public Flowable<St_uEventResponse> st_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ST_U_EVENT));
        return st_uEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple3<String, String, byte[]>> acl_array(BigInteger param0) {
        final Function function = new Function(FUNC_ACL_ARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteFunctionCall<Tuple3<String, String, byte[]>>(function,
                new Callable<Tuple3<String, String, byte[]>>() {
                    @Override
                    public Tuple3<String, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> activar() {
        final Function function = new Function(
                FUNC_ACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String direccion, String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_direccion(String texto) {
        final Function function = new Function(
                FUNC_actualizar_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(texto)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_direccion(String texto, String direccion) {
        final Function function = new Function(
                FUNC_actualizar_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(texto), 
                new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_texto(String direccion, String texto) {
        final Function function = new Function(
                FUNC_actualizar_texto, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(texto)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_texto(String texto) {
        final Function function = new Function(
                FUNC_actualizar_texto, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(texto)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> auto_borrar(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_AUTO_BORRAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> auto_crear(String email, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_AUTO_CREAR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador() {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador(String direccion) {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_direccion(String direccion) {
        final Function function = new Function(
                FUNC_borrar_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_direccion() {
        final Function function = new Function(
                FUNC_borrar_direccion, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_email(String email) {
        final Function function = new Function(
                FUNC_BORRAR_EMAIL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_texto(String texto) {
        final Function function = new Function(
                FUNC_BORRAR_TEXTO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(texto)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> coste() {
        final Function function = new Function(FUNC_COSTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> crear(String email) {
        final Function function = new Function(
                FUNC_crear, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crear(String direccion, String email) {
        final Function function = new Function(
                FUNC_crear, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crear_administrador(String direccion, String usuario, byte[] clave) {
        final Function function = new Function(
                FUNC_CREAR_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> direcciones_textos_arimapa() {
        final Function function = new Function(FUNC_DIRECCIONES_TEXTOS_ARIMAPA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> estado() {
        final Function function = new Function(FUNC_ESTADO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> estar_direccion() {
        final Function function = new Function(FUNC_estar_direccion, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> estar_direccion(String direccion) {
        final Function function = new Function(FUNC_estar_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> estar_email(String email) {
        final Function function = new Function(FUNC_ESTAR_EMAIL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(email)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> estar_texto(String texto) {
        final Function function = new Function(FUNC_ESTAR_TEXTO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(texto)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> inactivar() {
        final Function function = new Function(
                FUNC_INACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> leer_administrador_pos(String direccion) {
        final Function function = new Function(FUNC_LEER_ADMINISTRADOR_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_administradores_num() {
        final Function function = new Function(FUNC_LEER_ADMINISTRADORES_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_coste() {
        final Function function = new Function(FUNC_LEER_COSTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> leer_direccion(String email) {
        final Function function = new Function(FUNC_LEER_DIRECCION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(email)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_direcciones_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_email(String direccion) {
        final Function function = new Function(FUNC_LEER_EMAIL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_emails_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_EMAILS_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> leer_num() {
        final Function function = new Function(FUNC_LEER_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> leer_texto() {
        final Function function = new Function(FUNC_leer_texto, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_texto(String direccion) {
        final Function function = new Function(FUNC_leer_texto, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_textos_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_TEXTOS_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> limitar() {
        final Function function = new Function(
                FUNC_LIMITAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_coste(BigInteger _coste) {
        final Function function = new Function(
                FUNC_PONER_COSTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_coste)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reiniciar() {
        final Function function = new Function(
                FUNC_REINICIAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> ser_administrador(String direccion) {
        final Function function = new Function(FUNC_SER_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> textos_direcciones_arimapa() {
        final Function function = new Function(FUNC_TEXTOS_DIRECCIONES_ARIMAPA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static Direcciones_emails_mapas load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Direcciones_emails_mapas(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Direcciones_emails_mapas load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Direcciones_emails_mapas(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Direcciones_emails_mapas load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Direcciones_emails_mapas(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Direcciones_emails_mapas load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Direcciones_emails_mapas(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Direcciones_emails_mapas> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Direcciones_emails_mapas.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Direcciones_emails_mapas> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Direcciones_emails_mapas.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Direcciones_emails_mapas> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Direcciones_emails_mapas.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Direcciones_emails_mapas> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Direcciones_emails_mapas.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Ad_ad_uEventResponse extends BaseEventResponse {
        public String origen;

        public String destino;

        public BigInteger cantidad;

        public String mensaje;
    }

    public static class Ad_u_uEventResponse extends BaseEventResponse {
        public String direccion;

        public BigInteger cantidad;

        public BigInteger id;

        public String mensaje;
    }

    public static class MensajeEventResponse extends BaseEventResponse {
        public String mensaje;
    }

    public static class OkEventResponse extends BaseEventResponse {
        public Boolean es;

        public String mensaje;
    }

    public static class St_uEventResponse extends BaseEventResponse {
        public String texto;

        public BigInteger cantidad;
    }
}
