package innui.web3j.generated.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.8.
 */
@SuppressWarnings("rawtypes")
public class Direcciones_emails_mapas extends Contract {
    public static final String BINARY = "60806040526001805460ff1916811790553480156200001c575f80fd5b505f80516020620057e98339815191526040516200006b9060208082526018908201527f6d696e696261736573202d3e20636f6e7374727563746f720000000000000000604082015260600190565b60405180910390a160408051608081018252606060208083018281525f84860152828401929092523383528351808501855260048152631c9bdbdd60e21b918101919091529052905169726f6f745f636c61766560b01b8152600290600a01602060405180830381855afa158015620000e6573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906200010b91906200040d565b6040828101919091528051600180825281830190925290602080830190803683375050506060820181905280516d7065726d69736f5f6d6178696d6f60901b91905f906200015d576200015d62000439565b6020908102919091018101919091525f8054600181018255908052825160049091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039093166001600160a01b03199093169290921782559183015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5640190620001f69082620004d9565b5060408201516002820155606082015180516200021e9160038401916020909101906200038d565b505050505f80516020620057e98339815191526040516200027f9060208082526026908201527f62696172696d617061735f61645f73745f73745f616473202d3e20636f6e7374604082015265393ab1ba37b960d11b606082015260800190565b60405180910390a16040516200029590620003db565b604051809103905ff080158015620002af573d5f803e3d5ffd5b506001806101000a8154816001600160a01b0302191690836001600160a01b03160217905550604051620002e390620003e9565b604051809103905ff080158015620002fd573d5f803e3d5ffd5b50600280546001600160a01b03929092166001600160a01b03199092169190911790556040515f80516020620057e9833981519152906200037f9060208082526027908201527f646972656363696f6e65735f656d61696c735f6d61706173202d3e20636f6e736040820152663a393ab1ba37b960c91b606082015260800190565b60405180910390a1620005a1565b828054828255905f5260205f20908101928215620003c9579160200282015b82811115620003c9578251825591602001919060010190620003ac565b50620003d7929150620003f7565b5090565b610e43806200396f83390190565b61103780620047b283390190565b5b80821115620003d7575f8155600101620003f8565b5f602082840312156200041e575f80fd5b5051919050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b600181811c908216806200046257607f821691505b6020821081036200048157634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115620004d4575f81815260208120601f850160051c81016020861015620004af5750805b601f850160051c820191505b81811015620004d057828155600101620004bb565b5050505b505050565b81516001600160401b03811115620004f557620004f562000425565b6200050d816200050684546200044d565b8462000487565b602080601f83116001811462000543575f84156200052b5750858301515b5f19600386901b1c1916600185901b178555620004d0565b5f85815260208120601f198616915b82811015620005735788860151825594840194600190910190840162000552565b50858210156200059157878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b6133c080620005af5f395ff3fe6080604052600436106102a5575f3560e01c80638dfdc1f01161016f578063ba19f56f116100d8578063e1b665e011610092578063f5a571361161006d578063f5a57136146107d6578063f9d06c4d146107ea578063fabe8b1014610809578063fde12e311461081d575f80fd5b8063e1b665e014610784578063e3dbc94414610798578063ec72a5db146107b7575f80fd5b8063ba19f56f146106d0578063bdfbdd88146106ef578063c49c3d0514610713578063cabbdd3214610727578063d0dac26314610746578063de660d3b14610765575f80fd5b8063aca7c0d011610129578063aca7c0d014610643578063af2ed37a14610662578063b0bcaeb214610681578063b2be353c14610695578063b73d6dbf146106a9578063b776a7a2146106bc575f80fd5b80638dfdc1f0146105855780638e3ee7ba146105995780639570c475146105c7578063a1a04952146105e6578063a9a4079c14610605578063abd60afd14610624575f80fd5b806363ef0c2011610211578063715a0ae9116101cb578063715a0ae9146104d457806378500f12146104e85780637b318b6e146105075780637b5fef86146105265780638040b60e1461053a578063879d541a14610566575f80fd5b806363ef0c201461040657806364b1e3e81461043d5780636675380814610451578063688e3467146104705780636bb9d38a146104965780636c92cef3146104b5575f80fd5b8063411b5e7211610262578063411b5e721461035157806343ec9f63146103655780634dc464371461038457806351bf9e63146103b3578063548f7953146103d2578063590331d1146103e7575f80fd5b806318728c7a146102a95780631d032d01146102d3578063238c7225146103005780632d4adcd91461030a5780632dd47cac146103295780632e9a7ff61461033d575b5f80fd5b3480156102b4575f80fd5b506102bd61083c565b6040516102ca9190612aa1565b60405180910390f35b3480156102de575f80fd5b506102f26102ed366004612ace565b610889565b6040519081526020016102ca565b610308610939565b005b348015610315575f80fd5b50610308610324366004612ba7565b6109a5565b348015610334575f80fd5b506103086109e1565b348015610348575f80fd5b506102bd610a1b565b34801561035c575f80fd5b50610308610a26565b348015610370575f80fd5b506102f261037f366004612ace565b610b9f565b34801561038f575f80fd5b506103a361039e366004612ace565b610be4565b60405190151581526020016102ca565b3480156103be575f80fd5b506103086103cd366004612ba7565b610c48565b3480156103dd575f80fd5b506102f260035481565b3480156103f2575f80fd5b506102bd610401366004612be1565b610c7e565b348015610411575f80fd5b50610425610420366004612ba7565b610cae565b6040516001600160a01b0390911681526020016102ca565b348015610448575f80fd5b506102f2610ced565b34801561045c575f80fd5b506103a361046b366004612ba7565b610d1b565b34801561047b575f80fd5b506001546104899060ff1681565b6040516102ca9190612c0c565b3480156104a1575f80fd5b506103086104b0366004612ace565b610d8a565b3480156104c0575f80fd5b506103086104cf366004612ba7565b610dc0565b3480156104df575f80fd5b50610308610eea565b3480156104f3575f80fd5b506102bd610502366004612ace565b610f19565b348015610512575f80fd5b50610308610521366004612c32565b610f59565b348015610531575f80fd5b506103a361112a565b348015610545575f80fd5b50610559610554366004612ace565b611168565b6040516102ca9190612cb6565b348015610571575f80fd5b50610425610580366004612be1565b6111f0565b348015610590575f80fd5b506102f261121f565b3480156105a4575f80fd5b506105b86105b3366004612be1565b61125d565b6040516102ca93929190612ce7565b3480156105d2575f80fd5b50600254610425906001600160a01b031681565b3480156105f1575f80fd5b50610308610600366004612d1a565b611320565b348015610610575f80fd5b5061030861061f366004612d67565b611357565b34801561062f575f80fd5b5061030861063e366004612d1a565b611576565b34801561064e575f80fd5b5061030861065d366004612dd8565b6115ad565b34801561066d575f80fd5b5061030861067c366004612be1565b6115e4565b34801561068c575f80fd5b5061030861160e565b3480156106a0575f80fd5b50610308611617565b6103086106b7366004612ba7565b611766565b3480156106c7575f80fd5b506103086117d0565b3480156106db575f80fd5b506102bd6106ea366004612be1565b611806565b3480156106fa575f80fd5b506001546104259061010090046001600160a01b031681565b34801561071e575f80fd5b50610308611874565b348015610732575f80fd5b506103a3610741366004612ba7565b6118ac565b348015610751575f80fd5b506102bd610760366004612ace565b6118eb565b348015610770575f80fd5b5061030861077f366004612ba7565b611966565b34801561078f575f80fd5b5061055961199c565b3480156107a3575f80fd5b506103086107b2366004612e27565b6119b9565b3480156107c2575f80fd5b506103a36107d1366004612ace565b611adf565b3480156107e1575f80fd5b506102f2611b1e565b3480156107f5575f80fd5b50610308610804366004612ace565b611b5a565b348015610814575f80fd5b506102f2611d21565b348015610828575f80fd5b50610308610837366004612ba7565b611d5e565b60605f60015460ff16600281111561085657610856612bf8565b1461087c5760405162461bcd60e51b815260040161087390612e9a565b60405180910390fd5b610884610a1b565b905090565b5f8060015460ff1660028111156108a2576108a2612bf8565b146108bf5760405162461bcd60e51b815260040161087390612e9a565b5f805b5f5481101561091b575f81815481106108dd576108dd612ed1565b5f9182526020909120600490910201546001600160a01b0390811690851603610909576001915061091b565b610914816001612ef9565b90506108c2565b811561092a5791506109349050565b505f199392505050565b919050565b5f60015460ff16600281111561095157610951612bf8565b1461096e5760405162461bcd60e51b815260040161087390612e9a565b6003543410156109905760405162461bcd60e51b815260040161087390612f0c565b610998610a26565b336109a281611d94565b50565b6109ae33610be4565b6109ca5760405162461bcd60e51b815260040161087390612f5e565b336109d3610a26565b6109dd8183611e9b565b5050565b6109ea33610be4565b610a065760405162461bcd60e51b815260040161087390612f5e565b600180545f919060ff191681835b0217905550565b6060610884336118eb565b5f60015460ff166002811115610a3e57610a3e612bf8565b14610a5b5760405162461bcd60e51b815260040161087390612e9a565b5f6301e1338090505f8060018054906101000a90046001600160a01b03166001600160a01b03166364b1e3e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ad89190612fa6565b90505f80844211610b365760405162461bcd60e51b815260206004820152602260248201527f56616c6f7220657863657369766f20646520736567756e646f735f6c696d6974604482015261329760f11b6064820152608401610873565b5f610b418642612fbd565b90505b83831015610b9757610b55836111f0565b9450610b6085610b9f565b915080821115610b8557610b7385610d8a565b610b7e600185612fbd565b9350610b44565b610b90836001612ef9565b9250610b44565b505050505050565b5f8060015460ff166002811115610bb857610bb8612bf8565b14610bd55760405162461bcd60e51b815260040161087390612e9a565b610bde826120e3565b92915050565b5f80805b5f54811015610c41575f8181548110610c0357610c03612ed1565b5f9182526020909120600490910201546001600160a01b0390811690851603610c2f5760019150610c41565b610c3a816001612ef9565b9050610be8565b5092915050565b610c5133610be4565b610c6d5760405162461bcd60e51b815260040161087390612f5e565b610c75610a26565b6109a281612160565b6060610c8933610be4565b610ca55760405162461bcd60e51b815260040161087390612f5e565b610bde82611806565b5f8060015460ff166002811115610cc757610cc7612bf8565b14610ce45760405162461bcd60e51b815260040161087390612e9a565b610bde8261216a565b5f610cf733610be4565b610d135760405162461bcd60e51b815260040161087390612f5e565b6108846121d9565b60025460405163a70fca8d60e01b81525f916001600160a01b03169063a70fca8d90610d4b908590600401612aa1565b602060405180830381865afa158015610d66573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bde9190612fd0565b610d9333610be4565b610daf5760405162461bcd60e51b815260040161087390612f5e565b610db7610a26565b6109a281611d94565b600254604051634773bc3d60e01b81525f916001600160a01b031690634773bc3d90610df0908590600401612aa1565b602060405180830381865afa158015610e0b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e2f9190612fef565b6002546040516385148fd360e01b81529192506001600160a01b0316906385148fd390610e60908590600401612aa1565b5f604051808303815f87803b158015610e77575f80fd5b505af1158015610e89573d5f803e3d5ffd5b50506001546040516387e4c82160e01b81526001600160a01b03858116600483015261010090920490911692506387e4c82191506024015b5f604051808303815f87803b158015610ed8575f80fd5b505af1158015610b97573d5f803e3d5ffd5b610ef333610be4565b610f0f5760405162461bcd60e51b815260040161087390612f5e565b610f1761224d565b565b60605f60015460ff166002811115610f3357610f33612bf8565b14610f505760405162461bcd60e51b815260040161087390612e9a565b610bde826118eb565b610f6233610be4565b610f7e5760405162461bcd60e51b815260040161087390612f5e565b5f54600210610ff55760405162461bcd60e51b815260206004820152603e60248201527f536f6c6f207365207065726d6974652061637475616c697a617220736920686160448201527f79206d617320646520646f732061646d696e6973747261646f7265732e2000006064820152608401610873565b5f610fff85610889565b90505f8112156110215760405162461bcd60e51b815260040161087390612f5e565b83511561105857835f828154811061103b5761103b612ed1565b905f5260205f20906004020160010190816110569190613087565b505b8251156110d35760028360405161106f9190613143565b602060405180830381855afa15801561108a573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906110ad9190612fa6565b5f82815481106110bf576110bf612ed1565b905f5260205f209060040201600201819055505b6001600160a01b0382161561112357815f82815481106110f5576110f5612ed1565b5f918252602090912060049091020180546001600160a01b0319166001600160a01b03929092169190911790555b5050505050565b5f8060015460ff16600281111561114357611143612bf8565b146111605760405162461bcd60e51b815260040161087390612e9a565b610884612312565b60408051808201909152606081525f6020820152600154604051632c2b369760e21b81526001600160a01b0384811660048301526101009092049091169063b0acda5c906024015f60405180830381865afa1580156111c9573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610bde91908101906131a0565b5f6111fa33610be4565b6112165760405162461bcd60e51b815260040161087390612f5e565b610bde8261231c565b5f8060015460ff16600281111561123857611238612bf8565b146112555760405162461bcd60e51b815260040161087390612e9a565b610884612352565b5f818154811061126b575f80fd5b5f918252602090912060049091020180546001820180546001600160a01b039092169350906112999061300a565b80601f01602080910402602001604051908101604052809291908181526020018280546112c59061300a565b80156113105780601f106112e757610100808354040283529160200191611310565b820191905f5260205f20905b8154815290600101906020018083116112f357829003601f168201915b5050505050908060020154905083565b61132933610be4565b6113455760405162461bcd60e51b815260040161087390612f5e565b61134d610a26565b6109dd8282611e9b565b61136033610be4565b61137c5760405162461bcd60e51b815260040161087390612f5e565b5f805b5f548110156113d8575f818154811061139a5761139a612ed1565b5f9182526020909120600490910201546001600160a01b03908116908616036113c657600191506113d8565b6113d1816001612ef9565b905061137f565b81156114425760405162461bcd60e51b815260206004820152603360248201527f45736120646972656363696f6e2064652061646d696e6973747261646f7220796044820152720309032b9ba30903932b3b4b9ba3930b230971606d1b6064820152608401610873565b604080516080810182525f818301526060808201526001600160a01b038716815260208101869052905160029061147a908690613143565b602060405180830381855afa158015611495573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906114b89190612fa6565b60408201525f805460018101825590805281517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563600490920291820180546001600160a01b0319166001600160a01b03909216919091178155602083015183927f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401906115459082613087565b50604082015160028201556060820151805161156b91600384019160209091019061296d565b505050505050505050565b61157f33610be4565b61159b5760405162461bcd60e51b815260040161087390612f5e565b6115a3610a26565b6109dd828261235c565b6115b633610be4565b6115d25760405162461bcd60e51b815260040161087390612f5e565b6115da610a26565b6109dd828261265f565b6115ed33610be4565b6116095760405162461bcd60e51b815260040161087390612f5e565b600355565b610f1733610d8a565b61162033610be4565b61163c5760405162461bcd60e51b815260040161087390612f5e565b5f61164633610889565b90505f8112156116685760405162461bcd60e51b815260040161087390612f5e565b5f805461167790600190612fbd565b8154811061168757611687612ed1565b905f5260205f2090600402015f82815481106116a5576116a5612ed1565b5f9182526020909120825460049092020180546001600160a01b0319166001600160a01b039092169190911781556001808201906116e59084018261322b565b506002820154816002015560038201816003019080546117069291906129b6565b509050505f80548061171a5761171a6132f8565b5f8281526020812060045f199093019283020180546001600160a01b03191681559061174960018301826129f2565b600282015f9055600382015f61175f9190612a29565b5050905550565b5f60015460ff16600281111561177e5761177e612bf8565b1461179b5760405162461bcd60e51b815260040161087390612e9a565b6003543410156117bd5760405162461bcd60e51b815260040161087390612f0c565b6117c5610a26565b336109dd8183611e9b565b6117d933610be4565b6117f55760405162461bcd60e51b815260040161087390612f5e565b60018054819060ff19168180610a14565b600254604051633e62601d60e01b8152600481018390526060916001600160a01b031690633e62601d906024015f60405180830381865afa15801561184d573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610bde919081019061330c565b61187d33610be4565b6118995760405162461bcd60e51b815260040161087390612f5e565b600180546002919060ff19168183610a14565b5f8060015460ff1660028111156118c5576118c5612bf8565b146118e25760405162461bcd60e51b815260040161087390612e9a565b610bde82610d1b565b600154604051632c2b369760e21b81526001600160a01b0383811660048301526060926101009004169063b0acda5c906024015f60405180830381865afa158015611938573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261195f91908101906131a0565b5192915050565b61196f33610be4565b61198b5760405162461bcd60e51b815260040161087390612f5e565b611993610a26565b6109a28161292c565b60408051808201909152606081525f602082015261088433611168565b6119c233610be4565b6119de5760405162461bcd60e51b815260040161087390612f5e565b335f6119e982610889565b90505f811215611a0b5760405162461bcd60e51b815260040161087390612f5e565b845115611a4257845f8281548110611a2557611a25612ed1565b905f5260205f2090600402016001019081611a409190613087565b505b835115611abd57600284604051611a599190613143565b602060405180830381855afa158015611a74573d5f803e3d5ffd5b5050506040513d601f19601f82011682018060405250810190611a979190612fa6565b5f8281548110611aa957611aa9612ed1565b905f5260205f209060040201600201819055505b6001600160a01b0383161561112357825f82815481106110f5576110f5612ed1565b5f8060015460ff166002811115611af857611af8612bf8565b14611b155760405162461bcd60e51b815260040161087390612e9a565b610bde82612936565b5f8060015460ff166002811115611b3757611b37612bf8565b14611b545760405162461bcd60e51b815260040161087390612e9a565b505f5490565b611b6333610be4565b611b7f5760405162461bcd60e51b815260040161087390612f5e565b5f54600210611bf65760405162461bcd60e51b815260206004820152603a60248201527f536f6c6f207365207065726d69746520626f7272617220736920686179206d6160448201527f7320646520646f732061646d696e6973747261646f7265732e200000000000006064820152608401610873565b5f611c0082610889565b90505f811215611c225760405162461bcd60e51b815260040161087390612f5e565b5f8054611c3190600190612fbd565b81548110611c4157611c41612ed1565b905f5260205f2090600402015f8281548110611c5f57611c5f612ed1565b5f9182526020909120825460049092020180546001600160a01b0319166001600160a01b03909216919091178155600180820190611c9f9084018261322b565b50600282015481600201556003820181600301908054611cc09291906129b6565b509050505f805480611cd457611cd46132f8565b5f8281526020812060045f199093019283020180546001600160a01b031916815590611d0360018301826129f2565b600282015f9055600382015f611d199190612a29565b505090555050565b5f8060015460ff166002811115611d3a57611d3a612bf8565b14611d575760405162461bcd60e51b815260040161087390612e9a565b5060035490565b611d6733610be4565b611d835760405162461bcd60e51b815260040161087390612f5e565b611d8b610a26565b6109a281610dc0565b600154604051632c2b369760e21b81526001600160a01b0383811660048301525f926101009004169063b0acda5c906024015f60405180830381865afa158015611de0573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611e0791908101906131a0565b516001546040516387e4c82160e01b81526001600160a01b038581166004830152929350610100909104909116906387e4c821906024015f604051808303815f87803b158015611e55575f80fd5b505af1158015611e67573d5f803e3d5ffd5b50506002546040516385148fd360e01b81526001600160a01b0390911692506385148fd39150610ec1908490600401612aa1565b6001546040516374afc8d760e01b81526001600160a01b038481166004830152610100909204909116906374afc8d790602401602060405180830381865afa158015611ee9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f0d9190612fd0565b15611f765760405162461bcd60e51b815260206004820152603360248201527f4c6120646972656363696f6e207961206861207369646f206372656164612028604482015272032b9ba30b934b0903932b832ba34b23094971606d1b6064820152608401610873565b60025460405163a70fca8d60e01b81526001600160a01b039091169063a70fca8d90611fa6908490600401612aa1565b602060405180830381865afa158015611fc1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611fe59190612fd0565b1561204e5760405162461bcd60e51b815260206004820152603360248201527f456c20746578746f207961206861207369646f207574696c697a61646f2e2028604482015272032b9ba30b934b0903932b832ba34b23794971606d1b6064820152608401610873565b6001546040516350d024a960e11b81526101009091046001600160a01b03169063a1a0495290612084908590859060040161333e565b5f604051808303815f87803b15801561209b575f80fd5b505af11580156120ad573d5f803e3d5ffd5b505060025460405163cf1be57160e01b81526001600160a01b03909116925063cf1be5719150610ec19084908690600401613361565b600154604051632c2b369760e21b81526001600160a01b0383811660048301525f926101009004169063b0acda5c906024015f60405180830381865afa15801561212f573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261215691908101906131a0565b6020015192915050565b6109a281336115ad565b600254604051634773bc3d60e01b81525f916001600160a01b031690634773bc3d9061219a908590600401612aa1565b602060405180830381865afa1580156121b5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bde9190612fef565b5f60018054906101000a90046001600160a01b03166001600160a01b03166364b1e3e86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612229573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108849190612fa6565b60025f9054906101000a90046001600160a01b03166001600160a01b031663715a0ae96040518163ffffffff1660e01b81526004015f604051808303815f87803b158015612299575f80fd5b505af11580156122ab573d5f803e3d5ffd5b5050505060018054906101000a90046001600160a01b03166001600160a01b031663715a0ae96040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156122fa575f80fd5b505af115801561230c573d5f803e3d5ffd5b50505050565b5f61088433611adf565b600154604051633e62601d60e01b8152600481018390525f9161010090046001600160a01b031690633e62601d9060240161219a565b5f61088433610b9f565b6001546040516374afc8d760e01b81526001600160a01b038481166004830152610100909204909116906374afc8d790602401602060405180830381865afa1580156123aa573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123ce9190612fd0565b61241a5760405162461bcd60e51b815260206004820181905260248201527f4c6120646972656363696f6e206e6f206861207369646f206372656164612e206044820152606401610873565b600154604051632c2b369760e21b81526001600160a01b0384811660048301525f926101009004169063b0acda5c906024015f60405180830381865afa158015612466573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261248d91908101906131a0565b5160015460405163561088ab60e01b815291925061010090046001600160a01b03169063561088ab906124c6908690869060040161333e565b5f604051808303815f87803b1580156124dd575f80fd5b505af11580156124ef573d5f803e3d5ffd5b50506002546040516385148fd360e01b81526001600160a01b0390911692506385148fd39150612523908490600401612aa1565b5f604051808303815f87803b15801561253a575f80fd5b505af115801561254c573d5f803e3d5ffd5b505060025460405163a70fca8d60e01b81526001600160a01b03909116925063a70fca8d9150612580908590600401612aa1565b602060405180830381865afa15801561259b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125bf9190612fd0565b15612628576002546040516326fd900360e21b81526001600160a01b0390911690639bf6400c906125f69085908790600401613361565b5f604051808303815f87803b15801561260d575f80fd5b505af115801561261f573d5f803e3d5ffd5b50505050505050565b60025460405163cf1be57160e01b81526001600160a01b039091169063cf1be571906125f69085908790600401613361565b505050565b60025460405163a70fca8d60e01b81526001600160a01b039091169063a70fca8d9061268f908590600401612aa1565b602060405180830381865afa1580156126aa573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126ce9190612fd0565b61271a5760405162461bcd60e51b815260206004820152601f60248201527f456c20746578746f206e6f206861207369646f207574696c697a61646f2e20006044820152606401610873565b600254604051634773bc3d60e01b81525f916001600160a01b031690634773bc3d9061274a908690600401612aa1565b602060405180830381865afa158015612765573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127899190612fef565b6002546040516326fd900360e21b81529192506001600160a01b031690639bf6400c906127bc9086908690600401613361565b5f604051808303815f87803b1580156127d3575f80fd5b505af11580156127e5573d5f803e3d5ffd5b50506001546040516387e4c82160e01b81526001600160a01b03858116600483015261010090920490911692506387e4c82191506024015f604051808303815f87803b158015612833575f80fd5b505af1158015612845573d5f803e3d5ffd5b50506001546040516374afc8d760e01b81526001600160a01b03868116600483015261010090920490911692506374afc8d79150602401602060405180830381865afa158015612897573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128bb9190612fd0565b156128f65760015460405163561088ab60e01b81526101009091046001600160a01b03169063561088ab906125f6908590879060040161333e565b6001546040516350d024a960e11b81526101009091046001600160a01b03169063a1a04952906125f6908590879060040161333e565b6109a23382611576565b6001546040516374afc8d760e01b81526001600160a01b0383811660048301525f92610100900416906374afc8d790602401610d4b565b828054828255905f5260205f209081019282156129a6579160200282015b828111156129a657825182559160200191906001019061298b565b506129b2929150612a40565b5090565b828054828255905f5260205f209081019282156129a6575f5260205f209182015b828111156129a65782548255916001019190600101906129d7565b5080546129fe9061300a565b5f825580601f10612a0d575050565b601f0160209004905f5260205f20908101906109a29190612a40565b5080545f8255905f5260205f20908101906109a291905b5b808211156129b2575f8155600101612a41565b5f5b83811015612a6e578181015183820152602001612a56565b50505f910152565b5f8151808452612a8d816020860160208601612a54565b601f01601f19169290920160200192915050565b602081525f612ab36020830184612a76565b9392505050565b6001600160a01b03811681146109a2575f80fd5b5f60208284031215612ade575f80fd5b8135612ab381612aba565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612b2657612b26612ae9565b604052919050565b5f67ffffffffffffffff821115612b4757612b47612ae9565b50601f01601f191660200190565b5f82601f830112612b64575f80fd5b8135612b77612b7282612b2e565b612afd565b818152846020838601011115612b8b575f80fd5b816020850160208301375f918101602001919091529392505050565b5f60208284031215612bb7575f80fd5b813567ffffffffffffffff811115612bcd575f80fd5b612bd984828501612b55565b949350505050565b5f60208284031215612bf1575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b6020810160038310612c2c57634e487b7160e01b5f52602160045260245ffd5b91905290565b5f805f8060808587031215612c45575f80fd5b8435612c5081612aba565b9350602085013567ffffffffffffffff80821115612c6c575f80fd5b612c7888838901612b55565b94506040870135915080821115612c8d575f80fd5b50612c9a87828801612b55565b9250506060850135612cab81612aba565b939692955090935050565b602081525f825160406020840152612cd16060840182612a76565b9050602084015160408401528091505092915050565b6001600160a01b03841681526060602082018190525f90612d0a90830185612a76565b9050826040830152949350505050565b5f8060408385031215612d2b575f80fd5b8235612d3681612aba565b9150602083013567ffffffffffffffff811115612d51575f80fd5b612d5d85828601612b55565b9150509250929050565b5f805f60608486031215612d79575f80fd5b8335612d8481612aba565b9250602084013567ffffffffffffffff80821115612da0575f80fd5b612dac87838801612b55565b93506040860135915080821115612dc1575f80fd5b50612dce86828701612b55565b9150509250925092565b5f8060408385031215612de9575f80fd5b823567ffffffffffffffff811115612dff575f80fd5b612e0b85828601612b55565b9250506020830135612e1c81612aba565b809150509250929050565b5f805f60608486031215612e39575f80fd5b833567ffffffffffffffff80821115612e50575f80fd5b612e5c87838801612b55565b94506020860135915080821115612e71575f80fd5b50612e7e86828701612b55565b9250506040840135612e8f81612aba565b809150509250925092565b6020808252601b908201527f456c20636f6e747261746f206e6f20657374612061637469766f2e0000000000604082015260600190565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b80820180821115610bde57610bde612ee5565b60208082526032908201527f4e6f207469656e6520666f6e646f73207061726120706167617220656c20636f604082015271039ba32903232b61039b2b93b34b1b4b797160751b606082015260800190565b60208082526028908201527f4c6120646972656363696f6e206e6f20657320646520756e2061646d696e697360408201526703a3930b237b917160c51b606082015260800190565b5f60208284031215612fb6575f80fd5b5051919050565b81810381811115610bde57610bde612ee5565b5f60208284031215612fe0575f80fd5b81518015158114612ab3575f80fd5b5f60208284031215612fff575f80fd5b8151612ab381612aba565b600181811c9082168061301e57607f821691505b60208210810361303c57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561265a575f81815260208120601f850160051c810160208610156130685750805b601f850160051c820191505b81811015610b9757828155600101613074565b815167ffffffffffffffff8111156130a1576130a1612ae9565b6130b5816130af845461300a565b84613042565b602080601f8311600181146130e8575f84156130d15750858301515b5f19600386901b1c1916600185901b178555610b97565b5f85815260208120601f198616915b82811015613116578886015182559484019460019091019084016130f7565b508582101561313357878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f8251613154818460208701612a54565b9190910192915050565b5f82601f83011261316d575f80fd5b815161317b612b7282612b2e565b81815284602083860101111561318f575f80fd5b612bd9826020830160208701612a54565b5f602082840312156131b0575f80fd5b815167ffffffffffffffff808211156131c7575f80fd5b90830190604082860312156131da575f80fd5b6040516040810181811083821117156131f5576131f5612ae9565b604052825182811115613206575f80fd5b6132128782860161315e565b8252506020830151602082015280935050505092915050565b818103613236575050565b613240825461300a565b67ffffffffffffffff81111561325857613258612ae9565b613266816130af845461300a565b5f601f821160018114613297575f83156132805750848201545b5f19600385901b1c1916600184901b178455611123565b5f85815260209020601f198416905f86815260209020845b838110156132cf57828601548255600195860195909101906020016132af565b5085831015613133579301545f1960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b5f52603160045260245ffd5b5f6020828403121561331c575f80fd5b815167ffffffffffffffff811115613332575f80fd5b612bd98482850161315e565b6001600160a01b03831681526040602082018190525f90612bd990830184612a76565b604081525f6133736040830185612a76565b905060018060a01b0383166020830152939250505056fea264697066735822122097b92bcd2b5232c0c2732d411c062857f07c9e38461a9d8b0c586a53068c880f64736f6c63430008140033608060405234801561000f575f80fd5b507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e150091676040516100799060208082526021908201527f6172696d617061735f61645f73745f736563202d3e20636f6e7374727563746f6040820152603960f91b606082015260800190565b60405180910390a1610db58061008e5f395ff3fe608060405234801561000f575f80fd5b5060043610610106575f3560e01c806364b1e3e81161009e57806387e4c8211161006e57806387e4c821146101f9578063a1a049521461020c578063b0acda5c1461021f578063b38f9adf1461023f578063c118796914610247575f80fd5b806364b1e3e8146101bb578063715a0ae9146101cb57806374afc8d7146101d357806377d7b514146101e6575f80fd5b80633e62601d116100d95780633e62601d1461016a57806347b68a5d1461017d578063561088ab146101955780635a701bcc146101a8575f80fd5b8063103b346f1461010a5780632b59d1fc1461011f5780632d4adcd91461012757806338d941931461013a575b5f80fd5b61011d610118366004610a65565b610268565b005b61011d61028d565b61011d610135366004610ab0565b610298565b61014d610148366004610aea565b6102a5565b6040516001600160a01b0390911681526020015b60405180910390f35b61014d610178366004610aea565b6102cc565b61018561034e565b6040519015158152602001610161565b61011d6101a3366004610a65565b61035d565b61011d6101b6366004610ab0565b6103af565b5f54604051908152602001610161565b61011d6103b9565b6101856101e1366004610b01565b610456565b61011d6101f4366004610ab0565b6104be565b61011d610207366004610b01565b6104c8565b61011d61021a366004610a65565b6105e4565b61023261022d366004610b01565b6106cd565b6040516101619190610b64565b6102326107ef565b61025a610255366004610b01565b61080c565b604051610161929190610b95565b5f61027383836108ad565b90508015155f036102885761028883836105e4565b505050565b610296336104c8565b565b6102a233826105e4565b50565b5f81815481106102b3575f80fd5b5f918252602090912001546001600160a01b0316905081565b5f805482106103225760405162461bcd60e51b815260206004820152601960248201527f506f736963696f6e2066756572612064652072616e676f2e200000000000000060448201526064015b60405180910390fd5b5f828154811061033457610334610bb6565b5f918252602090912001546001600160a01b031692915050565b5f61035833610456565b905090565b5f61036883836108ad565b9050806102885760405162461bcd60e51b8152602060048201526015602482015274027379032bc34b9ba329032b9b2903b30b637b9171605d1b6044820152606401610319565b6102a2338261035d565b5f54805b6103c8600182610bde565b90505f81126104525760015f8083815481106103e6576103e6610bb6565b5f9182526020808320909101546001600160a01b031683528201929092526040018120906104148282610963565b600182015f905550505f80548061042d5761042d610c04565b5f8281526020902081015f1990810180546001600160a01b03191690550190556103bd565b5050565b5f805481905b808210156104b557836001600160a01b03165f838154811061048057610480610bb6565b5f918252602090912001546001600160a01b0316036104a3575060019392505050565b6104ae826001610c18565b915061045c565b505f9392505050565b6102a23382610268565b6001600160a01b0381165f908152600160205260408120906104ea8282610963565b505f60019190910181905580545b8082101561028857826001600160a01b03165f838154811061051c5761051c610bb6565b5f918252602090912001546001600160a01b0316036105d2575f610541600183610c2b565b8154811061055157610551610bb6565b5f91825260208220015481546001600160a01b0390911691908490811061057a5761057a610bb6565b5f918252602082200180546001600160a01b0319166001600160a01b0393909316929092179091558054806105b1576105b1610c04565b5f8281526020902081015f1990810180546001600160a01b03191690550190555b6105dd826001610c18565b91506104f8565b6105ed82610456565b156106325760405162461bcd60e51b815260206004820152601560248201527402cb09032bc34b9ba329032b9b2903b30b637b9171605d1b6044820152606401610319565b604080518082018252828152426020808301919091526001600160a01b0385165f908152600190915291909120815182919081906106709082610cc3565b50602091909101516001918201555f8054918201815580527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0394909416939093179092555050565b60408051808201909152606081525f60208201526106ea82610456565b61072e5760405162461bcd60e51b8152602060048201526015602482015274027379032bc34b9ba329032b9b2903b30b637b9171605d1b6044820152606401610319565b6001600160a01b0382165f9081526001602052604090819020815180830190925280548290829061075e90610c3e565b80601f016020809104026020016040519081016040528092919081815260200182805461078a90610c3e565b80156107d55780601f106107ac576101008083540402835291602001916107d5565b820191905f5260205f20905b8154815290600101906020018083116107b857829003601f168201915b505050505081526020016001820154815250509050919050565b60408051808201909152606081525f6020820152610358336106cd565b60016020525f908152604090208054819061082690610c3e565b80601f016020809104026020016040519081016040528092919081815260200182805461085290610c3e565b801561089d5780601f106108745761010080835404028352916020019161089d565b820191905f5260205f20905b81548152906001019060200180831161088057829003601f168201915b5050505050908060010154905082565b5f805481905b8082101561095a57846001600160a01b03165f83815481106108d7576108d7610bb6565b5f918252602090912001546001600160a01b0316036109485760019250845f838154811061090757610907610bb6565b5f91825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591871681526001909152604090206109468582610cc3565b505b610953826001610c18565b91506108b3565b50505b92915050565b50805461096f90610c3e565b5f825580601f1061097e575050565b601f0160209004905f5260205f20908101906102a291905b808211156109a9575f8155600101610996565b5090565b80356001600160a01b03811681146109c3575f80fd5b919050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126109eb575f80fd5b813567ffffffffffffffff80821115610a0657610a066109c8565b604051601f8301601f19908116603f01168101908282118183101715610a2e57610a2e6109c8565b81604052838152866020858801011115610a46575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f8060408385031215610a76575f80fd5b610a7f836109ad565b9150602083013567ffffffffffffffff811115610a9a575f80fd5b610aa6858286016109dc565b9150509250929050565b5f60208284031215610ac0575f80fd5b813567ffffffffffffffff811115610ad6575f80fd5b610ae2848285016109dc565b949350505050565b5f60208284031215610afa575f80fd5b5035919050565b5f60208284031215610b11575f80fd5b610b1a826109ad565b9392505050565b5f81518084525f5b81811015610b4557602081850181015186830182015201610b29565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f825160406020840152610b7f6060840182610b21565b9050602084015160408401528091505092915050565b604081525f610ba76040830185610b21565b90508260208301529392505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8181035f831280158383131683831282161715610bfd57610bfd610bca565b5092915050565b634e487b7160e01b5f52603160045260245ffd5b8082018082111561095d5761095d610bca565b8181038181111561095d5761095d610bca565b600181811c90821680610c5257607f821691505b602082108103610c7057634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115610288575f81815260208120601f850160051c81016020861015610c9c5750805b601f850160051c820191505b81811015610cbb57828155600101610ca8565b505050505050565b815167ffffffffffffffff811115610cdd57610cdd6109c8565b610cf181610ceb8454610c3e565b84610c76565b602080601f831160018114610d24575f8415610d0d5750858301515b5f19600386901b1c1916600185901b178555610cbb565b5f85815260208120601f198616915b82811015610d5257888601518255948401946001909101908401610d33565b5085821015610d6f57878501515f19600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220c366b381b5b32610e8c8efcc819e6ca4d1edd7deb34093e8afd53d2f0fbc056b64736f6c63430008140033608060405234801561000f575f80fd5b507fa3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e1500916760405161006f906020808252601e908201527f6172696d617061735f73745f616473202d3e20636f6e7374727563746f720000604082015260600190565b60405180910390a1610fb3806100845f395ff3fe608060405234801561000f575f80fd5b50600436106100e5575f3560e01c806364b1e3e81161008857806385148fd31161006357806385148fd3146101e65780639bf6400c146101f9578063a70fca8d1461020c578063cf1be5711461022f575f80fd5b806364b1e3e8146101bb578063715a0ae9146101cb57806377d7b514146101d3575f80fd5b80633e62601d116100c35780633e62601d1461016f5780634773bc3d14610182578063512b2963146101955780635a701bcc146101a8575f80fd5b80630b731f89146100e95780632d4adcd91461013a57806338d941931461014f575b5f80fd5b61011d6100f7366004610a88565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014d610148366004610a88565b610242565b005b61016261015d366004610ac2565b61024f565b6040516101319190610b26565b61016261017d366004610ac2565b6102f4565b61011d610190366004610a88565b6103f4565b61014d6101a3366004610b3f565b610471565b61014d6101b6366004610a88565b610496565b5f54604051908152602001610131565b61014d6104a0565b61014d6101e1366004610a88565b610532565b61014d6101f4366004610a88565b61053c565b61014d610207366004610b3f565b610694565b61021f61021a366004610a88565b6106e6565b6040519015158152602001610131565b61014d61023d366004610b3f565b6107af565b61024c81336107af565b50565b5f818154811061025d575f80fd5b905f5260205f20015f91509050805461027590610b99565b80601f01602080910402602001604051908101604052809291908181526020018280546102a190610b99565b80156102ec5780601f106102c3576101008083540402835291602001916102ec565b820191905f5260205f20905b8154815290600101906020018083116102cf57829003601f168201915b505050505081565b5f54606090821061034c5760405162461bcd60e51b815260206004820152601960248201527f506f736963696f6e2066756572612064652072616e676f2e200000000000000060448201526064015b60405180910390fd5b5f828154811061035e5761035e610bd1565b905f5260205f2001805461037190610b99565b80601f016020809104026020016040519081016040528092919081815260200182805461039d90610b99565b80156103e85780601f106103bf576101008083540402835291602001916103e8565b820191905f5260205f20905b8154815290600101906020018083116103cb57829003601f168201915b50505050509050919050565b5f6103fe826106e6565b6104425760405162461bcd60e51b8152602060048201526015602482015274027379032bc34b9ba329032b9b2903b30b637b9171605d1b6044820152606401610343565b6001826040516104529190610be5565b908152604051908190036020019020546001600160a01b031692915050565b5f61047c8383610875565b90508015155f036104915761049183836107af565b505050565b61024c8133610694565b5f54805b6104af600182610c14565b90505f811261052e5760015f82815481106104cc576104cc610bd1565b905f5260205f20016040516104e19190610c3a565b90815260405190819003602001902080546001600160a01b03191690555f80548061050e5761050e610cac565b600190038181905f5260205f20015f61052791906109a1565b90556104a4565b5050565b61024c8133610471565b60018160405161054c9190610be5565b90815260405190819003602001902080546001600160a01b03191690555f80545b808210156104915773__$b8aea4b0d65a9a3624a5e62f85f41dcce2$__6376332c2d5f84815481106105a1576105a1610bd1565b905f5260205f2001856040518363ffffffff1660e01b81526004016105c7929190610cc0565b602060405180830381865af41580156105e2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106069190610d5a565b15610682575f610617600183610d79565b8154811061062757610627610bd1565b905f5260205f20015f838154811061064157610641610bd1565b905f5260205f200190816106559190610dd9565b505f80548061066657610666610cac565b600190038181905f5260205f20015f61067f91906109a1565b90555b61068d826001610eb4565b915061056d565b5f61069f8383610875565b9050806104915760405162461bcd60e51b8152602060048201526015602482015274027379032bc34b9ba329032b9b2903b30b637b9171605d1b6044820152606401610343565b5f805481905b808210156107a65773__$b8aea4b0d65a9a3624a5e62f85f41dcce2$__6376332c2d5f848154811061072057610720610bd1565b905f5260205f2001866040518363ffffffff1660e01b8152600401610746929190610cc0565b602060405180830381865af4158015610761573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107859190610d5a565b15610794575060019392505050565b61079f826001610eb4565b91506106ec565b505f9392505050565b6107b8826106e6565b156107fd5760405162461bcd60e51b815260206004820152601560248201527402cb09032bc34b9ba329032b9b2903b30b637b9171605d1b6044820152606401610343565b8060018360405161080e9190610be5565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555f80546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563016104918382610ec7565b5f805481905b808210156109985773__$b8aea4b0d65a9a3624a5e62f85f41dcce2$__6376332c2d5f84815481106108af576108af610bd1565b905f5260205f2001876040518363ffffffff1660e01b81526004016108d5929190610cc0565b602060405180830381865af41580156108f0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109149190610d5a565b156109865760019250845f838154811061093057610930610bd1565b905f5260205f200190816109449190610ec7565b50836001866040516109569190610be5565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555b610991826001610eb4565b915061087b565b50505b92915050565b5080546109ad90610b99565b5f825580601f106109bc575050565b601f0160209004905f5260205f209081019061024c91905b808211156109e7575f81556001016109d4565b5090565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112610a0e575f80fd5b813567ffffffffffffffff80821115610a2957610a296109eb565b604051601f8301601f19908116603f01168101908282118183101715610a5157610a516109eb565b81604052838152866020858801011115610a69575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f60208284031215610a98575f80fd5b813567ffffffffffffffff811115610aae575f80fd5b610aba848285016109ff565b949350505050565b5f60208284031215610ad2575f80fd5b5035919050565b5f5b83811015610af3578181015183820152602001610adb565b50505f910152565b5f8151808452610b12816020860160208601610ad9565b601f01601f19169290920160200192915050565b602081525f610b386020830184610afb565b9392505050565b5f8060408385031215610b50575f80fd5b823567ffffffffffffffff811115610b66575f80fd5b610b72858286016109ff565b92505060208301356001600160a01b0381168114610b8e575f80fd5b809150509250929050565b600181811c90821680610bad57607f821691505b602082108103610bcb57634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603260045260245ffd5b5f8251610bf6818460208701610ad9565b9190910192915050565b634e487b7160e01b5f52601160045260245ffd5b8181035f831280158383131683831282161715610c3357610c33610c00565b5092915050565b5f808354610c4781610b99565b60018281168015610c5f5760018114610c7457610ca0565b60ff1984168752821515830287019450610ca0565b875f526020805f205f5b85811015610c975781548a820152908401908201610c7e565b50505082870194505b50929695505050505050565b634e487b7160e01b5f52603160045260245ffd5b604081525f808454610cd181610b99565b806040860152606060018084165f8114610cf25760018114610d0c57610d3a565b60ff1985168884015283151560051b880183019550610d3a565b895f526020805f205f5b86811015610d315781548b8201870152908401908201610d16565b8a018501975050505b50505050508281036020840152610d518185610afb565b95945050505050565b5f60208284031215610d6a575f80fd5b81518015158114610b38575f80fd5b8181038181111561099b5761099b610c00565b601f821115610491575f81815260208120601f850160051c81016020861015610db25750805b601f850160051c820191505b81811015610dd157828155600101610dbe565b505050505050565b818103610de4575050565b610dee8254610b99565b67ffffffffffffffff811115610e0657610e066109eb565b610e1a81610e148454610b99565b84610d8c565b5f601f821160018114610e4b575f8315610e345750848201545b5f19600385901b1c1916600184901b178455610ead565b5f85815260209020601f198416905f86815260209020845b83811015610e835782860154825560019586019590910190602001610e63565b5085831015610ea057818501545f19600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b8082018082111561099b5761099b610c00565b815167ffffffffffffffff811115610ee157610ee16109eb565b610eef81610e148454610b99565b602080601f831160018114610f22575f8415610f0b5750858301515b5f19600386901b1c1916600185901b178555610dd1565b5f85815260208120601f198616915b82811015610f5057888601518255948401946001909101908401610f31565b5085821015610f6d57878501515f19600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122072d4e43e712b131c20508f9a678ff9ea42f155585d6c27e808b09d7bf67d2a5264736f6c63430008140033a3c796c1157c3cb9fb6f34e43d73431e67f443a38176c32c7dd3b91e15009167";

    public static final String FUNC_ACL_ARRAY = "acl_array";

    public static final String FUNC_ACTIVAR = "activar";

    public static final String FUNC_actualizar_administrador_usuario_clave_direccion = "actualizar_administrador_usuario_clave_direccion";

    public static final String FUNC_actualizar_direccion = "actualizar_direccion";

    public static final String FUNC_actualizar_texto = "actualizar_texto";

    public static final String FUNC_AUTO_BORRAR = "auto_borrar";

    public static final String FUNC_AUTO_CREAR = "auto_crear";

    public static final String FUNC_borrar_administrador = "borrar_administrador";

    public static final String FUNC_BORRAR_ANTIGUOS = "borrar_antiguos";

    public static final String FUNC_borrar_direccion = "borrar_direccion";

    public static final String FUNC_BORRAR_EMAIL = "borrar_email";

    public static final String FUNC_BORRAR_TEXTO = "borrar_texto";

    public static final String FUNC_COSTE = "coste";

    public static final String FUNC_crear = "crear";

    public static final String FUNC_CREAR_ADMINISTRADOR = "crear_administrador";

    public static final String FUNC_DIRECCIONES_TEXTOS_MARCAS_ARIMAPA = "direcciones_textos_marcas_arimapa";

    public static final String FUNC_ESTADO = "estado";

    public static final String FUNC_estar_direccion = "estar_direccion";

    public static final String FUNC_ESTAR_EMAIL = "estar_email";

    public static final String FUNC_ESTAR_TEXTO = "estar_texto";

    public static final String FUNC_INACTIVAR = "inactivar";

    public static final String FUNC_LEER_ADMINISTRADOR_POS = "leer_administrador_pos";

    public static final String FUNC_LEER_ADMINISTRADORES_NUM = "leer_administradores_num";

    public static final String FUNC_LEER_COSTE = "leer_coste";

    public static final String FUNC_LEER_DIRECCION = "leer_direccion";

    public static final String FUNC_LEER_DIRECCIONES_POS = "leer_direcciones_pos";

    public static final String FUNC_leer_email = "leer_email";

    public static final String FUNC_LEER_EMAILS_POS = "leer_emails_pos";

    public static final String FUNC_leer_marca_sec = "leer_marca_sec";

    public static final String FUNC_LEER_NUM = "leer_num";

    public static final String FUNC_leer_st_sec = "leer_st_sec";

    public static final String FUNC_leer_texto = "leer_texto";

    public static final String FUNC_LEER_TEXTOS_POS = "leer_textos_pos";

    public static final String FUNC_LIMITAR = "limitar";

    public static final String FUNC_PONER_COSTE = "poner_coste";

    public static final String FUNC_REINICIAR = "reiniciar";

    public static final String FUNC_SER_ADMINISTRADOR = "ser_administrador";

    public static final String FUNC_TEXTOS_DIRECCIONES_ARIMAPA = "textos_direcciones_arimapa";

    public static final Event AD_AD_U_EVENT = new Event("Ad_ad_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event AD_U_U_EVENT = new Event("Ad_u_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event MENSAJE_EVENT = new Event("Mensaje", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event OK_EVENT = new Event("Ok", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ST_U_EVENT = new Event("St_u", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Direcciones_emails_mapas(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Direcciones_emails_mapas(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Direcciones_emails_mapas(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Direcciones_emails_mapas(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<Ad_ad_uEventResponse> getAd_ad_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_AD_U_EVENT, transactionReceipt);
        ArrayList<Ad_ad_uEventResponse> responses = new ArrayList<Ad_ad_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.origen = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.destino = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_ad_uEventResponse getAd_ad_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_AD_U_EVENT, log);
        Ad_ad_uEventResponse typedResponse = new Ad_ad_uEventResponse();
        typedResponse.log = log;
        typedResponse.origen = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.destino = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_ad_uEventFromLog(log));
    }

    public Flowable<Ad_ad_uEventResponse> ad_ad_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_AD_U_EVENT));
        return ad_ad_uEventFlowable(filter);
    }

    public static List<Ad_u_uEventResponse> getAd_u_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AD_U_U_EVENT, transactionReceipt);
        ArrayList<Ad_u_uEventResponse> responses = new ArrayList<Ad_u_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            Ad_u_uEventResponse typedResponse = new Ad_u_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.direccion = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static Ad_u_uEventResponse getAd_u_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AD_U_U_EVENT, log);
        Ad_u_uEventResponse typedResponse = new Ad_u_uEventResponse();
        typedResponse.log = log;
        typedResponse.direccion = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<Ad_u_uEventResponse> ad_u_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAd_u_uEventFromLog(log));
    }

    public Flowable<Ad_u_uEventResponse> ad_u_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AD_U_U_EVENT));
        return ad_u_uEventFlowable(filter);
    }

    public static List<MensajeEventResponse> getMensajeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(MENSAJE_EVENT, transactionReceipt);
        ArrayList<MensajeEventResponse> responses = new ArrayList<MensajeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MensajeEventResponse typedResponse = new MensajeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MensajeEventResponse getMensajeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(MENSAJE_EVENT, log);
        MensajeEventResponse typedResponse = new MensajeEventResponse();
        typedResponse.log = log;
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMensajeEventFromLog(log));
    }

    public Flowable<MensajeEventResponse> mensajeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MENSAJE_EVENT));
        return mensajeEventFlowable(filter);
    }

    public static List<OkEventResponse> getOkEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OK_EVENT, transactionReceipt);
        ArrayList<OkEventResponse> responses = new ArrayList<OkEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OkEventResponse typedResponse = new OkEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OkEventResponse getOkEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OK_EVENT, log);
        OkEventResponse typedResponse = new OkEventResponse();
        typedResponse.log = log;
        typedResponse.es = (Boolean) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.mensaje = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<OkEventResponse> okEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOkEventFromLog(log));
    }

    public Flowable<OkEventResponse> okEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OK_EVENT));
        return okEventFlowable(filter);
    }

    public static List<St_uEventResponse> getSt_uEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ST_U_EVENT, transactionReceipt);
        ArrayList<St_uEventResponse> responses = new ArrayList<St_uEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            St_uEventResponse typedResponse = new St_uEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.texto = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static St_uEventResponse getSt_uEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ST_U_EVENT, log);
        St_uEventResponse typedResponse = new St_uEventResponse();
        typedResponse.log = log;
        typedResponse.texto = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.cantidad = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<St_uEventResponse> st_uEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSt_uEventFromLog(log));
    }

    public Flowable<St_uEventResponse> st_uEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ST_U_EVENT));
        return st_uEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple3<String, String, byte[]>> acl_array(BigInteger param0) {
        final Function function = new Function(FUNC_ACL_ARRAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteFunctionCall<Tuple3<String, String, byte[]>>(function,
                new Callable<Tuple3<String, String, byte[]>>() {
                    @Override
                    public Tuple3<String, String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> activar() {
        final Function function = new Function(
                FUNC_ACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String direccion, String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_administrador_usuario_clave_direccion(String usuario, byte[] clave, String nueva_direccion) {
        final Function function = new Function(
                FUNC_actualizar_administrador_usuario_clave_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave), 
                new org.web3j.abi.datatypes.Address(160, nueva_direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_direccion(String texto) {
        final Function function = new Function(
                FUNC_actualizar_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(texto)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_direccion(String texto, String direccion) {
        final Function function = new Function(
                FUNC_actualizar_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(texto), 
                new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_texto(String direccion, String texto) {
        final Function function = new Function(
                FUNC_actualizar_texto, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(texto)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> actualizar_texto(String texto) {
        final Function function = new Function(
                FUNC_actualizar_texto, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(texto)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> auto_borrar(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_AUTO_BORRAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> auto_crear(String email, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_AUTO_CREAR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador() {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_administrador(String direccion) {
        final Function function = new Function(
                FUNC_borrar_administrador, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_antiguos() {
        final Function function = new Function(
                FUNC_BORRAR_ANTIGUOS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_direccion(String direccion) {
        final Function function = new Function(
                FUNC_borrar_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_direccion() {
        final Function function = new Function(
                FUNC_borrar_direccion, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_email(String email) {
        final Function function = new Function(
                FUNC_BORRAR_EMAIL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrar_texto(String texto) {
        final Function function = new Function(
                FUNC_BORRAR_TEXTO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(texto)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> coste() {
        final Function function = new Function(FUNC_COSTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> crear(String email) {
        final Function function = new Function(
                FUNC_crear, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crear(String direccion, String email) {
        final Function function = new Function(
                FUNC_crear, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(email)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> crear_administrador(String direccion, String usuario, byte[] clave) {
        final Function function = new Function(
                FUNC_CREAR_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion), 
                new org.web3j.abi.datatypes.Utf8String(usuario), 
                new org.web3j.abi.datatypes.DynamicBytes(clave)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> direcciones_textos_marcas_arimapa() {
        final Function function = new Function(FUNC_DIRECCIONES_TEXTOS_MARCAS_ARIMAPA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> estado() {
        final Function function = new Function(FUNC_ESTADO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> estar_direccion() {
        final Function function = new Function(FUNC_estar_direccion, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> estar_direccion(String direccion) {
        final Function function = new Function(FUNC_estar_direccion, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> estar_email(String email) {
        final Function function = new Function(FUNC_ESTAR_EMAIL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(email)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> estar_texto(String texto) {
        final Function function = new Function(FUNC_ESTAR_TEXTO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(texto)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> inactivar() {
        final Function function = new Function(
                FUNC_INACTIVAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> leer_administrador_pos(String direccion) {
        final Function function = new Function(FUNC_LEER_ADMINISTRADOR_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_administradores_num() {
        final Function function = new Function(FUNC_LEER_ADMINISTRADORES_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_coste() {
        final Function function = new Function(FUNC_LEER_COSTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> leer_direccion(String email) {
        final Function function = new Function(FUNC_LEER_DIRECCION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(email)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_direcciones_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_DIRECCIONES_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_email() {
        final Function function = new Function(FUNC_leer_email, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_email(String direccion) {
        final Function function = new Function(FUNC_leer_email, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_emails_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_EMAILS_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> leer_marca_sec(String direccion) {
        final Function function = new Function(FUNC_leer_marca_sec, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_marca_sec() {
        final Function function = new Function(FUNC_leer_marca_sec, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> leer_num() {
        final Function function = new Function(FUNC_LEER_NUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<st_secs> leer_st_sec(String direccion) {
        final Function function = new Function(FUNC_leer_st_sec, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<st_secs>() {}));
        return executeRemoteCallSingleValueReturn(function, st_secs.class);
    }

    public RemoteFunctionCall<st_secs> leer_st_sec() {
        final Function function = new Function(FUNC_leer_st_sec, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<st_secs>() {}));
        return executeRemoteCallSingleValueReturn(function, st_secs.class);
    }

    public RemoteFunctionCall<String> leer_texto() {
        final Function function = new Function(FUNC_leer_texto, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_texto(String direccion) {
        final Function function = new Function(FUNC_leer_texto, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> leer_textos_pos(BigInteger pos) {
        final Function function = new Function(FUNC_LEER_TEXTOS_POS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> limitar() {
        final Function function = new Function(
                FUNC_LIMITAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> poner_coste(BigInteger _coste) {
        final Function function = new Function(
                FUNC_PONER_COSTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_coste)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reiniciar() {
        final Function function = new Function(
                FUNC_REINICIAR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> ser_administrador(String direccion) {
        final Function function = new Function(FUNC_SER_ADMINISTRADOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, direccion)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> textos_direcciones_arimapa() {
        final Function function = new Function(FUNC_TEXTOS_DIRECCIONES_ARIMAPA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static Direcciones_emails_mapas load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Direcciones_emails_mapas(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Direcciones_emails_mapas load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Direcciones_emails_mapas(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Direcciones_emails_mapas load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Direcciones_emails_mapas(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Direcciones_emails_mapas load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Direcciones_emails_mapas(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Direcciones_emails_mapas> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Direcciones_emails_mapas.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Direcciones_emails_mapas> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Direcciones_emails_mapas.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Direcciones_emails_mapas> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Direcciones_emails_mapas.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Direcciones_emails_mapas> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Direcciones_emails_mapas.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class st_secs extends DynamicStruct {
        public String texto;

        public BigInteger marca_sec;

        public st_secs(String texto, BigInteger marca_sec) {
            super(new org.web3j.abi.datatypes.Utf8String(texto), 
                    new org.web3j.abi.datatypes.generated.Uint256(marca_sec));
            this.texto = texto;
            this.marca_sec = marca_sec;
        }

        public st_secs(Utf8String texto, Uint256 marca_sec) {
            super(texto, marca_sec);
            this.texto = texto.getValue();
            this.marca_sec = marca_sec.getValue();
        }
    }

    public static class Ad_ad_uEventResponse extends BaseEventResponse {
        public String origen;

        public String destino;

        public BigInteger cantidad;

        public String mensaje;
    }

    public static class Ad_u_uEventResponse extends BaseEventResponse {
        public String direccion;

        public BigInteger cantidad;

        public BigInteger id;

        public String mensaje;
    }

    public static class MensajeEventResponse extends BaseEventResponse {
        public String mensaje;
    }

    public static class OkEventResponse extends BaseEventResponse {
        public Boolean es;

        public String mensaje;
    }

    public static class St_uEventResponse extends BaseEventResponse {
        public String texto;

        public BigInteger cantidad;
    }
}
